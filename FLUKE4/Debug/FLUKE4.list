
FLUKE4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800a050  0800a050  0001a050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4c0  0800a4c0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4c0  0800a4c0  0001a4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4c8  0800a4c8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4c8  0800a4c8  0001a4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a4d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  200001d4  0800a6a4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  0800a6a4  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb81  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c9  00000000  00000000  0002fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00032098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aad  00000000  00000000  00032e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284bc  00000000  00000000  00033925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001000d  00000000  00000000  0005bde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc976  00000000  00000000  0006bdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f18  00000000  00000000  00168764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0016d67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a038 	.word	0x0800a038

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a038 	.word	0x0800a038

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f000 fce2 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f86c 	bl	80010d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ffc:	f000 f8bb 	bl	8001176 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 fa0c 	bl	800141c <MX_GPIO_Init>
  MX_DMA_Init();
 8001004:	f000 f9ec 	bl	80013e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001008:	f000 f9ba 	bl	8001380 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800100c:	f000 f8de 	bl	80011cc <MX_ADC1_Init>
  MX_ADC3_Init();
 8001010:	f000 f952 	bl	80012b8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
 HAL_ADC_Start_DMA(&hadc1, &medicion, 1);
 8001014:	2201      	movs	r2, #1
 8001016:	4928      	ldr	r1, [pc, #160]	; (80010b8 <main+0xc8>)
 8001018:	4828      	ldr	r0, [pc, #160]	; (80010bc <main+0xcc>)
 800101a:	f001 f871 	bl	8002100 <HAL_ADC_Start_DMA>
 HAL_ADC_Start_DMA(&hadc3, &medir, 1);
 800101e:	2201      	movs	r2, #1
 8001020:	4927      	ldr	r1, [pc, #156]	; (80010c0 <main+0xd0>)
 8001022:	4828      	ldr	r0, [pc, #160]	; (80010c4 <main+0xd4>)
 8001024:	f001 f86c 	bl	8002100 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  volt = (medicion/4096.0)*voltaje;
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <main+0xc8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa69 	bl	8000504 <__aeabi_ui2d>
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <main+0xd8>)
 8001038:	f7ff fc08 	bl	800084c <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	a31a      	add	r3, pc, #104	; (adr r3, 80010b0 <main+0xc0>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff fad5 	bl	80005f8 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fdc7 	bl	8000be8 <__aeabi_d2f>
 800105a:	4603      	mov	r3, r0
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <main+0xdc>)
 800105e:	6013      	str	r3, [r2, #0]
	  ohm = (10000 * medir)/(voltaje - medir);
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <main+0xd0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f242 7210 	movw	r2, #10000	; 0x2710
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa49 	bl	8000504 <__aeabi_ui2d>
 8001072:	4604      	mov	r4, r0
 8001074:	460d      	mov	r5, r1
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <main+0xd0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa42 	bl	8000504 <__aeabi_ui2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	a10a      	add	r1, pc, #40	; (adr r1, 80010b0 <main+0xc0>)
 8001086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800108a:	f7ff f8fd 	bl	8000288 <__aeabi_dsub>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4620      	mov	r0, r4
 8001094:	4629      	mov	r1, r5
 8001096:	f7ff fbd9 	bl	800084c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fda1 	bl	8000be8 <__aeabi_d2f>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <main+0xe0>)
 80010aa:	6013      	str	r3, [r2, #0]
	  volt = (medicion/4096.0)*voltaje;
 80010ac:	e7bc      	b.n	8001028 <main+0x38>
 80010ae:	bf00      	nop
 80010b0:	66666666 	.word	0x66666666
 80010b4:	400a6666 	.word	0x400a6666
 80010b8:	20000388 	.word	0x20000388
 80010bc:	200001f0 	.word	0x200001f0
 80010c0:	20000390 	.word	0x20000390
 80010c4:	20000254 	.word	0x20000254
 80010c8:	40b00000 	.word	0x40b00000
 80010cc:	2000038c 	.word	0x2000038c
 80010d0:	20000394 	.word	0x20000394

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b096      	sub	sp, #88	; 0x58
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2244      	movs	r2, #68	; 0x44
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 fb6b 	bl	80067be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010fa:	f002 fb97 	bl	800382c <HAL_PWREx_ControlVoltageScaling>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001104:	f000 f9f0 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001108:	2302      	movs	r3, #2
 800110a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001110:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001112:	2310      	movs	r3, #16
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111a:	2302      	movs	r3, #2
 800111c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001122:	230a      	movs	r3, #10
 8001124:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001126:	2307      	movs	r3, #7
 8001128:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800112a:	2302      	movs	r3, #2
 800112c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112e:	2302      	movs	r3, #2
 8001130:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fbce 	bl	80038d8 <HAL_RCC_OscConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001142:	f000 f9d1 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001146:	230f      	movs	r3, #15
 8001148:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114a:	2303      	movs	r3, #3
 800114c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	2104      	movs	r1, #4
 800115e:	4618      	mov	r0, r3
 8001160:	f002 ff96 	bl	8004090 <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800116a:	f000 f9bd 	bl	80014e8 <Error_Handler>
  }
}
 800116e:	bf00      	nop
 8001170:	3758      	adds	r7, #88	; 0x58
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b0a2      	sub	sp, #136	; 0x88
 800117a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2288      	movs	r2, #136	; 0x88
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f005 fb1b 	bl	80067be <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800118e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001192:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001194:	2302      	movs	r3, #2
 8001196:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800119c:	2308      	movs	r3, #8
 800119e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011a0:	2307      	movs	r3, #7
 80011a2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011b0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 f98f 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80011c0:	f000 f992 	bl	80014e8 <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3788      	adds	r7, #136	; 0x88
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <MX_ADC1_Init+0xe0>)
 80011f0:	4a2f      	ldr	r2, [pc, #188]	; (80012b0 <MX_ADC1_Init+0xe4>)
 80011f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <MX_ADC1_Init+0xe0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_ADC1_Init+0xe0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001206:	4b29      	ldr	r3, [pc, #164]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <MX_ADC1_Init+0xe0>)
 800120e:	2204      	movs	r2, #4
 8001210:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001214:	2200      	movs	r2, #0
 8001216:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_ADC1_Init+0xe0>)
 800121a:	2201      	movs	r2, #1
 800121c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001220:	2201      	movs	r2, #1
 8001222:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_ADC1_Init+0xe0>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001234:	2200      	movs	r2, #0
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_ADC1_Init+0xe0>)
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001242:	2200      	movs	r2, #0
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800124e:	4817      	ldr	r0, [pc, #92]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001250:	f000 fe06 	bl	8001e60 <HAL_ADC_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800125a:	f000 f945 	bl	80014e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4810      	ldr	r0, [pc, #64]	; (80012ac <MX_ADC1_Init+0xe0>)
 800126a:	f001 fd55 	bl	8002d18 <HAL_ADCEx_MultiModeConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001274:	f000 f938 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_ADC1_Init+0xe8>)
 800127a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127c:	2306      	movs	r3, #6
 800127e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001280:	2307      	movs	r3, #7
 8001282:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001284:	237f      	movs	r3, #127	; 0x7f
 8001286:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001288:	2304      	movs	r3, #4
 800128a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001296:	f001 f80d 	bl	80022b4 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80012a0:	f000 f922 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200001f0 	.word	0x200001f0
 80012b0:	50040000 	.word	0x50040000
 80012b4:	04300002 	.word	0x04300002

080012b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <MX_ADC3_Init+0xbc>)
 80012d0:	4a29      	ldr	r2, [pc, #164]	; (8001378 <MX_ADC3_Init+0xc0>)
 80012d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MX_ADC3_Init+0xbc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <MX_ADC3_Init+0xbc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <MX_ADC3_Init+0xbc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_ADC3_Init+0xbc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_ADC3_Init+0xbc>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_ADC3_Init+0xbc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_ADC3_Init+0xbc>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_ADC3_Init+0xbc>)
 8001300:	2201      	movs	r2, #1
 8001302:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_ADC3_Init+0xbc>)
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_ADC3_Init+0xbc>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_ADC3_Init+0xbc>)
 8001314:	2200      	movs	r2, #0
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_ADC3_Init+0xbc>)
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_ADC3_Init+0xbc>)
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_ADC3_Init+0xbc>)
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <MX_ADC3_Init+0xbc>)
 8001330:	f000 fd96 	bl	8001e60 <HAL_ADC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800133a:	f000 f8d5 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_ADC3_Init+0xc4>)
 8001340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001342:	2306      	movs	r3, #6
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001346:	2307      	movs	r3, #7
 8001348:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800134a:	237f      	movs	r3, #127	; 0x7f
 800134c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800134e:	2304      	movs	r3, #4
 8001350:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_ADC3_Init+0xbc>)
 800135c:	f000 ffaa 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001366:	f000 f8bf 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000254 	.word	0x20000254
 8001378:	50040200 	.word	0x50040200
 800137c:	08600004 	.word	0x08600004

08001380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 8001386:	4a15      	ldr	r2, [pc, #84]	; (80013dc <MX_USART2_UART_Init+0x5c>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013c4:	f003 fd44 	bl	8004e50 <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ce:	f000 f88b 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000300 	.word	0x20000300
 80013dc:	40004400 	.word	0x40004400

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_DMA_Init+0x38>)
 80013e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <MX_DMA_Init+0x38>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6493      	str	r3, [r2, #72]	; 0x48
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_DMA_Init+0x38>)
 80013f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	200b      	movs	r0, #11
 8001404:	f001 fe13 	bl	800302e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001408:	200b      	movs	r0, #11
 800140a:	f001 fe2c 	bl	8003066 <HAL_NVIC_EnableIRQ>

}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <MX_GPIO_Init+0xc4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a2a      	ldr	r2, [pc, #168]	; (80014e0 <MX_GPIO_Init+0xc4>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <MX_GPIO_Init+0xc4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144a:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <MX_GPIO_Init+0xc4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <MX_GPIO_Init+0xc4>)
 8001450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <MX_GPIO_Init+0xc4>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_GPIO_Init+0xc4>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <MX_GPIO_Init+0xc4>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_GPIO_Init+0xc4>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_GPIO_Init+0xc4>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <MX_GPIO_Init+0xc4>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_GPIO_Init+0xc4>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2120      	movs	r1, #32
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f002 f9a1 	bl	80037e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	480b      	ldr	r0, [pc, #44]	; (80014e4 <MX_GPIO_Init+0xc8>)
 80014b6:	f001 ffe9 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014ba:	2320      	movs	r3, #32
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f001 ffda 	bl	800348c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	48000800 	.word	0x48000800

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_MspInit+0x44>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_MspInit+0x44>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6613      	str	r3, [r2, #96]	; 0x60
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_MspInit+0x44>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x44>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x44>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6593      	str	r3, [r2, #88]	; 0x58
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x44>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	; 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a48      	ldr	r2, [pc, #288]	; (800167c <HAL_ADC_MspInit+0x140>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d158      	bne.n	8001610 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800155e:	4b48      	ldr	r3, [pc, #288]	; (8001680 <HAL_ADC_MspInit+0x144>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	4a46      	ldr	r2, [pc, #280]	; (8001680 <HAL_ADC_MspInit+0x144>)
 8001566:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001568:	4b45      	ldr	r3, [pc, #276]	; (8001680 <HAL_ADC_MspInit+0x144>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d10b      	bne.n	8001588 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001570:	4b44      	ldr	r3, [pc, #272]	; (8001684 <HAL_ADC_MspInit+0x148>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	4a43      	ldr	r2, [pc, #268]	; (8001684 <HAL_ADC_MspInit+0x148>)
 8001576:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800157a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157c:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_ADC_MspInit+0x148>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001588:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <HAL_ADC_MspInit+0x148>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	4a3d      	ldr	r2, [pc, #244]	; (8001684 <HAL_ADC_MspInit+0x148>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001594:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_ADC_MspInit+0x148>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015a4:	230b      	movs	r3, #11
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	4835      	ldr	r0, [pc, #212]	; (8001688 <HAL_ADC_MspInit+0x14c>)
 80015b4:	f001 ff6a 	bl	800348c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015b8:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_ADC_MspInit+0x150>)
 80015ba:	4a35      	ldr	r2, [pc, #212]	; (8001690 <HAL_ADC_MspInit+0x154>)
 80015bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80015be:	4b33      	ldr	r3, [pc, #204]	; (800168c <HAL_ADC_MspInit+0x150>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c4:	4b31      	ldr	r3, [pc, #196]	; (800168c <HAL_ADC_MspInit+0x150>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ca:	4b30      	ldr	r3, [pc, #192]	; (800168c <HAL_ADC_MspInit+0x150>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015d0:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_ADC_MspInit+0x150>)
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_ADC_MspInit+0x150>)
 80015d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_ADC_MspInit+0x150>)
 80015e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015e6:	4b29      	ldr	r3, [pc, #164]	; (800168c <HAL_ADC_MspInit+0x150>)
 80015e8:	2220      	movs	r2, #32
 80015ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_ADC_MspInit+0x150>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015f2:	4826      	ldr	r0, [pc, #152]	; (800168c <HAL_ADC_MspInit+0x150>)
 80015f4:	f001 fd52 	bl	800309c <HAL_DMA_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015fe:	f7ff ff73 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <HAL_ADC_MspInit+0x150>)
 8001606:	64da      	str	r2, [r3, #76]	; 0x4c
 8001608:	4a20      	ldr	r2, [pc, #128]	; (800168c <HAL_ADC_MspInit+0x150>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800160e:	e031      	b.n	8001674 <HAL_ADC_MspInit+0x138>
  else if(hadc->Instance==ADC3)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_ADC_MspInit+0x158>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12c      	bne.n	8001674 <HAL_ADC_MspInit+0x138>
    HAL_RCC_ADC_CLK_ENABLED++;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_ADC_MspInit+0x144>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_ADC_MspInit+0x144>)
 8001622:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_ADC_MspInit+0x144>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d10b      	bne.n	8001644 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC_CLK_ENABLE();
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_ADC_MspInit+0x148>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_ADC_MspInit+0x148>)
 8001632:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_ADC_MspInit+0x148>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_ADC_MspInit+0x148>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_ADC_MspInit+0x148>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_ADC_MspInit+0x148>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800165c:	2302      	movs	r3, #2
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001660:	230b      	movs	r3, #11
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <HAL_ADC_MspInit+0x14c>)
 8001670:	f001 ff0c 	bl	800348c <HAL_GPIO_Init>
}
 8001674:	bf00      	nop
 8001676:	3730      	adds	r7, #48	; 0x30
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	50040000 	.word	0x50040000
 8001680:	20000398 	.word	0x20000398
 8001684:	40021000 	.word	0x40021000
 8001688:	48000800 	.word	0x48000800
 800168c:	200002b8 	.word	0x200002b8
 8001690:	40020008 	.word	0x40020008
 8001694:	50040200 	.word	0x50040200

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0ac      	sub	sp, #176	; 0xb0
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2288      	movs	r2, #136	; 0x88
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f005 f880 	bl	80067be <memset>
  if(huart->Instance==USART2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a21      	ldr	r2, [pc, #132]	; (8001748 <HAL_UART_MspInit+0xb0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d13b      	bne.n	8001740 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 feff 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016e0:	f7ff ff02 	bl	80014e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_UART_MspInit+0xb4>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <HAL_UART_MspInit+0xb4>)
 80016ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ee:	6593      	str	r3, [r2, #88]	; 0x58
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_UART_MspInit+0xb4>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_UART_MspInit+0xb4>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	4a12      	ldr	r2, [pc, #72]	; (800174c <HAL_UART_MspInit+0xb4>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_UART_MspInit+0xb4>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001714:	230c      	movs	r3, #12
 8001716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172c:	2307      	movs	r3, #7
 800172e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f001 fea6 	bl	800348c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	37b0      	adds	r7, #176	; 0xb0
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40004400 	.word	0x40004400
 800174c:	40021000 	.word	0x40021000

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f96a 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <DMA1_Channel1_IRQHandler+0x10>)
 80017aa:	f001 fd8f 	bl	80032cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200002b8 	.word	0x200002b8

080017b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return 1;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_kill>:

int _kill(int pid, int sig)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017d2:	f005 f847 	bl	8006864 <__errno>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2216      	movs	r2, #22
 80017da:	601a      	str	r2, [r3, #0]
  return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_exit>:

void _exit (int status)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffe7 	bl	80017c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017fa:	e7fe      	b.n	80017fa <_exit+0x12>

080017fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e00a      	b.n	8001824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180e:	f3af 8000 	nop.w
 8001812:	4601      	mov	r1, r0
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	b2ca      	uxtb	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbf0      	blt.n	800180e <_read+0x12>
  }

  return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e009      	b.n	800185c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	60ba      	str	r2, [r7, #8]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf1      	blt.n	8001848 <_write+0x12>
  }
  return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_close>:

int _close(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001896:	605a      	str	r2, [r3, #4]
  return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_isatty>:

int _isatty(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f004 ffac 	bl	8006864 <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20018000 	.word	0x20018000
 8001938:	00000400 	.word	0x00000400
 800193c:	2000039c 	.word	0x2000039c
 8001940:	200004f0 	.word	0x200004f0

08001944 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800196c:	f7ff ffea 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	; (80019a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <LoopForever+0xe>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <LoopForever+0x16>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001996:	f004 ff6b 	bl	8006870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800199a:	f7ff fb29 	bl	8000ff0 <main>

0800199e <LoopForever>:

LoopForever:
    b LoopForever
 800199e:	e7fe      	b.n	800199e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019ac:	0800a4d0 	.word	0x0800a4d0
  ldr r2, =_sbss
 80019b0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019b4:	200004f0 	.word	0x200004f0

080019b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC1_2_IRQHandler>
	...

080019bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_Init+0x3c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <HAL_Init+0x3c>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	2003      	movs	r0, #3
 80019d4:	f001 fb20 	bl	8003018 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 f80f 	bl	80019fc <HAL_InitTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	e001      	b.n	80019ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ea:	f7ff fd83 	bl	80014f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ee:	79fb      	ldrb	r3, [r7, #7]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_InitTick+0x6c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d023      	beq.n	8001a58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_InitTick+0x70>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_InitTick+0x6c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 fb2b 	bl	8003082 <HAL_SYSTICK_Config>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10f      	bne.n	8001a52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b0f      	cmp	r3, #15
 8001a36:	d809      	bhi.n	8001a4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f001 faf5 	bl	800302e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_InitTick+0x74>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e007      	b.n	8001a5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	e004      	b.n	8001a5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e001      	b.n	8001a5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008
 8001a98:	200003a0 	.word	0x200003a0

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	200003a0 	.word	0x200003a0

08001ab4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	609a      	str	r2, [r3, #8]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3360      	adds	r3, #96	; 0x60
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <LL_ADC_SetOffset+0x44>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	03fff000 	.word	0x03fff000

08001b64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3360      	adds	r3, #96	; 0x60
 8001b72:	461a      	mov	r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3360      	adds	r3, #96	; 0x60
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3330      	adds	r3, #48	; 0x30
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	4413      	add	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	211f      	movs	r1, #31
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0e9b      	lsrs	r3, r3, #26
 8001c24:	f003 011f 	and.w	r1, r3, #31
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	431a      	orrs	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3314      	adds	r3, #20
 8001c54:	461a      	mov	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	0e5b      	lsrs	r3, r3, #25
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	0d1b      	lsrs	r3, r3, #20
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	2107      	movs	r1, #7
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	401a      	ands	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	0d1b      	lsrs	r3, r3, #20
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c8e:	bf00      	nop
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0318 	and.w	r3, r3, #24
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cc0:	40d9      	lsrs	r1, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	0007ffff 	.word	0x0007ffff

08001ce4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6093      	str	r3, [r2, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d38:	d101      	bne.n	8001d3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d88:	d101      	bne.n	8001d8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <LL_ADC_IsEnabled+0x18>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <LL_ADC_IsEnabled+0x1a>
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dfe:	f043 0204 	orr.w	r2, r3, #4
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d101      	bne.n	8001e2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d101      	bne.n	8001e50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e130      	b.n	80020dc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff fb57 	bl	800153c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff3f 	bl	8001d24 <LL_ADC_IsDeepPowerDownEnabled>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff25 	bl	8001d00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff5a 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d115      	bne.n	8001ef2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff3e 	bl	8001d4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed0:	4b84      	ldr	r3, [pc, #528]	; (80020e4 <HAL_ADC_Init+0x284>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	4a84      	ldr	r2, [pc, #528]	; (80020e8 <HAL_ADC_Init+0x288>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	3301      	adds	r3, #1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff3c 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10d      	bne.n	8001f1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff75 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 8001f28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 80c9 	bne.w	80020ca <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 80c5 	bne.w	80020ca <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f48:	f043 0202 	orr.w	r2, r3, #2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff35 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d115      	bne.n	8001f8c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f60:	4862      	ldr	r0, [pc, #392]	; (80020ec <HAL_ADC_Init+0x28c>)
 8001f62:	f7ff ff2f 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f66:	4604      	mov	r4, r0
 8001f68:	4861      	ldr	r0, [pc, #388]	; (80020f0 <HAL_ADC_Init+0x290>)
 8001f6a:	f7ff ff2b 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	431c      	orrs	r4, r3
 8001f72:	4860      	ldr	r0, [pc, #384]	; (80020f4 <HAL_ADC_Init+0x294>)
 8001f74:	f7ff ff26 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4323      	orrs	r3, r4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4619      	mov	r1, r3
 8001f86:	485c      	ldr	r0, [pc, #368]	; (80020f8 <HAL_ADC_Init+0x298>)
 8001f88:	f7ff fd94 	bl	8001ab4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7e5b      	ldrb	r3, [r3, #25]
 8001f90:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f96:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f9c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fa2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001faa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d106      	bne.n	8001fc8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	045b      	lsls	r3, r3, #17
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	4b44      	ldr	r3, [pc, #272]	; (80020fc <HAL_ADC_Init+0x29c>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff1b 	bl	8001e38 <LL_ADC_INJ_IsConversionOngoing>
 8002002:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d13d      	bne.n	8002086 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d13a      	bne.n	8002086 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002014:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800201c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800202c:	f023 0302 	bic.w	r3, r3, #2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	69b9      	ldr	r1, [r7, #24]
 8002036:	430b      	orrs	r3, r1
 8002038:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002040:	2b01      	cmp	r3, #1
 8002042:	d118      	bne.n	8002076 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800204e:	f023 0304 	bic.w	r3, r3, #4
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800205a:	4311      	orrs	r1, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002066:	430a      	orrs	r2, r1
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	611a      	str	r2, [r3, #16]
 8002074:	e007      	b.n	8002086 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10c      	bne.n	80020a8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	f023 010f 	bic.w	r1, r3, #15
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	1e5a      	subs	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
 80020a6:	e007      	b.n	80020b8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 020f 	bic.w	r2, r2, #15
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f023 0303 	bic.w	r3, r3, #3
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54
 80020c8:	e007      	b.n	80020da <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f043 0210 	orr.w	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020da:	7ffb      	ldrb	r3, [r7, #31]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3724      	adds	r7, #36	; 0x24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd90      	pop	{r4, r7, pc}
 80020e4:	20000000 	.word	0x20000000
 80020e8:	053e2d63 	.word	0x053e2d63
 80020ec:	50040000 	.word	0x50040000
 80020f0:	50040100 	.word	0x50040100
 80020f4:	50040200 	.word	0x50040200
 80020f8:	50040300 	.word	0x50040300
 80020fc:	fff0c007 	.word	0xfff0c007

08002100 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800210c:	4853      	ldr	r0, [pc, #332]	; (800225c <HAL_ADC_Start_DMA+0x15c>)
 800210e:	f7ff fde9 	bl	8001ce4 <LL_ADC_GetMultimode>
 8002112:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fe7a 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	f040 8093 	bne.w	800224c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_ADC_Start_DMA+0x34>
 8002130:	2302      	movs	r3, #2
 8002132:	e08e      	b.n	8002252 <HAL_ADC_Start_DMA+0x152>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a47      	ldr	r2, [pc, #284]	; (8002260 <HAL_ADC_Start_DMA+0x160>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d008      	beq.n	8002158 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b05      	cmp	r3, #5
 8002150:	d002      	beq.n	8002158 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b09      	cmp	r3, #9
 8002156:	d172      	bne.n	800223e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fc9d 	bl	8002a98 <ADC_Enable>
 800215e:	4603      	mov	r3, r0
 8002160:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d165      	bne.n	8002234 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a38      	ldr	r2, [pc, #224]	; (8002264 <HAL_ADC_Start_DMA+0x164>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d002      	beq.n	800218c <HAL_ADC_Start_DMA+0x8c>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	e000      	b.n	800218e <HAL_ADC_Start_DMA+0x8e>
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_ADC_Start_DMA+0x168>)
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	4293      	cmp	r3, r2
 8002194:	d002      	beq.n	800219c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	f023 0206 	bic.w	r2, r3, #6
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	659a      	str	r2, [r3, #88]	; 0x58
 80021c0:	e002      	b.n	80021c8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	4a27      	ldr	r2, [pc, #156]	; (800226c <HAL_ADC_Start_DMA+0x16c>)
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	4a26      	ldr	r2, [pc, #152]	; (8002270 <HAL_ADC_Start_DMA+0x170>)
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	4a25      	ldr	r2, [pc, #148]	; (8002274 <HAL_ADC_Start_DMA+0x174>)
 80021de:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	221c      	movs	r2, #28
 80021e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0210 	orr.w	r2, r2, #16
 80021fe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3340      	adds	r3, #64	; 0x40
 800221a:	4619      	mov	r1, r3
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f000 fff4 	bl	800320c <HAL_DMA_Start_IT>
 8002224:	4603      	mov	r3, r0
 8002226:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fddc 	bl	8001dea <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002232:	e00d      	b.n	8002250 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800223c:	e008      	b.n	8002250 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800224a:	e001      	b.n	8002250 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800224c:	2302      	movs	r3, #2
 800224e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002250:	7dfb      	ldrb	r3, [r7, #23]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	50040300 	.word	0x50040300
 8002260:	50040200 	.word	0x50040200
 8002264:	50040100 	.word	0x50040100
 8002268:	50040000 	.word	0x50040000
 800226c:	08002ba5 	.word	0x08002ba5
 8002270:	08002c7d 	.word	0x08002c7d
 8002274:	08002c99 	.word	0x08002c99

08002278 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b0b6      	sub	sp, #216	; 0xd8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x22>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e3c9      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x7b6>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fd95 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 83aa 	bne.w	8002a44 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d824      	bhi.n	800234a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	3b02      	subs	r3, #2
 8002306:	2b03      	cmp	r3, #3
 8002308:	d81b      	bhi.n	8002342 <HAL_ADC_ConfigChannel+0x8e>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <HAL_ADC_ConfigChannel+0x5c>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	08002321 	.word	0x08002321
 8002314:	08002329 	.word	0x08002329
 8002318:	08002331 	.word	0x08002331
 800231c:	08002339 	.word	0x08002339
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002320:	230c      	movs	r3, #12
 8002322:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002326:	e010      	b.n	800234a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002328:	2312      	movs	r3, #18
 800232a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800232e:	e00c      	b.n	800234a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002330:	2318      	movs	r3, #24
 8002332:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002336:	e008      	b.n	800234a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002340:	e003      	b.n	800234a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002342:	2306      	movs	r3, #6
 8002344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002348:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002358:	f7ff fc48 	bl	8001bec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fd56 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 8002366:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fd62 	bl	8001e38 <LL_ADC_INJ_IsConversionOngoing>
 8002374:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002378:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 81a4 	bne.w	80026ca <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 819f 	bne.w	80026ca <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	461a      	mov	r2, r3
 800239a:	f7ff fc53 	bl	8001c44 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	08db      	lsrs	r3, r3, #3
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d00a      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6919      	ldr	r1, [r3, #16]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d0:	f7ff fba4 	bl	8001b1c <LL_ADC_SetOffset>
 80023d4:	e179      	b.n	80026ca <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fbc1 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x14e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fbb6 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	0e9b      	lsrs	r3, r3, #26
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	e01e      	b.n	8002440 <HAL_ADC_ConfigChannel+0x18c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fbab 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002420:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002428:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e004      	b.n	800243e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1a4>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	e018      	b.n	800248a <HAL_ADC_ConfigChannel+0x1d6>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800246c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002474:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800247c:	2320      	movs	r3, #32
 800247e:	e004      	b.n	800248a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800248a:	429a      	cmp	r2, r3
 800248c:	d106      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fb7a 	bl	8001b90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fb5e 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x214>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2101      	movs	r1, #1
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fb53 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	f003 021f 	and.w	r2, r3, #31
 80024c6:	e01e      	b.n	8002506 <HAL_ADC_ConfigChannel+0x252>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2101      	movs	r1, #1
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fb48 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80024e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80024ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e004      	b.n	8002504 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80024fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <HAL_ADC_ConfigChannel+0x26a>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	0e9b      	lsrs	r3, r3, #26
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	e018      	b.n	8002550 <HAL_ADC_ConfigChannel+0x29c>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002532:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002536:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800253a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e004      	b.n	8002550 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002546:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002550:	429a      	cmp	r2, r3
 8002552:	d106      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fb17 	bl	8001b90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2102      	movs	r1, #2
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fafb 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_ADC_ConfigChannel+0x2da>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2102      	movs	r1, #2
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff faf0 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	e01e      	b.n	80025cc <HAL_ADC_ConfigChannel+0x318>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2102      	movs	r1, #2
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fae5 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80025ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80025b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e004      	b.n	80025ca <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80025c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x330>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	e014      	b.n	800260e <HAL_ADC_ConfigChannel+0x35a>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80025f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80025f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e004      	b.n	800260e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002604:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800260e:	429a      	cmp	r2, r3
 8002610:	d106      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	2102      	movs	r1, #2
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fab8 	bl	8001b90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2103      	movs	r1, #3
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fa9c 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <HAL_ADC_ConfigChannel+0x398>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2103      	movs	r1, #3
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fa91 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	f003 021f 	and.w	r2, r3, #31
 800264a:	e017      	b.n	800267c <HAL_ADC_ConfigChannel+0x3c8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2103      	movs	r1, #3
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fa86 	bl	8001b64 <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002666:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800266e:	2320      	movs	r3, #32
 8002670:	e003      	b.n	800267a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x3e0>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	e011      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x404>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80026a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80026a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e003      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80026b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d106      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2103      	movs	r1, #3
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fa63 	bl	8001b90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fb78 	bl	8001dc4 <LL_ADC_IsEnabled>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 8140 	bne.w	800295c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6819      	ldr	r1, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f7ff fad7 	bl	8001c9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	4a8f      	ldr	r2, [pc, #572]	; (8002930 <HAL_ADC_ConfigChannel+0x67c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	f040 8131 	bne.w	800295c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10b      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x46e>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	0e9b      	lsrs	r3, r3, #26
 8002710:	3301      	adds	r3, #1
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2b09      	cmp	r3, #9
 8002718:	bf94      	ite	ls
 800271a:	2301      	movls	r3, #1
 800271c:	2300      	movhi	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	e019      	b.n	8002756 <HAL_ADC_ConfigChannel+0x4a2>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002732:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e003      	b.n	8002746 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800273e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2b09      	cmp	r3, #9
 800274e:	bf94      	ite	ls
 8002750:	2301      	movls	r3, #1
 8002752:	2300      	movhi	r3, #0
 8002754:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002756:	2b00      	cmp	r3, #0
 8002758:	d079      	beq.n	800284e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002762:	2b00      	cmp	r3, #0
 8002764:	d107      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x4c2>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	0e9b      	lsrs	r3, r3, #26
 800276c:	3301      	adds	r3, #1
 800276e:	069b      	lsls	r3, r3, #26
 8002770:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002774:	e015      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x4ee>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002786:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e003      	b.n	800279a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	3301      	adds	r3, #1
 800279c:	069b      	lsls	r3, r3, #26
 800279e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x50e>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0e9b      	lsrs	r3, r3, #26
 80027b4:	3301      	adds	r3, #1
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	2101      	movs	r1, #1
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	e017      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x53e>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80027d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027da:	2320      	movs	r3, #32
 80027dc:	e003      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	ea42 0103 	orr.w	r1, r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x564>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	0e9b      	lsrs	r3, r3, #26
 8002808:	3301      	adds	r3, #1
 800280a:	f003 021f 	and.w	r2, r3, #31
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	051b      	lsls	r3, r3, #20
 8002816:	e018      	b.n	800284a <HAL_ADC_ConfigChannel+0x596>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002830:	2320      	movs	r3, #32
 8002832:	e003      	b.n	800283c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	3301      	adds	r3, #1
 800283e:	f003 021f 	and.w	r2, r3, #31
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284a:	430b      	orrs	r3, r1
 800284c:	e081      	b.n	8002952 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_ADC_ConfigChannel+0x5b6>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	3301      	adds	r3, #1
 8002862:	069b      	lsls	r3, r3, #26
 8002864:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002868:	e015      	b.n	8002896 <HAL_ADC_ConfigChannel+0x5e2>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e003      	b.n	800288e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	3301      	adds	r3, #1
 8002890:	069b      	lsls	r3, r3, #26
 8002892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x602>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	e017      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x632>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	61bb      	str	r3, [r7, #24]
  return result;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e003      	b.n	80028da <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	ea42 0103 	orr.w	r1, r2, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10d      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x65e>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 021f 	and.w	r2, r3, #31
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	3b1e      	subs	r3, #30
 800290a:	051b      	lsls	r3, r3, #20
 800290c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002910:	e01e      	b.n	8002950 <HAL_ADC_ConfigChannel+0x69c>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	60fb      	str	r3, [r7, #12]
  return result;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e006      	b.n	800293c <HAL_ADC_ConfigChannel+0x688>
 800292e:	bf00      	nop
 8002930:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f003 021f 	and.w	r2, r3, #31
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	3b1e      	subs	r3, #30
 800294a:	051b      	lsls	r3, r3, #20
 800294c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002950:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002956:	4619      	mov	r1, r3
 8002958:	f7ff f974 	bl	8001c44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b44      	ldr	r3, [pc, #272]	; (8002a74 <HAL_ADC_ConfigChannel+0x7c0>)
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d07a      	beq.n	8002a5e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002968:	4843      	ldr	r0, [pc, #268]	; (8002a78 <HAL_ADC_ConfigChannel+0x7c4>)
 800296a:	f7ff f8c9 	bl	8001b00 <LL_ADC_GetCommonPathInternalCh>
 800296e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a41      	ldr	r2, [pc, #260]	; (8002a7c <HAL_ADC_ConfigChannel+0x7c8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d12c      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800297c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d126      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3c      	ldr	r2, [pc, #240]	; (8002a80 <HAL_ADC_ConfigChannel+0x7cc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <HAL_ADC_ConfigChannel+0x6e8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <HAL_ADC_ConfigChannel+0x7d0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d15d      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800299c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029a4:	4619      	mov	r1, r3
 80029a6:	4834      	ldr	r0, [pc, #208]	; (8002a78 <HAL_ADC_ConfigChannel+0x7c4>)
 80029a8:	f7ff f897 	bl	8001ada <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ac:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <HAL_ADC_ConfigChannel+0x7d4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <HAL_ADC_ConfigChannel+0x7d8>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029c6:	e002      	b.n	80029ce <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f9      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029d4:	e040      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <HAL_ADC_ConfigChannel+0x7dc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d118      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d112      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <HAL_ADC_ConfigChannel+0x7cc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0x74c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <HAL_ADC_ConfigChannel+0x7d0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d12d      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a08:	4619      	mov	r1, r3
 8002a0a:	481b      	ldr	r0, [pc, #108]	; (8002a78 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a0c:	f7ff f865 	bl	8001ada <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a10:	e024      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d120      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11a      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d115      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	480e      	ldr	r0, [pc, #56]	; (8002a78 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a3e:	f7ff f84c 	bl	8001ada <LL_ADC_SetCommonPathInternalCh>
 8002a42:	e00c      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a56:	e002      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a58:	bf00      	nop
 8002a5a:	e000      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	37d8      	adds	r7, #216	; 0xd8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	80080000 	.word	0x80080000
 8002a78:	50040300 	.word	0x50040300
 8002a7c:	c7520000 	.word	0xc7520000
 8002a80:	50040000 	.word	0x50040000
 8002a84:	50040200 	.word	0x50040200
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	053e2d63 	.word	0x053e2d63
 8002a90:	cb840000 	.word	0xcb840000
 8002a94:	80000001 	.word	0x80000001

08002a98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff f98b 	bl	8001dc4 <LL_ADC_IsEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d169      	bne.n	8002b88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <ADC_Enable+0xfc>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f043 0210 	orr.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e055      	b.n	8002b8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f95a 	bl	8001d9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ae8:	482b      	ldr	r0, [pc, #172]	; (8002b98 <ADC_Enable+0x100>)
 8002aea:	f7ff f809 	bl	8001b00 <LL_ADC_GetCommonPathInternalCh>
 8002aee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <ADC_Enable+0x104>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	4a28      	ldr	r2, [pc, #160]	; (8002ba0 <ADC_Enable+0x108>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b12:	e002      	b.n	8002b1a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f9      	bne.n	8002b14 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b20:	f7fe ffbc 	bl	8001a9c <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b26:	e028      	b.n	8002b7a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f949 	bl	8001dc4 <LL_ADC_IsEnabled>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d104      	bne.n	8002b42 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff f92d 	bl	8001d9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b42:	f7fe ffab 	bl	8001a9c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d914      	bls.n	8002b7a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d00d      	beq.n	8002b7a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	f043 0210 	orr.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e007      	b.n	8002b8a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d1cf      	bne.n	8002b28 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	8000003f 	.word	0x8000003f
 8002b98:	50040300 	.word	0x50040300
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	053e2d63 	.word	0x053e2d63

08002ba4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d14b      	bne.n	8002c56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d021      	beq.n	8002c1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe fff2 	bl	8001bc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d032      	beq.n	8002c4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d12b      	bne.n	8002c4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d11f      	bne.n	8002c4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
 8002c1a:	e018      	b.n	8002c4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d111      	bne.n	8002c4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d105      	bne.n	8002c4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7ff fb12 	bl	8002278 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c54:	e00e      	b.n	8002c74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f7ff fb1c 	bl	80022a0 <HAL_ADC_ErrorCallback>
}
 8002c68:	e004      	b.n	8002c74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7ff fafe 	bl	800228c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	f043 0204 	orr.w	r2, r3, #4
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff faee 	bl	80022a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <LL_ADC_IsEnabled>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <LL_ADC_IsEnabled+0x18>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <LL_ADC_IsEnabled+0x1a>
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d101      	bne.n	8002d0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b09f      	sub	sp, #124	; 0x7c
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e093      	b.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d42:	2300      	movs	r3, #0
 8002d44:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a47      	ldr	r2, [pc, #284]	; (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d102      	bne.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d50:	4b46      	ldr	r3, [pc, #280]	; (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	e001      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e072      	b.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ffb9 	bl	8002cf2 <LL_ADC_REG_IsConversionOngoing>
 8002d80:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ffb3 	bl	8002cf2 <LL_ADC_REG_IsConversionOngoing>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d154      	bne.n	8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d151      	bne.n	8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d98:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d9a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02c      	beq.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002db6:	035b      	lsls	r3, r3, #13
 8002db8:	430b      	orrs	r3, r1
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc0:	4829      	ldr	r0, [pc, #164]	; (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dc2:	f7ff ff83 	bl	8002ccc <LL_ADC_IsEnabled>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	4828      	ldr	r0, [pc, #160]	; (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dca:	f7ff ff7f 	bl	8002ccc <LL_ADC_IsEnabled>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	431c      	orrs	r4, r3
 8002dd2:	4828      	ldr	r0, [pc, #160]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002dd4:	f7ff ff7a 	bl	8002ccc <LL_ADC_IsEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4323      	orrs	r3, r4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d137      	bne.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002de8:	f023 030f 	bic.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	6811      	ldr	r1, [r2, #0]
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dfc:	e028      	b.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e0a:	4817      	ldr	r0, [pc, #92]	; (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e0c:	f7ff ff5e 	bl	8002ccc <LL_ADC_IsEnabled>
 8002e10:	4604      	mov	r4, r0
 8002e12:	4816      	ldr	r0, [pc, #88]	; (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e14:	f7ff ff5a 	bl	8002ccc <LL_ADC_IsEnabled>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	431c      	orrs	r4, r3
 8002e1c:	4815      	ldr	r0, [pc, #84]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e1e:	f7ff ff55 	bl	8002ccc <LL_ADC_IsEnabled>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4323      	orrs	r3, r4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d112      	bne.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e32:	f023 030f 	bic.w	r3, r3, #15
 8002e36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e3a:	e009      	b.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	f043 0220 	orr.w	r2, r3, #32
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e4e:	e000      	b.n	8002e52 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	377c      	adds	r7, #124	; 0x7c
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd90      	pop	{r4, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	50040000 	.word	0x50040000
 8002e6c:	50040100 	.word	0x50040100
 8002e70:	50040300 	.word	0x50040300
 8002e74:	50040200 	.word	0x50040200

08002e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0b      	blt.n	8002f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4907      	ldr	r1, [pc, #28]	; (8002f14 <__NVIC_EnableIRQ+0x38>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	db0a      	blt.n	8002f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	490c      	ldr	r1, [pc, #48]	; (8002f64 <__NVIC_SetPriority+0x4c>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	0112      	lsls	r2, r2, #4
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f40:	e00a      	b.n	8002f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4908      	ldr	r1, [pc, #32]	; (8002f68 <__NVIC_SetPriority+0x50>)
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	3b04      	subs	r3, #4
 8002f50:	0112      	lsls	r2, r2, #4
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	440b      	add	r3, r1
 8002f56:	761a      	strb	r2, [r3, #24]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000e100 	.word	0xe000e100
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	bf28      	it	cs
 8002f8a:	2304      	movcs	r3, #4
 8002f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d902      	bls.n	8002f9c <NVIC_EncodePriority+0x30>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3b03      	subs	r3, #3
 8002f9a:	e000      	b.n	8002f9e <NVIC_EncodePriority+0x32>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	401a      	ands	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43d9      	mvns	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	4313      	orrs	r3, r2
         );
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe4:	d301      	bcc.n	8002fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00f      	b.n	800300a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <SysTick_Config+0x40>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	f7ff ff8e 	bl	8002f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <SysTick_Config+0x40>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <SysTick_Config+0x40>)
 8003004:	2207      	movs	r2, #7
 8003006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	e000e010 	.word	0xe000e010

08003018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff29 	bl	8002e78 <__NVIC_SetPriorityGrouping>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b086      	sub	sp, #24
 8003032:	af00      	add	r7, sp, #0
 8003034:	4603      	mov	r3, r0
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003040:	f7ff ff3e 	bl	8002ec0 <__NVIC_GetPriorityGrouping>
 8003044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	6978      	ldr	r0, [r7, #20]
 800304c:	f7ff ff8e 	bl	8002f6c <NVIC_EncodePriority>
 8003050:	4602      	mov	r2, r0
 8003052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff5d 	bl	8002f18 <__NVIC_SetPriority>
}
 800305e:	bf00      	nop
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff31 	bl	8002edc <__NVIC_EnableIRQ>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ffa2 	bl	8002fd4 <SysTick_Config>
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e098      	b.n	80031e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b4d      	ldr	r3, [pc, #308]	; (80031ec <HAL_DMA_Init+0x150>)
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d80f      	bhi.n	80030da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <HAL_DMA_Init+0x154>)
 80030c2:	4413      	add	r3, r2
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <HAL_DMA_Init+0x158>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	009a      	lsls	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a48      	ldr	r2, [pc, #288]	; (80031f8 <HAL_DMA_Init+0x15c>)
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
 80030d8:	e00e      	b.n	80030f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	4b46      	ldr	r3, [pc, #280]	; (80031fc <HAL_DMA_Init+0x160>)
 80030e2:	4413      	add	r3, r2
 80030e4:	4a43      	ldr	r2, [pc, #268]	; (80031f4 <HAL_DMA_Init+0x158>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	009a      	lsls	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a42      	ldr	r2, [pc, #264]	; (8003200 <HAL_DMA_Init+0x164>)
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800311c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003128:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003134:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003152:	d039      	beq.n	80031c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <HAL_DMA_Init+0x15c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d11a      	bne.n	8003194 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800315e:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_DMA_Init+0x168>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	f003 031c 	and.w	r3, r3, #28
 800316a:	210f      	movs	r1, #15
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	4924      	ldr	r1, [pc, #144]	; (8003204 <HAL_DMA_Init+0x168>)
 8003174:	4013      	ands	r3, r2
 8003176:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_DMA_Init+0x168>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f003 031c 	and.w	r3, r3, #28
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	491d      	ldr	r1, [pc, #116]	; (8003204 <HAL_DMA_Init+0x168>)
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]
 8003192:	e019      	b.n	80031c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003194:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_DMA_Init+0x16c>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	f003 031c 	and.w	r3, r3, #28
 80031a0:	210f      	movs	r1, #15
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	4917      	ldr	r1, [pc, #92]	; (8003208 <HAL_DMA_Init+0x16c>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <HAL_DMA_Init+0x16c>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f003 031c 	and.w	r3, r3, #28
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	4911      	ldr	r1, [pc, #68]	; (8003208 <HAL_DMA_Init+0x16c>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40020407 	.word	0x40020407
 80031f0:	bffdfff8 	.word	0xbffdfff8
 80031f4:	cccccccd 	.word	0xcccccccd
 80031f8:	40020000 	.word	0x40020000
 80031fc:	bffdfbf8 	.word	0xbffdfbf8
 8003200:	40020400 	.word	0x40020400
 8003204:	400200a8 	.word	0x400200a8
 8003208:	400204a8 	.word	0x400204a8

0800320c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_DMA_Start_IT+0x20>
 8003228:	2302      	movs	r3, #2
 800322a:	e04b      	b.n	80032c4 <HAL_DMA_Start_IT+0xb8>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d13a      	bne.n	80032b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f8e0 	bl	800342a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 020e 	orr.w	r2, r2, #14
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e00f      	b.n	80032a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 020a 	orr.w	r2, r2, #10
 80032a2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e005      	b.n	80032c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032be:	2302      	movs	r3, #2
 80032c0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	f003 031c 	and.w	r3, r3, #28
 80032ec:	2204      	movs	r2, #4
 80032ee:	409a      	lsls	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d026      	beq.n	8003346 <HAL_DMA_IRQHandler+0x7a>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d021      	beq.n	8003346 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	f003 021c 	and.w	r2, r3, #28
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	2104      	movs	r1, #4
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	2b00      	cmp	r3, #0
 800333a:	d071      	beq.n	8003420 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003344:	e06c      	b.n	8003420 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f003 031c 	and.w	r3, r3, #28
 800334e:	2202      	movs	r2, #2
 8003350:	409a      	lsls	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d02e      	beq.n	80033b8 <HAL_DMA_IRQHandler+0xec>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d029      	beq.n	80033b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10b      	bne.n	800338a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 020a 	bic.w	r2, r2, #10
 8003380:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f003 021c 	and.w	r2, r3, #28
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2102      	movs	r1, #2
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d038      	beq.n	8003420 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033b6:	e033      	b.n	8003420 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	f003 031c 	and.w	r3, r3, #28
 80033c0:	2208      	movs	r2, #8
 80033c2:	409a      	lsls	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d02a      	beq.n	8003422 <HAL_DMA_IRQHandler+0x156>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d025      	beq.n	8003422 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 020e 	bic.w	r2, r2, #14
 80033e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f003 021c 	and.w	r2, r3, #28
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2101      	movs	r1, #1
 80033f4:	fa01 f202 	lsl.w	r2, r1, r2
 80033f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003420:	bf00      	nop
 8003422:	bf00      	nop
}
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	f003 021c 	and.w	r2, r3, #28
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b10      	cmp	r3, #16
 800345a:	d108      	bne.n	800346e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800346c:	e007      	b.n	800347e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	60da      	str	r2, [r3, #12]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800349a:	e17f      	b.n	800379c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	4013      	ands	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8171 	beq.w	8003796 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d005      	beq.n	80034cc <HAL_GPIO_Init+0x40>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d130      	bne.n	800352e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003502:	2201      	movs	r2, #1
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	f003 0201 	and.w	r2, r3, #1
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b03      	cmp	r3, #3
 8003538:	d118      	bne.n	800356c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003540:	2201      	movs	r2, #1
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	08db      	lsrs	r3, r3, #3
 8003556:	f003 0201 	and.w	r2, r3, #1
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b03      	cmp	r3, #3
 8003576:	d017      	beq.n	80035a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2203      	movs	r2, #3
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d123      	bne.n	80035fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	08da      	lsrs	r2, r3, #3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3208      	adds	r2, #8
 80035bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	220f      	movs	r2, #15
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	08da      	lsrs	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3208      	adds	r2, #8
 80035f6:	6939      	ldr	r1, [r7, #16]
 80035f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	2203      	movs	r2, #3
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0203 	and.w	r2, r3, #3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80ac 	beq.w	8003796 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363e:	4b5f      	ldr	r3, [pc, #380]	; (80037bc <HAL_GPIO_Init+0x330>)
 8003640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003642:	4a5e      	ldr	r2, [pc, #376]	; (80037bc <HAL_GPIO_Init+0x330>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6613      	str	r3, [r2, #96]	; 0x60
 800364a:	4b5c      	ldr	r3, [pc, #368]	; (80037bc <HAL_GPIO_Init+0x330>)
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003656:	4a5a      	ldr	r2, [pc, #360]	; (80037c0 <HAL_GPIO_Init+0x334>)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	3302      	adds	r3, #2
 800365e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	220f      	movs	r2, #15
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003680:	d025      	beq.n	80036ce <HAL_GPIO_Init+0x242>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4f      	ldr	r2, [pc, #316]	; (80037c4 <HAL_GPIO_Init+0x338>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01f      	beq.n	80036ca <HAL_GPIO_Init+0x23e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4e      	ldr	r2, [pc, #312]	; (80037c8 <HAL_GPIO_Init+0x33c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d019      	beq.n	80036c6 <HAL_GPIO_Init+0x23a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4d      	ldr	r2, [pc, #308]	; (80037cc <HAL_GPIO_Init+0x340>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_GPIO_Init+0x236>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4c      	ldr	r2, [pc, #304]	; (80037d0 <HAL_GPIO_Init+0x344>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00d      	beq.n	80036be <HAL_GPIO_Init+0x232>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4b      	ldr	r2, [pc, #300]	; (80037d4 <HAL_GPIO_Init+0x348>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d007      	beq.n	80036ba <HAL_GPIO_Init+0x22e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4a      	ldr	r2, [pc, #296]	; (80037d8 <HAL_GPIO_Init+0x34c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_GPIO_Init+0x22a>
 80036b2:	2306      	movs	r3, #6
 80036b4:	e00c      	b.n	80036d0 <HAL_GPIO_Init+0x244>
 80036b6:	2307      	movs	r3, #7
 80036b8:	e00a      	b.n	80036d0 <HAL_GPIO_Init+0x244>
 80036ba:	2305      	movs	r3, #5
 80036bc:	e008      	b.n	80036d0 <HAL_GPIO_Init+0x244>
 80036be:	2304      	movs	r3, #4
 80036c0:	e006      	b.n	80036d0 <HAL_GPIO_Init+0x244>
 80036c2:	2303      	movs	r3, #3
 80036c4:	e004      	b.n	80036d0 <HAL_GPIO_Init+0x244>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e002      	b.n	80036d0 <HAL_GPIO_Init+0x244>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_GPIO_Init+0x244>
 80036ce:	2300      	movs	r3, #0
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	f002 0203 	and.w	r2, r2, #3
 80036d6:	0092      	lsls	r2, r2, #2
 80036d8:	4093      	lsls	r3, r2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036e0:	4937      	ldr	r1, [pc, #220]	; (80037c0 <HAL_GPIO_Init+0x334>)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	3302      	adds	r3, #2
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036ee:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <HAL_GPIO_Init+0x350>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003712:	4a32      	ldr	r2, [pc, #200]	; (80037dc <HAL_GPIO_Init+0x350>)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003718:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_GPIO_Init+0x350>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	43db      	mvns	r3, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800373c:	4a27      	ldr	r2, [pc, #156]	; (80037dc <HAL_GPIO_Init+0x350>)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003742:	4b26      	ldr	r3, [pc, #152]	; (80037dc <HAL_GPIO_Init+0x350>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	43db      	mvns	r3, r3
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4013      	ands	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003766:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <HAL_GPIO_Init+0x350>)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <HAL_GPIO_Init+0x350>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	43db      	mvns	r3, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003790:	4a12      	ldr	r2, [pc, #72]	; (80037dc <HAL_GPIO_Init+0x350>)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3301      	adds	r3, #1
 800379a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa22 f303 	lsr.w	r3, r2, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f47f ae78 	bne.w	800349c <HAL_GPIO_Init+0x10>
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40010000 	.word	0x40010000
 80037c4:	48000400 	.word	0x48000400
 80037c8:	48000800 	.word	0x48000800
 80037cc:	48000c00 	.word	0x48000c00
 80037d0:	48001000 	.word	0x48001000
 80037d4:	48001400 	.word	0x48001400
 80037d8:	48001800 	.word	0x48001800
 80037dc:	40010400 	.word	0x40010400

080037e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	807b      	strh	r3, [r7, #2]
 80037ec:	4613      	mov	r3, r2
 80037ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f0:	787b      	ldrb	r3, [r7, #1]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037f6:	887a      	ldrh	r2, [r7, #2]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037fc:	e002      	b.n	8003804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_PWREx_GetVoltageRange+0x18>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40007000 	.word	0x40007000

0800382c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800383a:	d130      	bne.n	800389e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800383c:	4b23      	ldr	r3, [pc, #140]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003848:	d038      	beq.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003852:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003854:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003858:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2232      	movs	r2, #50	; 0x32
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	0c9b      	lsrs	r3, r3, #18
 800386c:	3301      	adds	r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003870:	e002      	b.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3b01      	subs	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003884:	d102      	bne.n	800388c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f2      	bne.n	8003872 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003898:	d110      	bne.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e00f      	b.n	80038be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038aa:	d007      	beq.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038b4:	4a05      	ldr	r2, [pc, #20]	; (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40007000 	.word	0x40007000
 80038d0:	20000000 	.word	0x20000000
 80038d4:	431bde83 	.word	0x431bde83

080038d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e3ca      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ea:	4b97      	ldr	r3, [pc, #604]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f4:	4b94      	ldr	r3, [pc, #592]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80e4 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_RCC_OscConfig+0x4a>
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	f040 808b 	bne.w	8003a30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 8087 	bne.w	8003a30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003922:	4b89      	ldr	r3, [pc, #548]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_RCC_OscConfig+0x62>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e3a2      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	4b82      	ldr	r3, [pc, #520]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <HAL_RCC_OscConfig+0x7c>
 800394a:	4b7f      	ldr	r3, [pc, #508]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003952:	e005      	b.n	8003960 <HAL_RCC_OscConfig+0x88>
 8003954:	4b7c      	ldr	r3, [pc, #496]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003960:	4293      	cmp	r3, r2
 8003962:	d223      	bcs.n	80039ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fd55 	bl	8004418 <RCC_SetFlashLatencyFromMSIRange>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e383      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003978:	4b73      	ldr	r3, [pc, #460]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a72      	ldr	r2, [pc, #456]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 800397e:	f043 0308 	orr.w	r3, r3, #8
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	496d      	ldr	r1, [pc, #436]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003996:	4b6c      	ldr	r3, [pc, #432]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	4968      	ldr	r1, [pc, #416]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
 80039aa:	e025      	b.n	80039f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ac:	4b66      	ldr	r3, [pc, #408]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039b2:	f043 0308 	orr.w	r3, r3, #8
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4960      	ldr	r1, [pc, #384]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ca:	4b5f      	ldr	r3, [pc, #380]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	495b      	ldr	r1, [pc, #364]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fd15 	bl	8004418 <RCC_SetFlashLatencyFromMSIRange>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e343      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039f8:	f000 fc4a 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b52      	ldr	r3, [pc, #328]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	4950      	ldr	r1, [pc, #320]	; (8003b4c <HAL_RCC_OscConfig+0x274>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	4a4e      	ldr	r2, [pc, #312]	; (8003b50 <HAL_RCC_OscConfig+0x278>)
 8003a16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a18:	4b4e      	ldr	r3, [pc, #312]	; (8003b54 <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fd ffed 	bl	80019fc <HAL_InitTick>
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d052      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	e327      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d032      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a38:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a42      	ldr	r2, [pc, #264]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a44:	f7fe f82a 	bl	8001a9c <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a4c:	f7fe f826 	bl	8001a9c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e310      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a5e:	4b3a      	ldr	r3, [pc, #232]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a6a:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a36      	ldr	r2, [pc, #216]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a70:	f043 0308 	orr.w	r3, r3, #8
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4931      	ldr	r1, [pc, #196]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a88:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	492c      	ldr	r1, [pc, #176]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
 8003a9c:	e01a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fff7 	bl	8001a9c <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab2:	f7fd fff3 	bl	8001a9c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e2dd      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ac4:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x1da>
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ad2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d074      	beq.n	8003bca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x21a>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d10e      	bne.n	8003b0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d10b      	bne.n	8003b0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d064      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d160      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e2ba      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x24a>
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	e026      	b.n	8003b70 <HAL_RCC_OscConfig+0x298>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b2a:	d115      	bne.n	8003b58 <HAL_RCC_OscConfig+0x280>
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a05      	ldr	r2, [pc, #20]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a02      	ldr	r2, [pc, #8]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e014      	b.n	8003b70 <HAL_RCC_OscConfig+0x298>
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	0800a050 	.word	0x0800a050
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004
 8003b58:	4ba0      	ldr	r3, [pc, #640]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a9f      	ldr	r2, [pc, #636]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b9d      	ldr	r3, [pc, #628]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a9c      	ldr	r2, [pc, #624]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd ff90 	bl	8001a9c <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fd ff8c 	bl	8001a9c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e276      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b92:	4b92      	ldr	r3, [pc, #584]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x2a8>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fd ff7c 	bl	8001a9c <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fd ff78 	bl	8001a9c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e262      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bba:	4b88      	ldr	r3, [pc, #544]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x2d0>
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d060      	beq.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_OscConfig+0x310>
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d119      	bne.n	8003c16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d116      	bne.n	8003c16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be8:	4b7c      	ldr	r3, [pc, #496]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_OscConfig+0x328>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e23f      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	4973      	ldr	r1, [pc, #460]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c14:	e040      	b.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d023      	beq.n	8003c66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1e:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6e      	ldr	r2, [pc, #440]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd ff37 	bl	8001a9c <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fd ff33 	bl	8001a9c <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e21d      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c44:	4b65      	ldr	r3, [pc, #404]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b62      	ldr	r3, [pc, #392]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	495f      	ldr	r1, [pc, #380]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
 8003c64:	e018      	b.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b5d      	ldr	r3, [pc, #372]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5c      	ldr	r2, [pc, #368]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fd ff13 	bl	8001a9c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fd ff0f 	bl	8001a9c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1f9      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c8c:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d03c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01c      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cac:	4b4b      	ldr	r3, [pc, #300]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb2:	4a4a      	ldr	r2, [pc, #296]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fd feee 	bl	8001a9c <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fd feea 	bl	8001a9c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1d4      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ef      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x3ec>
 8003ce4:	e01b      	b.n	8003d1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cec:	4a3b      	ldr	r2, [pc, #236]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fd fed1 	bl	8001a9c <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fd fecd 	bl	8001a9c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1b7      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d10:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ef      	bne.n	8003cfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80a6 	beq.w	8003e78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d46:	6593      	str	r3, [r2, #88]	; 0x58
 8003d48:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d54:	2301      	movs	r3, #1
 8003d56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d118      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d70:	f7fd fe94 	bl	8001a9c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fd fe90 	bl	8001a9c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e17a      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d108      	bne.n	8003db0 <HAL_RCC_OscConfig+0x4d8>
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dae:	e029      	b.n	8003e04 <HAL_RCC_OscConfig+0x52c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d115      	bne.n	8003de4 <HAL_RCC_OscConfig+0x50c>
 8003db8:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	4a07      	ldr	r2, [pc, #28]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd8:	e014      	b.n	8003e04 <HAL_RCC_OscConfig+0x52c>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40007000 	.word	0x40007000
 8003de4:	4b9c      	ldr	r3, [pc, #624]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	4a9b      	ldr	r2, [pc, #620]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df4:	4b98      	ldr	r3, [pc, #608]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	4a97      	ldr	r2, [pc, #604]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d016      	beq.n	8003e3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd fe46 	bl	8001a9c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fd fe42 	bl	8001a9c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e12a      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	4b8b      	ldr	r3, [pc, #556]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ed      	beq.n	8003e14 <HAL_RCC_OscConfig+0x53c>
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fd fe2f 	bl	8001a9c <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fd fe2b 	bl	8001a9c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e113      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	4b7f      	ldr	r3, [pc, #508]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ed      	bne.n	8003e42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e66:	7ffb      	ldrb	r3, [r7, #31]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b7a      	ldr	r3, [pc, #488]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	4a79      	ldr	r2, [pc, #484]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80fe 	beq.w	800407e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	f040 80d0 	bne.w	800402c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e8c:	4b72      	ldr	r3, [pc, #456]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f003 0203 	and.w	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d130      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d127      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d11f      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ecc:	2a07      	cmp	r2, #7
 8003ece:	bf14      	ite	ne
 8003ed0:	2201      	movne	r2, #1
 8003ed2:	2200      	moveq	r2, #0
 8003ed4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d113      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d109      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	3b01      	subs	r3, #1
 8003efc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d06e      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	d069      	beq.n	8003fdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f08:	4b53      	ldr	r3, [pc, #332]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f14:	4b50      	ldr	r3, [pc, #320]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0ad      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f24:	4b4c      	ldr	r3, [pc, #304]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a4b      	ldr	r2, [pc, #300]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f30:	f7fd fdb4 	bl	8001a9c <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fd fdb0 	bl	8001a9c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e09a      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4a:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f56:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	4b40      	ldr	r3, [pc, #256]	; (800405c <HAL_RCC_OscConfig+0x784>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f66:	3a01      	subs	r2, #1
 8003f68:	0112      	lsls	r2, r2, #4
 8003f6a:	4311      	orrs	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f70:	0212      	lsls	r2, r2, #8
 8003f72:	4311      	orrs	r1, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f78:	0852      	lsrs	r2, r2, #1
 8003f7a:	3a01      	subs	r2, #1
 8003f7c:	0552      	lsls	r2, r2, #21
 8003f7e:	4311      	orrs	r1, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f84:	0852      	lsrs	r2, r2, #1
 8003f86:	3a01      	subs	r2, #1
 8003f88:	0652      	lsls	r2, r2, #25
 8003f8a:	4311      	orrs	r1, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f90:	0912      	lsrs	r2, r2, #4
 8003f92:	0452      	lsls	r2, r2, #17
 8003f94:	430a      	orrs	r2, r1
 8003f96:	4930      	ldr	r1, [pc, #192]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a2a      	ldr	r2, [pc, #168]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fb4:	f7fd fd72 	bl	8001a9c <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fd fd6e 	bl	8001a9c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e058      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	4b22      	ldr	r3, [pc, #136]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fda:	e050      	b.n	800407e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e04f      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d148      	bne.n	800407e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fec:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff8:	4b17      	ldr	r3, [pc, #92]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a16      	ldr	r2, [pc, #88]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8003ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004002:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004004:	f7fd fd4a 	bl	8001a9c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fd fd46 	bl	8001a9c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e030      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x734>
 800402a:	e028      	b.n	800407e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d023      	beq.n	800407a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a08      	ldr	r2, [pc, #32]	; (8004058 <HAL_RCC_OscConfig+0x780>)
 8004038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fd fd2d 	bl	8001a9c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004044:	e00c      	b.n	8004060 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004046:	f7fd fd29 	bl	8001a9c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d905      	bls.n	8004060 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e013      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
 8004058:	40021000 	.word	0x40021000
 800405c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCC_OscConfig+0x7b0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1ec      	bne.n	8004046 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_OscConfig+0x7b0>)
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	4905      	ldr	r1, [pc, #20]	; (8004088 <HAL_RCC_OscConfig+0x7b0>)
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_OscConfig+0x7b4>)
 8004074:	4013      	ands	r3, r2
 8004076:	60cb      	str	r3, [r1, #12]
 8004078:	e001      	b.n	800407e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40021000 	.word	0x40021000
 800408c:	feeefffc 	.word	0xfeeefffc

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0e7      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b75      	ldr	r3, [pc, #468]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d910      	bls.n	80040d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b72      	ldr	r3, [pc, #456]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 0207 	bic.w	r2, r3, #7
 80040ba:	4970      	ldr	r1, [pc, #448]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b6e      	ldr	r3, [pc, #440]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cf      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	4b66      	ldr	r3, [pc, #408]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d908      	bls.n	8004102 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4960      	ldr	r1, [pc, #384]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04c      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004116:	4b5a      	ldr	r3, [pc, #360]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d121      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e0a6      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412e:	4b54      	ldr	r3, [pc, #336]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d115      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e09a      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004146:	4b4e      	ldr	r3, [pc, #312]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e08e      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004156:	4b4a      	ldr	r3, [pc, #296]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e086      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004166:	4b46      	ldr	r3, [pc, #280]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4943      	ldr	r1, [pc, #268]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004178:	f7fd fc90 	bl	8001a9c <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	e00a      	b.n	8004196 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004180:	f7fd fc8c 	bl	8001a9c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e06e      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 020c 	and.w	r2, r3, #12
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d1eb      	bne.n	8004180 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d010      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	4b31      	ldr	r3, [pc, #196]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d208      	bcs.n	80041d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	492b      	ldr	r1, [pc, #172]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d6:	4b29      	ldr	r3, [pc, #164]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d210      	bcs.n	8004206 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f023 0207 	bic.w	r2, r3, #7
 80041ec:	4923      	ldr	r1, [pc, #140]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f4:	4b21      	ldr	r3, [pc, #132]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e036      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004212:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4918      	ldr	r1, [pc, #96]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4910      	ldr	r1, [pc, #64]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	4313      	orrs	r3, r2
 8004242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004244:	f000 f824 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	490b      	ldr	r1, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
 8004260:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004262:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1fc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd fbc7 	bl	80019fc <HAL_InitTick>
 800426e:	4603      	mov	r3, r0
 8004270:	72fb      	strb	r3, [r7, #11]

  return status;
 8004272:	7afb      	ldrb	r3, [r7, #11]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40022000 	.word	0x40022000
 8004280:	40021000 	.word	0x40021000
 8004284:	0800a050 	.word	0x0800a050
 8004288:	20000000 	.word	0x20000000
 800428c:	20000004 	.word	0x20000004

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	; 0x24
 8004294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800429e:	4b3e      	ldr	r3, [pc, #248]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a8:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d121      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d11e      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042c4:	4b34      	ldr	r3, [pc, #208]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e005      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042e0:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10d      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004300:	e00a      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d102      	bne.n	800430e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e004      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d101      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d134      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0xa6>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d003      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0xac>
 8004334:	e005      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004338:	617b      	str	r3, [r7, #20]
      break;
 800433a:	e005      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800433c:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800433e:	617b      	str	r3, [r7, #20]
      break;
 8004340:	e002      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	617b      	str	r3, [r7, #20]
      break;
 8004346:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	3301      	adds	r3, #1
 8004354:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	fb03 f202 	mul.w	r2, r3, r2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	0e5b      	lsrs	r3, r3, #25
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	3301      	adds	r3, #1
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004388:	69bb      	ldr	r3, [r7, #24]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3724      	adds	r7, #36	; 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	0800a068 	.word	0x0800a068
 80043a0:	00f42400 	.word	0x00f42400
 80043a4:	007a1200 	.word	0x007a1200

080043a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000000 	.word	0x20000000

080043c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043c4:	f7ff fff0 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	4904      	ldr	r1, [pc, #16]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000
 80043e8:	0800a060 	.word	0x0800a060

080043ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f0:	f7ff ffda 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	0adb      	lsrs	r3, r3, #11
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4904      	ldr	r1, [pc, #16]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000
 8004414:	0800a060 	.word	0x0800a060

08004418 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004424:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004430:	f7ff f9ee 	bl	8003810 <HAL_PWREx_GetVoltageRange>
 8004434:	6178      	str	r0, [r7, #20]
 8004436:	e014      	b.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6593      	str	r3, [r2, #88]	; 0x58
 8004444:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004450:	f7ff f9de 	bl	8003810 <HAL_PWREx_GetVoltageRange>
 8004454:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445a:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004460:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004468:	d10b      	bne.n	8004482 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d919      	bls.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2ba0      	cmp	r3, #160	; 0xa0
 8004474:	d902      	bls.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004476:	2302      	movs	r3, #2
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e013      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800447c:	2301      	movs	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e010      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d902      	bls.n	800448e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004488:	2303      	movs	r3, #3
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e00a      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d102      	bne.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004494:	2302      	movs	r3, #2
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	e004      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b70      	cmp	r3, #112	; 0x70
 800449e:	d101      	bne.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044a0:	2301      	movs	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 0207 	bic.w	r2, r3, #7
 80044ac:	4909      	ldr	r1, [pc, #36]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044b4:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d001      	beq.n	80044c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40022000 	.word	0x40022000

080044d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e0:	2300      	movs	r3, #0
 80044e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e4:	2300      	movs	r3, #0
 80044e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d041      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044fc:	d02a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004502:	d824      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004508:	d008      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800450a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800450e:	d81e      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004518:	d010      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800451a:	e018      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800451c:	4b86      	ldr	r3, [pc, #536]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a85      	ldr	r2, [pc, #532]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004526:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004528:	e015      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fabb 	bl	8004aac <RCCEx_PLLSAI1_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800453a:	e00c      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3320      	adds	r3, #32
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fba6 	bl	8004c94 <RCCEx_PLLSAI2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800454c:	e003      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	74fb      	strb	r3, [r7, #19]
      break;
 8004552:	e000      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800455c:	4b76      	ldr	r3, [pc, #472]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456a:	4973      	ldr	r1, [pc, #460]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004572:	e001      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d041      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004588:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800458c:	d02a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800458e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004592:	d824      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004598:	d008      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800459a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800459e:	d81e      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a8:	d010      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045aa:	e018      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045ac:	4b62      	ldr	r3, [pc, #392]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a61      	ldr	r2, [pc, #388]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045b8:	e015      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fa73 	bl	8004aac <RCCEx_PLLSAI1_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045ca:	e00c      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3320      	adds	r3, #32
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb5e 	bl	8004c94 <RCCEx_PLLSAI2_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045dc:	e003      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	74fb      	strb	r3, [r7, #19]
      break;
 80045e2:	e000      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045ec:	4b52      	ldr	r3, [pc, #328]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045fa:	494f      	ldr	r1, [pc, #316]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004602:	e001      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a0 	beq.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800461a:	4b47      	ldr	r3, [pc, #284]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004630:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	4a40      	ldr	r2, [pc, #256]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6593      	str	r3, [r2, #88]	; 0x58
 800463c:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004648:	2301      	movs	r3, #1
 800464a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464c:	4b3b      	ldr	r3, [pc, #236]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a3a      	ldr	r2, [pc, #232]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004656:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004658:	f7fd fa20 	bl	8001a9c <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800465e:	e009      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004660:	f7fd fa1c 	bl	8001a9c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d902      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	74fb      	strb	r3, [r7, #19]
        break;
 8004672:	e005      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004674:	4b31      	ldr	r3, [pc, #196]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0ef      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d15c      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004686:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004690:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01f      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d019      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a4:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b0:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	4a20      	ldr	r2, [pc, #128]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fd f9db 	bl	8001a9c <HAL_GetTick>
 80046e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e8:	e00b      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fd f9d7 	bl	8001a9c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d902      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004700:	e006      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004702:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ec      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10c      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004726:	4904      	ldr	r1, [pc, #16]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800472e:	e009      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
 8004734:	e006      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004744:	7c7b      	ldrb	r3, [r7, #17]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d105      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474a:	4b9e      	ldr	r3, [pc, #632]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	4a9d      	ldr	r2, [pc, #628]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004762:	4b98      	ldr	r3, [pc, #608]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f023 0203 	bic.w	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	4994      	ldr	r1, [pc, #592]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004784:	4b8f      	ldr	r3, [pc, #572]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	f023 020c 	bic.w	r2, r3, #12
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	498c      	ldr	r1, [pc, #560]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047a6:	4b87      	ldr	r3, [pc, #540]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	4983      	ldr	r1, [pc, #524]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047c8:	4b7e      	ldr	r3, [pc, #504]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	497b      	ldr	r1, [pc, #492]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047ea:	4b76      	ldr	r3, [pc, #472]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	4972      	ldr	r1, [pc, #456]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800480c:	4b6d      	ldr	r3, [pc, #436]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	496a      	ldr	r1, [pc, #424]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800482e:	4b65      	ldr	r3, [pc, #404]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483c:	4961      	ldr	r1, [pc, #388]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004850:	4b5c      	ldr	r3, [pc, #368]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485e:	4959      	ldr	r1, [pc, #356]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004872:	4b54      	ldr	r3, [pc, #336]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	4950      	ldr	r1, [pc, #320]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004894:	4b4b      	ldr	r3, [pc, #300]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	4948      	ldr	r1, [pc, #288]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048b6:	4b43      	ldr	r3, [pc, #268]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	493f      	ldr	r1, [pc, #252]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d028      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048d8:	4b3a      	ldr	r3, [pc, #232]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e6:	4937      	ldr	r1, [pc, #220]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048f6:	d106      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f8:	4b32      	ldr	r3, [pc, #200]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a31      	ldr	r2, [pc, #196]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004902:	60d3      	str	r3, [r2, #12]
 8004904:	e011      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800490a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800490e:	d10c      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	2101      	movs	r1, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f8c8 	bl	8004aac <RCCEx_PLLSAI1_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d028      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004936:	4b23      	ldr	r3, [pc, #140]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	491f      	ldr	r1, [pc, #124]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004954:	d106      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004956:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004960:	60d3      	str	r3, [r2, #12]
 8004962:	e011      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800496c:	d10c      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	2101      	movs	r1, #1
 8004974:	4618      	mov	r0, r3
 8004976:	f000 f899 	bl	8004aac <RCCEx_PLLSAI1_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d02b      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a2:	4908      	ldr	r1, [pc, #32]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b2:	d109      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a02      	ldr	r2, [pc, #8]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049be:	60d3      	str	r3, [r2, #12]
 80049c0:	e014      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2101      	movs	r1, #1
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 f867 	bl	8004aac <RCCEx_PLLSAI1_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d02f      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f8:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a06:	4928      	ldr	r1, [pc, #160]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a16:	d10d      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 f844 	bl	8004aac <RCCEx_PLLSAI1_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d014      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
 8004a30:	74bb      	strb	r3, [r7, #18]
 8004a32:	e011      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3320      	adds	r3, #32
 8004a42:	2102      	movs	r1, #2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f925 	bl	8004c94 <RCCEx_PLLSAI2_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a64:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a72:	490d      	ldr	r1, [pc, #52]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a96:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000

08004aac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aba:	4b75      	ldr	r3, [pc, #468]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d018      	beq.n	8004af8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ac6:	4b72      	ldr	r3, [pc, #456]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f003 0203 	and.w	r2, r3, #3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d10d      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
       ||
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ade:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
       ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d047      	beq.n	8004b82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
 8004af6:	e044      	b.n	8004b82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d018      	beq.n	8004b32 <RCCEx_PLLSAI1_Config+0x86>
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d825      	bhi.n	8004b50 <RCCEx_PLLSAI1_Config+0xa4>
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d002      	beq.n	8004b0e <RCCEx_PLLSAI1_Config+0x62>
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d009      	beq.n	8004b20 <RCCEx_PLLSAI1_Config+0x74>
 8004b0c:	e020      	b.n	8004b50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b0e:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d11d      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1e:	e01a      	b.n	8004b56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b20:	4b5b      	ldr	r3, [pc, #364]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b30:	e013      	b.n	8004b5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b32:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10f      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b3e:	4b54      	ldr	r3, [pc, #336]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b4e:	e006      	b.n	8004b5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      break;
 8004b54:	e004      	b.n	8004b60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b56:	bf00      	nop
 8004b58:	e002      	b.n	8004b60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10d      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b66:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6819      	ldr	r1, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	4944      	ldr	r1, [pc, #272]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d17d      	bne.n	8004c84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b88:	4b41      	ldr	r3, [pc, #260]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a40      	ldr	r2, [pc, #256]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b94:	f7fc ff82 	bl	8001a9c <HAL_GetTick>
 8004b98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b9a:	e009      	b.n	8004bb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b9c:	f7fc ff7e 	bl	8001a9c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d902      	bls.n	8004bb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	73fb      	strb	r3, [r7, #15]
        break;
 8004bae:	e005      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bb0:	4b37      	ldr	r3, [pc, #220]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1ef      	bne.n	8004b9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d160      	bne.n	8004c84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d111      	bne.n	8004bec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bc8:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6892      	ldr	r2, [r2, #8]
 8004bd8:	0211      	lsls	r1, r2, #8
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68d2      	ldr	r2, [r2, #12]
 8004bde:	0912      	lsrs	r2, r2, #4
 8004be0:	0452      	lsls	r2, r2, #17
 8004be2:	430a      	orrs	r2, r1
 8004be4:	492a      	ldr	r1, [pc, #168]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	610b      	str	r3, [r1, #16]
 8004bea:	e027      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d112      	bne.n	8004c18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bf2:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6892      	ldr	r2, [r2, #8]
 8004c02:	0211      	lsls	r1, r2, #8
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6912      	ldr	r2, [r2, #16]
 8004c08:	0852      	lsrs	r2, r2, #1
 8004c0a:	3a01      	subs	r2, #1
 8004c0c:	0552      	lsls	r2, r2, #21
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	491f      	ldr	r1, [pc, #124]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	610b      	str	r3, [r1, #16]
 8004c16:	e011      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c18:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6892      	ldr	r2, [r2, #8]
 8004c28:	0211      	lsls	r1, r2, #8
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6952      	ldr	r2, [r2, #20]
 8004c2e:	0852      	lsrs	r2, r2, #1
 8004c30:	3a01      	subs	r2, #1
 8004c32:	0652      	lsls	r2, r2, #25
 8004c34:	430a      	orrs	r2, r1
 8004c36:	4916      	ldr	r1, [pc, #88]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c3c:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fc ff28 	bl	8001a9c <HAL_GetTick>
 8004c4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c4e:	e009      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c50:	f7fc ff24 	bl	8001a9c <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d902      	bls.n	8004c64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	73fb      	strb	r3, [r7, #15]
          break;
 8004c62:	e005      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0ef      	beq.n	8004c50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	4904      	ldr	r1, [pc, #16]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000

08004c94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ca2:	4b6a      	ldr	r3, [pc, #424]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d018      	beq.n	8004ce0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cae:	4b67      	ldr	r3, [pc, #412]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0203 	and.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d10d      	bne.n	8004cda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cc6:	4b61      	ldr	r3, [pc, #388]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
       ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d047      	beq.n	8004d6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
 8004cde:	e044      	b.n	8004d6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d018      	beq.n	8004d1a <RCCEx_PLLSAI2_Config+0x86>
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d825      	bhi.n	8004d38 <RCCEx_PLLSAI2_Config+0xa4>
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d002      	beq.n	8004cf6 <RCCEx_PLLSAI2_Config+0x62>
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d009      	beq.n	8004d08 <RCCEx_PLLSAI2_Config+0x74>
 8004cf4:	e020      	b.n	8004d38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cf6:	4b55      	ldr	r3, [pc, #340]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11d      	bne.n	8004d3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d06:	e01a      	b.n	8004d3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d08:	4b50      	ldr	r3, [pc, #320]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d116      	bne.n	8004d42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d18:	e013      	b.n	8004d42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d1a:	4b4c      	ldr	r3, [pc, #304]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d26:	4b49      	ldr	r3, [pc, #292]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d36:	e006      	b.n	8004d46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3c:	e004      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d46:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10d      	bne.n	8004d6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d4e:	4b3f      	ldr	r3, [pc, #252]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	430b      	orrs	r3, r1
 8004d64:	4939      	ldr	r1, [pc, #228]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d167      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d70:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a35      	ldr	r2, [pc, #212]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7c:	f7fc fe8e 	bl	8001a9c <HAL_GetTick>
 8004d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d82:	e009      	b.n	8004d98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d84:	f7fc fe8a 	bl	8001a9c <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d902      	bls.n	8004d98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	73fb      	strb	r3, [r7, #15]
        break;
 8004d96:	e005      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d98:	4b2c      	ldr	r3, [pc, #176]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1ef      	bne.n	8004d84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d14a      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d111      	bne.n	8004dd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004db0:	4b26      	ldr	r3, [pc, #152]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6892      	ldr	r2, [r2, #8]
 8004dc0:	0211      	lsls	r1, r2, #8
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68d2      	ldr	r2, [r2, #12]
 8004dc6:	0912      	lsrs	r2, r2, #4
 8004dc8:	0452      	lsls	r2, r2, #17
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	491f      	ldr	r1, [pc, #124]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	614b      	str	r3, [r1, #20]
 8004dd2:	e011      	b.n	8004df8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ddc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6892      	ldr	r2, [r2, #8]
 8004de4:	0211      	lsls	r1, r2, #8
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6912      	ldr	r2, [r2, #16]
 8004dea:	0852      	lsrs	r2, r2, #1
 8004dec:	3a01      	subs	r2, #1
 8004dee:	0652      	lsls	r2, r2, #25
 8004df0:	430a      	orrs	r2, r1
 8004df2:	4916      	ldr	r1, [pc, #88]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004df8:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e04:	f7fc fe4a 	bl	8001a9c <HAL_GetTick>
 8004e08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e0a:	e009      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e0c:	f7fc fe46 	bl	8001a9c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d902      	bls.n	8004e20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e1e:	e005      	b.n	8004e2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ef      	beq.n	8004e0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	4904      	ldr	r1, [pc, #16]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000

08004e50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e040      	b.n	8004ee4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fc fc10 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2224      	movs	r2, #36	; 0x24
 8004e7c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fae0 	bl	800545c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f825 	bl	8004eec <UART_SetConfig>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e01b      	b.n	8004ee4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fb5f 	bl	80055a0 <UART_CheckIdleState>
 8004ee2:	4603      	mov	r3, r0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef0:	b08a      	sub	sp, #40	; 0x28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4ba4      	ldr	r3, [pc, #656]	; (80051ac <UART_SetConfig+0x2c0>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a99      	ldr	r2, [pc, #612]	; (80051b0 <UART_SetConfig+0x2c4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	4313      	orrs	r3, r2
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a90      	ldr	r2, [pc, #576]	; (80051b4 <UART_SetConfig+0x2c8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d126      	bne.n	8004fc4 <UART_SetConfig+0xd8>
 8004f76:	4b90      	ldr	r3, [pc, #576]	; (80051b8 <UART_SetConfig+0x2cc>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d81b      	bhi.n	8004fbc <UART_SetConfig+0xd0>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0xa0>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004fad 	.word	0x08004fad
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fb5 	.word	0x08004fb5
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa2:	e116      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004faa:	e112      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8004fac:	2304      	movs	r3, #4
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb2:	e10e      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fba:	e10a      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc2:	e106      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a7c      	ldr	r2, [pc, #496]	; (80051bc <UART_SetConfig+0x2d0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d138      	bne.n	8005040 <UART_SetConfig+0x154>
 8004fce:	4b7a      	ldr	r3, [pc, #488]	; (80051b8 <UART_SetConfig+0x2cc>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	f003 030c 	and.w	r3, r3, #12
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	d82d      	bhi.n	8005038 <UART_SetConfig+0x14c>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <UART_SetConfig+0xf8>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	08005039 	.word	0x08005039
 8004fec:	08005039 	.word	0x08005039
 8004ff0:	08005039 	.word	0x08005039
 8004ff4:	08005029 	.word	0x08005029
 8004ff8:	08005039 	.word	0x08005039
 8004ffc:	08005039 	.word	0x08005039
 8005000:	08005039 	.word	0x08005039
 8005004:	08005021 	.word	0x08005021
 8005008:	08005039 	.word	0x08005039
 800500c:	08005039 	.word	0x08005039
 8005010:	08005039 	.word	0x08005039
 8005014:	08005031 	.word	0x08005031
 8005018:	2300      	movs	r3, #0
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800501e:	e0d8      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005020:	2302      	movs	r3, #2
 8005022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005026:	e0d4      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005028:	2304      	movs	r3, #4
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502e:	e0d0      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005030:	2308      	movs	r3, #8
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005036:	e0cc      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503e:	e0c8      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a5e      	ldr	r2, [pc, #376]	; (80051c0 <UART_SetConfig+0x2d4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d125      	bne.n	8005096 <UART_SetConfig+0x1aa>
 800504a:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <UART_SetConfig+0x2cc>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005050:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005054:	2b30      	cmp	r3, #48	; 0x30
 8005056:	d016      	beq.n	8005086 <UART_SetConfig+0x19a>
 8005058:	2b30      	cmp	r3, #48	; 0x30
 800505a:	d818      	bhi.n	800508e <UART_SetConfig+0x1a2>
 800505c:	2b20      	cmp	r3, #32
 800505e:	d00a      	beq.n	8005076 <UART_SetConfig+0x18a>
 8005060:	2b20      	cmp	r3, #32
 8005062:	d814      	bhi.n	800508e <UART_SetConfig+0x1a2>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <UART_SetConfig+0x182>
 8005068:	2b10      	cmp	r3, #16
 800506a:	d008      	beq.n	800507e <UART_SetConfig+0x192>
 800506c:	e00f      	b.n	800508e <UART_SetConfig+0x1a2>
 800506e:	2300      	movs	r3, #0
 8005070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005074:	e0ad      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005076:	2302      	movs	r3, #2
 8005078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507c:	e0a9      	b.n	80051d2 <UART_SetConfig+0x2e6>
 800507e:	2304      	movs	r3, #4
 8005080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005084:	e0a5      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005086:	2308      	movs	r3, #8
 8005088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508c:	e0a1      	b.n	80051d2 <UART_SetConfig+0x2e6>
 800508e:	2310      	movs	r3, #16
 8005090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005094:	e09d      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a4a      	ldr	r2, [pc, #296]	; (80051c4 <UART_SetConfig+0x2d8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d125      	bne.n	80050ec <UART_SetConfig+0x200>
 80050a0:	4b45      	ldr	r3, [pc, #276]	; (80051b8 <UART_SetConfig+0x2cc>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050aa:	2bc0      	cmp	r3, #192	; 0xc0
 80050ac:	d016      	beq.n	80050dc <UART_SetConfig+0x1f0>
 80050ae:	2bc0      	cmp	r3, #192	; 0xc0
 80050b0:	d818      	bhi.n	80050e4 <UART_SetConfig+0x1f8>
 80050b2:	2b80      	cmp	r3, #128	; 0x80
 80050b4:	d00a      	beq.n	80050cc <UART_SetConfig+0x1e0>
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d814      	bhi.n	80050e4 <UART_SetConfig+0x1f8>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <UART_SetConfig+0x1d8>
 80050be:	2b40      	cmp	r3, #64	; 0x40
 80050c0:	d008      	beq.n	80050d4 <UART_SetConfig+0x1e8>
 80050c2:	e00f      	b.n	80050e4 <UART_SetConfig+0x1f8>
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ca:	e082      	b.n	80051d2 <UART_SetConfig+0x2e6>
 80050cc:	2302      	movs	r3, #2
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d2:	e07e      	b.n	80051d2 <UART_SetConfig+0x2e6>
 80050d4:	2304      	movs	r3, #4
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e07a      	b.n	80051d2 <UART_SetConfig+0x2e6>
 80050dc:	2308      	movs	r3, #8
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e076      	b.n	80051d2 <UART_SetConfig+0x2e6>
 80050e4:	2310      	movs	r3, #16
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	e072      	b.n	80051d2 <UART_SetConfig+0x2e6>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a35      	ldr	r2, [pc, #212]	; (80051c8 <UART_SetConfig+0x2dc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d12a      	bne.n	800514c <UART_SetConfig+0x260>
 80050f6:	4b30      	ldr	r3, [pc, #192]	; (80051b8 <UART_SetConfig+0x2cc>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005104:	d01a      	beq.n	800513c <UART_SetConfig+0x250>
 8005106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510a:	d81b      	bhi.n	8005144 <UART_SetConfig+0x258>
 800510c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005110:	d00c      	beq.n	800512c <UART_SetConfig+0x240>
 8005112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005116:	d815      	bhi.n	8005144 <UART_SetConfig+0x258>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <UART_SetConfig+0x238>
 800511c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005120:	d008      	beq.n	8005134 <UART_SetConfig+0x248>
 8005122:	e00f      	b.n	8005144 <UART_SetConfig+0x258>
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512a:	e052      	b.n	80051d2 <UART_SetConfig+0x2e6>
 800512c:	2302      	movs	r3, #2
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005132:	e04e      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005134:	2304      	movs	r3, #4
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513a:	e04a      	b.n	80051d2 <UART_SetConfig+0x2e6>
 800513c:	2308      	movs	r3, #8
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005142:	e046      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005144:	2310      	movs	r3, #16
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	e042      	b.n	80051d2 <UART_SetConfig+0x2e6>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <UART_SetConfig+0x2c4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d13a      	bne.n	80051cc <UART_SetConfig+0x2e0>
 8005156:	4b18      	ldr	r3, [pc, #96]	; (80051b8 <UART_SetConfig+0x2cc>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005164:	d01a      	beq.n	800519c <UART_SetConfig+0x2b0>
 8005166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800516a:	d81b      	bhi.n	80051a4 <UART_SetConfig+0x2b8>
 800516c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005170:	d00c      	beq.n	800518c <UART_SetConfig+0x2a0>
 8005172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005176:	d815      	bhi.n	80051a4 <UART_SetConfig+0x2b8>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <UART_SetConfig+0x298>
 800517c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005180:	d008      	beq.n	8005194 <UART_SetConfig+0x2a8>
 8005182:	e00f      	b.n	80051a4 <UART_SetConfig+0x2b8>
 8005184:	2300      	movs	r3, #0
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518a:	e022      	b.n	80051d2 <UART_SetConfig+0x2e6>
 800518c:	2302      	movs	r3, #2
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005192:	e01e      	b.n	80051d2 <UART_SetConfig+0x2e6>
 8005194:	2304      	movs	r3, #4
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519a:	e01a      	b.n	80051d2 <UART_SetConfig+0x2e6>
 800519c:	2308      	movs	r3, #8
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a2:	e016      	b.n	80051d2 <UART_SetConfig+0x2e6>
 80051a4:	2310      	movs	r3, #16
 80051a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051aa:	e012      	b.n	80051d2 <UART_SetConfig+0x2e6>
 80051ac:	efff69f3 	.word	0xefff69f3
 80051b0:	40008000 	.word	0x40008000
 80051b4:	40013800 	.word	0x40013800
 80051b8:	40021000 	.word	0x40021000
 80051bc:	40004400 	.word	0x40004400
 80051c0:	40004800 	.word	0x40004800
 80051c4:	40004c00 	.word	0x40004c00
 80051c8:	40005000 	.word	0x40005000
 80051cc:	2310      	movs	r3, #16
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a9f      	ldr	r2, [pc, #636]	; (8005454 <UART_SetConfig+0x568>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d17a      	bne.n	80052d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d824      	bhi.n	800522e <UART_SetConfig+0x342>
 80051e4:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <UART_SetConfig+0x300>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005211 	.word	0x08005211
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	08005219 	.word	0x08005219
 80051f8:	0800522f 	.word	0x0800522f
 80051fc:	0800521f 	.word	0x0800521f
 8005200:	0800522f 	.word	0x0800522f
 8005204:	0800522f 	.word	0x0800522f
 8005208:	0800522f 	.word	0x0800522f
 800520c:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005210:	f7ff f8d6 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005214:	61f8      	str	r0, [r7, #28]
        break;
 8005216:	e010      	b.n	800523a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b8f      	ldr	r3, [pc, #572]	; (8005458 <UART_SetConfig+0x56c>)
 800521a:	61fb      	str	r3, [r7, #28]
        break;
 800521c:	e00d      	b.n	800523a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7ff f837 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005222:	61f8      	str	r0, [r7, #28]
        break;
 8005224:	e009      	b.n	800523a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	61fb      	str	r3, [r7, #28]
        break;
 800522c:	e005      	b.n	800523a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005238:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80fb 	beq.w	8005438 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	4413      	add	r3, r2
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	429a      	cmp	r2, r3
 8005250:	d305      	bcc.n	800525e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	429a      	cmp	r2, r3
 800525c:	d903      	bls.n	8005266 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005264:	e0e8      	b.n	8005438 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2200      	movs	r2, #0
 800526a:	461c      	mov	r4, r3
 800526c:	4615      	mov	r5, r2
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	022b      	lsls	r3, r5, #8
 8005278:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800527c:	0222      	lsls	r2, r4, #8
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	6849      	ldr	r1, [r1, #4]
 8005282:	0849      	lsrs	r1, r1, #1
 8005284:	2000      	movs	r0, #0
 8005286:	4688      	mov	r8, r1
 8005288:	4681      	mov	r9, r0
 800528a:	eb12 0a08 	adds.w	sl, r2, r8
 800528e:	eb43 0b09 	adc.w	fp, r3, r9
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a0:	4650      	mov	r0, sl
 80052a2:	4659      	mov	r1, fp
 80052a4:	f7fb fcf0 	bl	8000c88 <__aeabi_uldivmod>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4613      	mov	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b6:	d308      	bcc.n	80052ca <UART_SetConfig+0x3de>
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052be:	d204      	bcs.n	80052ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	60da      	str	r2, [r3, #12]
 80052c8:	e0b6      	b.n	8005438 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052d0:	e0b2      	b.n	8005438 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052da:	d15e      	bne.n	800539a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80052dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d828      	bhi.n	8005336 <UART_SetConfig+0x44a>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <UART_SetConfig+0x400>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005319 	.word	0x08005319
 80052f4:	08005321 	.word	0x08005321
 80052f8:	08005337 	.word	0x08005337
 80052fc:	08005327 	.word	0x08005327
 8005300:	08005337 	.word	0x08005337
 8005304:	08005337 	.word	0x08005337
 8005308:	08005337 	.word	0x08005337
 800530c:	0800532f 	.word	0x0800532f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005310:	f7ff f856 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005314:	61f8      	str	r0, [r7, #28]
        break;
 8005316:	e014      	b.n	8005342 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005318:	f7ff f868 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 800531c:	61f8      	str	r0, [r7, #28]
        break;
 800531e:	e010      	b.n	8005342 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005320:	4b4d      	ldr	r3, [pc, #308]	; (8005458 <UART_SetConfig+0x56c>)
 8005322:	61fb      	str	r3, [r7, #28]
        break;
 8005324:	e00d      	b.n	8005342 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005326:	f7fe ffb3 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800532a:	61f8      	str	r0, [r7, #28]
        break;
 800532c:	e009      	b.n	8005342 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005332:	61fb      	str	r3, [r7, #28]
        break;
 8005334:	e005      	b.n	8005342 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005340:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d077      	beq.n	8005438 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	005a      	lsls	r2, r3, #1
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	085b      	lsrs	r3, r3, #1
 8005352:	441a      	add	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	fbb2 f3f3 	udiv	r3, r2, r3
 800535c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b0f      	cmp	r3, #15
 8005362:	d916      	bls.n	8005392 <UART_SetConfig+0x4a6>
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536a:	d212      	bcs.n	8005392 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f023 030f 	bic.w	r3, r3, #15
 8005374:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	b29b      	uxth	r3, r3
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	b29a      	uxth	r2, r3
 8005382:	8afb      	ldrh	r3, [r7, #22]
 8005384:	4313      	orrs	r3, r2
 8005386:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	8afa      	ldrh	r2, [r7, #22]
 800538e:	60da      	str	r2, [r3, #12]
 8005390:	e052      	b.n	8005438 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005398:	e04e      	b.n	8005438 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800539a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d827      	bhi.n	80053f2 <UART_SetConfig+0x506>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <UART_SetConfig+0x4bc>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	080053d5 	.word	0x080053d5
 80053b0:	080053dd 	.word	0x080053dd
 80053b4:	080053f3 	.word	0x080053f3
 80053b8:	080053e3 	.word	0x080053e3
 80053bc:	080053f3 	.word	0x080053f3
 80053c0:	080053f3 	.word	0x080053f3
 80053c4:	080053f3 	.word	0x080053f3
 80053c8:	080053eb 	.word	0x080053eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053cc:	f7fe fff8 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 80053d0:	61f8      	str	r0, [r7, #28]
        break;
 80053d2:	e014      	b.n	80053fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d4:	f7ff f80a 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 80053d8:	61f8      	str	r0, [r7, #28]
        break;
 80053da:	e010      	b.n	80053fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053dc:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <UART_SetConfig+0x56c>)
 80053de:	61fb      	str	r3, [r7, #28]
        break;
 80053e0:	e00d      	b.n	80053fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e2:	f7fe ff55 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80053e6:	61f8      	str	r0, [r7, #28]
        break;
 80053e8:	e009      	b.n	80053fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ee:	61fb      	str	r3, [r7, #28]
        break;
 80053f0:	e005      	b.n	80053fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053fc:	bf00      	nop
    }

    if (pclk != 0U)
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d019      	beq.n	8005438 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	085a      	lsrs	r2, r3, #1
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	441a      	add	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	fbb2 f3f3 	udiv	r3, r2, r3
 8005416:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	2b0f      	cmp	r3, #15
 800541c:	d909      	bls.n	8005432 <UART_SetConfig+0x546>
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005424:	d205      	bcs.n	8005432 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60da      	str	r2, [r3, #12]
 8005430:	e002      	b.n	8005438 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005444:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005448:	4618      	mov	r0, r3
 800544a:	3728      	adds	r7, #40	; 0x28
 800544c:	46bd      	mov	sp, r7
 800544e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005452:	bf00      	nop
 8005454:	40008000 	.word	0x40008000
 8005458:	00f42400 	.word	0x00f42400

0800545c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01a      	beq.n	8005572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555a:	d10a      	bne.n	8005572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]
  }
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b098      	sub	sp, #96	; 0x60
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055b0:	f7fc fa74 	bl	8001a9c <HAL_GetTick>
 80055b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d12e      	bne.n	8005622 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055cc:	2200      	movs	r2, #0
 80055ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f88c 	bl	80056f0 <UART_WaitOnFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d021      	beq.n	8005622 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f2:	653b      	str	r3, [r7, #80]	; 0x50
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055fc:	647b      	str	r3, [r7, #68]	; 0x44
 80055fe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800560a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e6      	bne.n	80055de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e062      	b.n	80056e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b04      	cmp	r3, #4
 800562e:	d149      	bne.n	80056c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005638:	2200      	movs	r2, #0
 800563a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f856 	bl	80056f0 <UART_WaitOnFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d03c      	beq.n	80056c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	623b      	str	r3, [r7, #32]
   return(result);
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800565e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005668:	633b      	str	r3, [r7, #48]	; 0x30
 800566a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800566e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e6      	bne.n	800564a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	60fb      	str	r3, [r7, #12]
   return(result);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0301 	bic.w	r3, r3, #1
 8005692:	64bb      	str	r3, [r7, #72]	; 0x48
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3308      	adds	r3, #8
 800569a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800569c:	61fa      	str	r2, [r7, #28]
 800569e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	69b9      	ldr	r1, [r7, #24]
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	e841 2300 	strex	r3, r2, [r1]
 80056a8:	617b      	str	r3, [r7, #20]
   return(result);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e5      	bne.n	800567c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e011      	b.n	80056e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3758      	adds	r7, #88	; 0x58
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	4613      	mov	r3, r2
 80056fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005700:	e049      	b.n	8005796 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d045      	beq.n	8005796 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570a:	f7fc f9c7 	bl	8001a9c <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <UART_WaitOnFlagUntilTimeout+0x30>
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e048      	b.n	80057b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d031      	beq.n	8005796 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b08      	cmp	r3, #8
 800573e:	d110      	bne.n	8005762 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2208      	movs	r2, #8
 8005746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f838 	bl	80057be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2208      	movs	r2, #8
 8005752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e029      	b.n	80057b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800576c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005770:	d111      	bne.n	8005796 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800577a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f81e 	bl	80057be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e00f      	b.n	80057b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d0a6      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057be:	b480      	push	{r7}
 80057c0:	b095      	sub	sp, #84	; 0x54
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	643b      	str	r3, [r7, #64]	; 0x40
 80057e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	61fb      	str	r3, [r7, #28]
   return(result);
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3308      	adds	r3, #8
 8005816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800581e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e5      	bne.n	80057f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005830:	2b01      	cmp	r3, #1
 8005832:	d118      	bne.n	8005866 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	60bb      	str	r3, [r7, #8]
   return(result);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f023 0310 	bic.w	r3, r3, #16
 8005848:	647b      	str	r3, [r7, #68]	; 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6979      	ldr	r1, [r7, #20]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	613b      	str	r3, [r7, #16]
   return(result);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e6      	bne.n	8005834 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	669a      	str	r2, [r3, #104]	; 0x68
}
 800587a:	bf00      	nop
 800587c:	3754      	adds	r7, #84	; 0x54
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <__cvt>:
 8005886:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800588a:	ec55 4b10 	vmov	r4, r5, d0
 800588e:	2d00      	cmp	r5, #0
 8005890:	460e      	mov	r6, r1
 8005892:	4619      	mov	r1, r3
 8005894:	462b      	mov	r3, r5
 8005896:	bfbb      	ittet	lt
 8005898:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800589c:	461d      	movlt	r5, r3
 800589e:	2300      	movge	r3, #0
 80058a0:	232d      	movlt	r3, #45	; 0x2d
 80058a2:	700b      	strb	r3, [r1, #0]
 80058a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058aa:	4691      	mov	r9, r2
 80058ac:	f023 0820 	bic.w	r8, r3, #32
 80058b0:	bfbc      	itt	lt
 80058b2:	4622      	movlt	r2, r4
 80058b4:	4614      	movlt	r4, r2
 80058b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058ba:	d005      	beq.n	80058c8 <__cvt+0x42>
 80058bc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058c0:	d100      	bne.n	80058c4 <__cvt+0x3e>
 80058c2:	3601      	adds	r6, #1
 80058c4:	2102      	movs	r1, #2
 80058c6:	e000      	b.n	80058ca <__cvt+0x44>
 80058c8:	2103      	movs	r1, #3
 80058ca:	ab03      	add	r3, sp, #12
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	ab02      	add	r3, sp, #8
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	ec45 4b10 	vmov	d0, r4, r5
 80058d6:	4653      	mov	r3, sl
 80058d8:	4632      	mov	r2, r6
 80058da:	f001 f881 	bl	80069e0 <_dtoa_r>
 80058de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058e2:	4607      	mov	r7, r0
 80058e4:	d102      	bne.n	80058ec <__cvt+0x66>
 80058e6:	f019 0f01 	tst.w	r9, #1
 80058ea:	d022      	beq.n	8005932 <__cvt+0xac>
 80058ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058f0:	eb07 0906 	add.w	r9, r7, r6
 80058f4:	d110      	bne.n	8005918 <__cvt+0x92>
 80058f6:	783b      	ldrb	r3, [r7, #0]
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	d10a      	bne.n	8005912 <__cvt+0x8c>
 80058fc:	2200      	movs	r2, #0
 80058fe:	2300      	movs	r3, #0
 8005900:	4620      	mov	r0, r4
 8005902:	4629      	mov	r1, r5
 8005904:	f7fb f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005908:	b918      	cbnz	r0, 8005912 <__cvt+0x8c>
 800590a:	f1c6 0601 	rsb	r6, r6, #1
 800590e:	f8ca 6000 	str.w	r6, [sl]
 8005912:	f8da 3000 	ldr.w	r3, [sl]
 8005916:	4499      	add	r9, r3
 8005918:	2200      	movs	r2, #0
 800591a:	2300      	movs	r3, #0
 800591c:	4620      	mov	r0, r4
 800591e:	4629      	mov	r1, r5
 8005920:	f7fb f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005924:	b108      	cbz	r0, 800592a <__cvt+0xa4>
 8005926:	f8cd 900c 	str.w	r9, [sp, #12]
 800592a:	2230      	movs	r2, #48	; 0x30
 800592c:	9b03      	ldr	r3, [sp, #12]
 800592e:	454b      	cmp	r3, r9
 8005930:	d307      	bcc.n	8005942 <__cvt+0xbc>
 8005932:	9b03      	ldr	r3, [sp, #12]
 8005934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005936:	1bdb      	subs	r3, r3, r7
 8005938:	4638      	mov	r0, r7
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	b004      	add	sp, #16
 800593e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005942:	1c59      	adds	r1, r3, #1
 8005944:	9103      	str	r1, [sp, #12]
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	e7f0      	b.n	800592c <__cvt+0xa6>

0800594a <__exponent>:
 800594a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800594c:	4603      	mov	r3, r0
 800594e:	2900      	cmp	r1, #0
 8005950:	bfb8      	it	lt
 8005952:	4249      	neglt	r1, r1
 8005954:	f803 2b02 	strb.w	r2, [r3], #2
 8005958:	bfb4      	ite	lt
 800595a:	222d      	movlt	r2, #45	; 0x2d
 800595c:	222b      	movge	r2, #43	; 0x2b
 800595e:	2909      	cmp	r1, #9
 8005960:	7042      	strb	r2, [r0, #1]
 8005962:	dd2a      	ble.n	80059ba <__exponent+0x70>
 8005964:	f10d 0207 	add.w	r2, sp, #7
 8005968:	4617      	mov	r7, r2
 800596a:	260a      	movs	r6, #10
 800596c:	4694      	mov	ip, r2
 800596e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005972:	fb06 1415 	mls	r4, r6, r5, r1
 8005976:	3430      	adds	r4, #48	; 0x30
 8005978:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800597c:	460c      	mov	r4, r1
 800597e:	2c63      	cmp	r4, #99	; 0x63
 8005980:	f102 32ff 	add.w	r2, r2, #4294967295
 8005984:	4629      	mov	r1, r5
 8005986:	dcf1      	bgt.n	800596c <__exponent+0x22>
 8005988:	3130      	adds	r1, #48	; 0x30
 800598a:	f1ac 0402 	sub.w	r4, ip, #2
 800598e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005992:	1c41      	adds	r1, r0, #1
 8005994:	4622      	mov	r2, r4
 8005996:	42ba      	cmp	r2, r7
 8005998:	d30a      	bcc.n	80059b0 <__exponent+0x66>
 800599a:	f10d 0209 	add.w	r2, sp, #9
 800599e:	eba2 020c 	sub.w	r2, r2, ip
 80059a2:	42bc      	cmp	r4, r7
 80059a4:	bf88      	it	hi
 80059a6:	2200      	movhi	r2, #0
 80059a8:	4413      	add	r3, r2
 80059aa:	1a18      	subs	r0, r3, r0
 80059ac:	b003      	add	sp, #12
 80059ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80059b4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80059b8:	e7ed      	b.n	8005996 <__exponent+0x4c>
 80059ba:	2330      	movs	r3, #48	; 0x30
 80059bc:	3130      	adds	r1, #48	; 0x30
 80059be:	7083      	strb	r3, [r0, #2]
 80059c0:	70c1      	strb	r1, [r0, #3]
 80059c2:	1d03      	adds	r3, r0, #4
 80059c4:	e7f1      	b.n	80059aa <__exponent+0x60>
	...

080059c8 <_printf_float>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	ed2d 8b02 	vpush	{d8}
 80059d0:	b08d      	sub	sp, #52	; 0x34
 80059d2:	460c      	mov	r4, r1
 80059d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059d8:	4616      	mov	r6, r2
 80059da:	461f      	mov	r7, r3
 80059dc:	4605      	mov	r5, r0
 80059de:	f000 fef7 	bl	80067d0 <_localeconv_r>
 80059e2:	f8d0 a000 	ldr.w	sl, [r0]
 80059e6:	4650      	mov	r0, sl
 80059e8:	f7fa fc42 	bl	8000270 <strlen>
 80059ec:	2300      	movs	r3, #0
 80059ee:	930a      	str	r3, [sp, #40]	; 0x28
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	9305      	str	r3, [sp, #20]
 80059f4:	f8d8 3000 	ldr.w	r3, [r8]
 80059f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059fc:	3307      	adds	r3, #7
 80059fe:	f023 0307 	bic.w	r3, r3, #7
 8005a02:	f103 0208 	add.w	r2, r3, #8
 8005a06:	f8c8 2000 	str.w	r2, [r8]
 8005a0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a12:	9307      	str	r3, [sp, #28]
 8005a14:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a18:	ee08 0a10 	vmov	s16, r0
 8005a1c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a24:	4b9e      	ldr	r3, [pc, #632]	; (8005ca0 <_printf_float+0x2d8>)
 8005a26:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2a:	f7fb f87f 	bl	8000b2c <__aeabi_dcmpun>
 8005a2e:	bb88      	cbnz	r0, 8005a94 <_printf_float+0xcc>
 8005a30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a34:	4b9a      	ldr	r3, [pc, #616]	; (8005ca0 <_printf_float+0x2d8>)
 8005a36:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3a:	f7fb f859 	bl	8000af0 <__aeabi_dcmple>
 8005a3e:	bb48      	cbnz	r0, 8005a94 <_printf_float+0xcc>
 8005a40:	2200      	movs	r2, #0
 8005a42:	2300      	movs	r3, #0
 8005a44:	4640      	mov	r0, r8
 8005a46:	4649      	mov	r1, r9
 8005a48:	f7fb f848 	bl	8000adc <__aeabi_dcmplt>
 8005a4c:	b110      	cbz	r0, 8005a54 <_printf_float+0x8c>
 8005a4e:	232d      	movs	r3, #45	; 0x2d
 8005a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a54:	4a93      	ldr	r2, [pc, #588]	; (8005ca4 <_printf_float+0x2dc>)
 8005a56:	4b94      	ldr	r3, [pc, #592]	; (8005ca8 <_printf_float+0x2e0>)
 8005a58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a5c:	bf94      	ite	ls
 8005a5e:	4690      	movls	r8, r2
 8005a60:	4698      	movhi	r8, r3
 8005a62:	2303      	movs	r3, #3
 8005a64:	6123      	str	r3, [r4, #16]
 8005a66:	9b05      	ldr	r3, [sp, #20]
 8005a68:	f023 0304 	bic.w	r3, r3, #4
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	f04f 0900 	mov.w	r9, #0
 8005a72:	9700      	str	r7, [sp, #0]
 8005a74:	4633      	mov	r3, r6
 8005a76:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f9da 	bl	8005e34 <_printf_common>
 8005a80:	3001      	adds	r0, #1
 8005a82:	f040 8090 	bne.w	8005ba6 <_printf_float+0x1de>
 8005a86:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8a:	b00d      	add	sp, #52	; 0x34
 8005a8c:	ecbd 8b02 	vpop	{d8}
 8005a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a94:	4642      	mov	r2, r8
 8005a96:	464b      	mov	r3, r9
 8005a98:	4640      	mov	r0, r8
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	f7fb f846 	bl	8000b2c <__aeabi_dcmpun>
 8005aa0:	b140      	cbz	r0, 8005ab4 <_printf_float+0xec>
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bfbc      	itt	lt
 8005aa8:	232d      	movlt	r3, #45	; 0x2d
 8005aaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005aae:	4a7f      	ldr	r2, [pc, #508]	; (8005cac <_printf_float+0x2e4>)
 8005ab0:	4b7f      	ldr	r3, [pc, #508]	; (8005cb0 <_printf_float+0x2e8>)
 8005ab2:	e7d1      	b.n	8005a58 <_printf_float+0x90>
 8005ab4:	6863      	ldr	r3, [r4, #4]
 8005ab6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005aba:	9206      	str	r2, [sp, #24]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	d13f      	bne.n	8005b40 <_printf_float+0x178>
 8005ac0:	2306      	movs	r3, #6
 8005ac2:	6063      	str	r3, [r4, #4]
 8005ac4:	9b05      	ldr	r3, [sp, #20]
 8005ac6:	6861      	ldr	r1, [r4, #4]
 8005ac8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005acc:	2300      	movs	r3, #0
 8005ace:	9303      	str	r3, [sp, #12]
 8005ad0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ad2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ad6:	ab09      	add	r3, sp, #36	; 0x24
 8005ad8:	ec49 8b10 	vmov	d0, r8, r9
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f7ff fece 	bl	8005886 <__cvt>
 8005aea:	9b06      	ldr	r3, [sp, #24]
 8005aec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aee:	2b47      	cmp	r3, #71	; 0x47
 8005af0:	4680      	mov	r8, r0
 8005af2:	d108      	bne.n	8005b06 <_printf_float+0x13e>
 8005af4:	1cc8      	adds	r0, r1, #3
 8005af6:	db02      	blt.n	8005afe <_printf_float+0x136>
 8005af8:	6863      	ldr	r3, [r4, #4]
 8005afa:	4299      	cmp	r1, r3
 8005afc:	dd41      	ble.n	8005b82 <_printf_float+0x1ba>
 8005afe:	f1ab 0302 	sub.w	r3, fp, #2
 8005b02:	fa5f fb83 	uxtb.w	fp, r3
 8005b06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b0a:	d820      	bhi.n	8005b4e <_printf_float+0x186>
 8005b0c:	3901      	subs	r1, #1
 8005b0e:	465a      	mov	r2, fp
 8005b10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b14:	9109      	str	r1, [sp, #36]	; 0x24
 8005b16:	f7ff ff18 	bl	800594a <__exponent>
 8005b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b1c:	1813      	adds	r3, r2, r0
 8005b1e:	2a01      	cmp	r2, #1
 8005b20:	4681      	mov	r9, r0
 8005b22:	6123      	str	r3, [r4, #16]
 8005b24:	dc02      	bgt.n	8005b2c <_printf_float+0x164>
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	07d2      	lsls	r2, r2, #31
 8005b2a:	d501      	bpl.n	8005b30 <_printf_float+0x168>
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	6123      	str	r3, [r4, #16]
 8005b30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d09c      	beq.n	8005a72 <_printf_float+0xaa>
 8005b38:	232d      	movs	r3, #45	; 0x2d
 8005b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b3e:	e798      	b.n	8005a72 <_printf_float+0xaa>
 8005b40:	9a06      	ldr	r2, [sp, #24]
 8005b42:	2a47      	cmp	r2, #71	; 0x47
 8005b44:	d1be      	bne.n	8005ac4 <_printf_float+0xfc>
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1bc      	bne.n	8005ac4 <_printf_float+0xfc>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e7b9      	b.n	8005ac2 <_printf_float+0xfa>
 8005b4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b52:	d118      	bne.n	8005b86 <_printf_float+0x1be>
 8005b54:	2900      	cmp	r1, #0
 8005b56:	6863      	ldr	r3, [r4, #4]
 8005b58:	dd0b      	ble.n	8005b72 <_printf_float+0x1aa>
 8005b5a:	6121      	str	r1, [r4, #16]
 8005b5c:	b913      	cbnz	r3, 8005b64 <_printf_float+0x19c>
 8005b5e:	6822      	ldr	r2, [r4, #0]
 8005b60:	07d0      	lsls	r0, r2, #31
 8005b62:	d502      	bpl.n	8005b6a <_printf_float+0x1a2>
 8005b64:	3301      	adds	r3, #1
 8005b66:	440b      	add	r3, r1
 8005b68:	6123      	str	r3, [r4, #16]
 8005b6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b6c:	f04f 0900 	mov.w	r9, #0
 8005b70:	e7de      	b.n	8005b30 <_printf_float+0x168>
 8005b72:	b913      	cbnz	r3, 8005b7a <_printf_float+0x1b2>
 8005b74:	6822      	ldr	r2, [r4, #0]
 8005b76:	07d2      	lsls	r2, r2, #31
 8005b78:	d501      	bpl.n	8005b7e <_printf_float+0x1b6>
 8005b7a:	3302      	adds	r3, #2
 8005b7c:	e7f4      	b.n	8005b68 <_printf_float+0x1a0>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e7f2      	b.n	8005b68 <_printf_float+0x1a0>
 8005b82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b88:	4299      	cmp	r1, r3
 8005b8a:	db05      	blt.n	8005b98 <_printf_float+0x1d0>
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	6121      	str	r1, [r4, #16]
 8005b90:	07d8      	lsls	r0, r3, #31
 8005b92:	d5ea      	bpl.n	8005b6a <_printf_float+0x1a2>
 8005b94:	1c4b      	adds	r3, r1, #1
 8005b96:	e7e7      	b.n	8005b68 <_printf_float+0x1a0>
 8005b98:	2900      	cmp	r1, #0
 8005b9a:	bfd4      	ite	le
 8005b9c:	f1c1 0202 	rsble	r2, r1, #2
 8005ba0:	2201      	movgt	r2, #1
 8005ba2:	4413      	add	r3, r2
 8005ba4:	e7e0      	b.n	8005b68 <_printf_float+0x1a0>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	055a      	lsls	r2, r3, #21
 8005baa:	d407      	bmi.n	8005bbc <_printf_float+0x1f4>
 8005bac:	6923      	ldr	r3, [r4, #16]
 8005bae:	4642      	mov	r2, r8
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d12c      	bne.n	8005c14 <_printf_float+0x24c>
 8005bba:	e764      	b.n	8005a86 <_printf_float+0xbe>
 8005bbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bc0:	f240 80e0 	bls.w	8005d84 <_printf_float+0x3bc>
 8005bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f7fa ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d034      	beq.n	8005c3e <_printf_float+0x276>
 8005bd4:	4a37      	ldr	r2, [pc, #220]	; (8005cb4 <_printf_float+0x2ec>)
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	f43f af51 	beq.w	8005a86 <_printf_float+0xbe>
 8005be4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005be8:	429a      	cmp	r2, r3
 8005bea:	db02      	blt.n	8005bf2 <_printf_float+0x22a>
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	07d8      	lsls	r0, r3, #31
 8005bf0:	d510      	bpl.n	8005c14 <_printf_float+0x24c>
 8005bf2:	ee18 3a10 	vmov	r3, s16
 8005bf6:	4652      	mov	r2, sl
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f af41 	beq.w	8005a86 <_printf_float+0xbe>
 8005c04:	f04f 0800 	mov.w	r8, #0
 8005c08:	f104 091a 	add.w	r9, r4, #26
 8005c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	4543      	cmp	r3, r8
 8005c12:	dc09      	bgt.n	8005c28 <_printf_float+0x260>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	079b      	lsls	r3, r3, #30
 8005c18:	f100 8107 	bmi.w	8005e2a <_printf_float+0x462>
 8005c1c:	68e0      	ldr	r0, [r4, #12]
 8005c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c20:	4298      	cmp	r0, r3
 8005c22:	bfb8      	it	lt
 8005c24:	4618      	movlt	r0, r3
 8005c26:	e730      	b.n	8005a8a <_printf_float+0xc2>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	464a      	mov	r2, r9
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	f43f af27 	beq.w	8005a86 <_printf_float+0xbe>
 8005c38:	f108 0801 	add.w	r8, r8, #1
 8005c3c:	e7e6      	b.n	8005c0c <_printf_float+0x244>
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	dc39      	bgt.n	8005cb8 <_printf_float+0x2f0>
 8005c44:	4a1b      	ldr	r2, [pc, #108]	; (8005cb4 <_printf_float+0x2ec>)
 8005c46:	2301      	movs	r3, #1
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b8      	blx	r7
 8005c4e:	3001      	adds	r0, #1
 8005c50:	f43f af19 	beq.w	8005a86 <_printf_float+0xbe>
 8005c54:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	d102      	bne.n	8005c62 <_printf_float+0x29a>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	07d9      	lsls	r1, r3, #31
 8005c60:	d5d8      	bpl.n	8005c14 <_printf_float+0x24c>
 8005c62:	ee18 3a10 	vmov	r3, s16
 8005c66:	4652      	mov	r2, sl
 8005c68:	4631      	mov	r1, r6
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	f43f af09 	beq.w	8005a86 <_printf_float+0xbe>
 8005c74:	f04f 0900 	mov.w	r9, #0
 8005c78:	f104 0a1a 	add.w	sl, r4, #26
 8005c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7e:	425b      	negs	r3, r3
 8005c80:	454b      	cmp	r3, r9
 8005c82:	dc01      	bgt.n	8005c88 <_printf_float+0x2c0>
 8005c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c86:	e792      	b.n	8005bae <_printf_float+0x1e6>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4652      	mov	r2, sl
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	4628      	mov	r0, r5
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	f43f aef7 	beq.w	8005a86 <_printf_float+0xbe>
 8005c98:	f109 0901 	add.w	r9, r9, #1
 8005c9c:	e7ee      	b.n	8005c7c <_printf_float+0x2b4>
 8005c9e:	bf00      	nop
 8005ca0:	7fefffff 	.word	0x7fefffff
 8005ca4:	0800a098 	.word	0x0800a098
 8005ca8:	0800a09c 	.word	0x0800a09c
 8005cac:	0800a0a0 	.word	0x0800a0a0
 8005cb0:	0800a0a4 	.word	0x0800a0a4
 8005cb4:	0800a0a8 	.word	0x0800a0a8
 8005cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	bfa8      	it	ge
 8005cc0:	461a      	movge	r2, r3
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	4691      	mov	r9, r2
 8005cc6:	dc37      	bgt.n	8005d38 <_printf_float+0x370>
 8005cc8:	f04f 0b00 	mov.w	fp, #0
 8005ccc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cd0:	f104 021a 	add.w	r2, r4, #26
 8005cd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cd6:	9305      	str	r3, [sp, #20]
 8005cd8:	eba3 0309 	sub.w	r3, r3, r9
 8005cdc:	455b      	cmp	r3, fp
 8005cde:	dc33      	bgt.n	8005d48 <_printf_float+0x380>
 8005ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	db3b      	blt.n	8005d60 <_printf_float+0x398>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	07da      	lsls	r2, r3, #31
 8005cec:	d438      	bmi.n	8005d60 <_printf_float+0x398>
 8005cee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cf2:	eba2 0903 	sub.w	r9, r2, r3
 8005cf6:	9b05      	ldr	r3, [sp, #20]
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	4591      	cmp	r9, r2
 8005cfc:	bfa8      	it	ge
 8005cfe:	4691      	movge	r9, r2
 8005d00:	f1b9 0f00 	cmp.w	r9, #0
 8005d04:	dc35      	bgt.n	8005d72 <_printf_float+0x3aa>
 8005d06:	f04f 0800 	mov.w	r8, #0
 8005d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d0e:	f104 0a1a 	add.w	sl, r4, #26
 8005d12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	eba3 0309 	sub.w	r3, r3, r9
 8005d1c:	4543      	cmp	r3, r8
 8005d1e:	f77f af79 	ble.w	8005c14 <_printf_float+0x24c>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4652      	mov	r2, sl
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f aeaa 	beq.w	8005a86 <_printf_float+0xbe>
 8005d32:	f108 0801 	add.w	r8, r8, #1
 8005d36:	e7ec      	b.n	8005d12 <_printf_float+0x34a>
 8005d38:	4613      	mov	r3, r2
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	4628      	mov	r0, r5
 8005d40:	47b8      	blx	r7
 8005d42:	3001      	adds	r0, #1
 8005d44:	d1c0      	bne.n	8005cc8 <_printf_float+0x300>
 8005d46:	e69e      	b.n	8005a86 <_printf_float+0xbe>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	9205      	str	r2, [sp, #20]
 8005d50:	47b8      	blx	r7
 8005d52:	3001      	adds	r0, #1
 8005d54:	f43f ae97 	beq.w	8005a86 <_printf_float+0xbe>
 8005d58:	9a05      	ldr	r2, [sp, #20]
 8005d5a:	f10b 0b01 	add.w	fp, fp, #1
 8005d5e:	e7b9      	b.n	8005cd4 <_printf_float+0x30c>
 8005d60:	ee18 3a10 	vmov	r3, s16
 8005d64:	4652      	mov	r2, sl
 8005d66:	4631      	mov	r1, r6
 8005d68:	4628      	mov	r0, r5
 8005d6a:	47b8      	blx	r7
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d1be      	bne.n	8005cee <_printf_float+0x326>
 8005d70:	e689      	b.n	8005a86 <_printf_float+0xbe>
 8005d72:	9a05      	ldr	r2, [sp, #20]
 8005d74:	464b      	mov	r3, r9
 8005d76:	4442      	add	r2, r8
 8005d78:	4631      	mov	r1, r6
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	47b8      	blx	r7
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d1c1      	bne.n	8005d06 <_printf_float+0x33e>
 8005d82:	e680      	b.n	8005a86 <_printf_float+0xbe>
 8005d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d86:	2a01      	cmp	r2, #1
 8005d88:	dc01      	bgt.n	8005d8e <_printf_float+0x3c6>
 8005d8a:	07db      	lsls	r3, r3, #31
 8005d8c:	d53a      	bpl.n	8005e04 <_printf_float+0x43c>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4642      	mov	r2, r8
 8005d92:	4631      	mov	r1, r6
 8005d94:	4628      	mov	r0, r5
 8005d96:	47b8      	blx	r7
 8005d98:	3001      	adds	r0, #1
 8005d9a:	f43f ae74 	beq.w	8005a86 <_printf_float+0xbe>
 8005d9e:	ee18 3a10 	vmov	r3, s16
 8005da2:	4652      	mov	r2, sl
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	f43f ae6b 	beq.w	8005a86 <_printf_float+0xbe>
 8005db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005db4:	2200      	movs	r2, #0
 8005db6:	2300      	movs	r3, #0
 8005db8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005dbc:	f7fa fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dc0:	b9d8      	cbnz	r0, 8005dfa <_printf_float+0x432>
 8005dc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005dc6:	f108 0201 	add.w	r2, r8, #1
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d10e      	bne.n	8005df2 <_printf_float+0x42a>
 8005dd4:	e657      	b.n	8005a86 <_printf_float+0xbe>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4652      	mov	r2, sl
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	f43f ae50 	beq.w	8005a86 <_printf_float+0xbe>
 8005de6:	f108 0801 	add.w	r8, r8, #1
 8005dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dec:	3b01      	subs	r3, #1
 8005dee:	4543      	cmp	r3, r8
 8005df0:	dcf1      	bgt.n	8005dd6 <_printf_float+0x40e>
 8005df2:	464b      	mov	r3, r9
 8005df4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005df8:	e6da      	b.n	8005bb0 <_printf_float+0x1e8>
 8005dfa:	f04f 0800 	mov.w	r8, #0
 8005dfe:	f104 0a1a 	add.w	sl, r4, #26
 8005e02:	e7f2      	b.n	8005dea <_printf_float+0x422>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4642      	mov	r2, r8
 8005e08:	e7df      	b.n	8005dca <_printf_float+0x402>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	464a      	mov	r2, r9
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	f43f ae36 	beq.w	8005a86 <_printf_float+0xbe>
 8005e1a:	f108 0801 	add.w	r8, r8, #1
 8005e1e:	68e3      	ldr	r3, [r4, #12]
 8005e20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e22:	1a5b      	subs	r3, r3, r1
 8005e24:	4543      	cmp	r3, r8
 8005e26:	dcf0      	bgt.n	8005e0a <_printf_float+0x442>
 8005e28:	e6f8      	b.n	8005c1c <_printf_float+0x254>
 8005e2a:	f04f 0800 	mov.w	r8, #0
 8005e2e:	f104 0919 	add.w	r9, r4, #25
 8005e32:	e7f4      	b.n	8005e1e <_printf_float+0x456>

08005e34 <_printf_common>:
 8005e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e38:	4616      	mov	r6, r2
 8005e3a:	4699      	mov	r9, r3
 8005e3c:	688a      	ldr	r2, [r1, #8]
 8005e3e:	690b      	ldr	r3, [r1, #16]
 8005e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e44:	4293      	cmp	r3, r2
 8005e46:	bfb8      	it	lt
 8005e48:	4613      	movlt	r3, r2
 8005e4a:	6033      	str	r3, [r6, #0]
 8005e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e50:	4607      	mov	r7, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	b10a      	cbz	r2, 8005e5a <_printf_common+0x26>
 8005e56:	3301      	adds	r3, #1
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	0699      	lsls	r1, r3, #26
 8005e5e:	bf42      	ittt	mi
 8005e60:	6833      	ldrmi	r3, [r6, #0]
 8005e62:	3302      	addmi	r3, #2
 8005e64:	6033      	strmi	r3, [r6, #0]
 8005e66:	6825      	ldr	r5, [r4, #0]
 8005e68:	f015 0506 	ands.w	r5, r5, #6
 8005e6c:	d106      	bne.n	8005e7c <_printf_common+0x48>
 8005e6e:	f104 0a19 	add.w	sl, r4, #25
 8005e72:	68e3      	ldr	r3, [r4, #12]
 8005e74:	6832      	ldr	r2, [r6, #0]
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	42ab      	cmp	r3, r5
 8005e7a:	dc26      	bgt.n	8005eca <_printf_common+0x96>
 8005e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e80:	1e13      	subs	r3, r2, #0
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	bf18      	it	ne
 8005e86:	2301      	movne	r3, #1
 8005e88:	0692      	lsls	r2, r2, #26
 8005e8a:	d42b      	bmi.n	8005ee4 <_printf_common+0xb0>
 8005e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e90:	4649      	mov	r1, r9
 8005e92:	4638      	mov	r0, r7
 8005e94:	47c0      	blx	r8
 8005e96:	3001      	adds	r0, #1
 8005e98:	d01e      	beq.n	8005ed8 <_printf_common+0xa4>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	6922      	ldr	r2, [r4, #16]
 8005e9e:	f003 0306 	and.w	r3, r3, #6
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	bf02      	ittt	eq
 8005ea6:	68e5      	ldreq	r5, [r4, #12]
 8005ea8:	6833      	ldreq	r3, [r6, #0]
 8005eaa:	1aed      	subeq	r5, r5, r3
 8005eac:	68a3      	ldr	r3, [r4, #8]
 8005eae:	bf0c      	ite	eq
 8005eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005eb4:	2500      	movne	r5, #0
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	bfc4      	itt	gt
 8005eba:	1a9b      	subgt	r3, r3, r2
 8005ebc:	18ed      	addgt	r5, r5, r3
 8005ebe:	2600      	movs	r6, #0
 8005ec0:	341a      	adds	r4, #26
 8005ec2:	42b5      	cmp	r5, r6
 8005ec4:	d11a      	bne.n	8005efc <_printf_common+0xc8>
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	e008      	b.n	8005edc <_printf_common+0xa8>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4652      	mov	r2, sl
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	47c0      	blx	r8
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d103      	bne.n	8005ee0 <_printf_common+0xac>
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8005edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee0:	3501      	adds	r5, #1
 8005ee2:	e7c6      	b.n	8005e72 <_printf_common+0x3e>
 8005ee4:	18e1      	adds	r1, r4, r3
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	2030      	movs	r0, #48	; 0x30
 8005eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eee:	4422      	add	r2, r4
 8005ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ef8:	3302      	adds	r3, #2
 8005efa:	e7c7      	b.n	8005e8c <_printf_common+0x58>
 8005efc:	2301      	movs	r3, #1
 8005efe:	4622      	mov	r2, r4
 8005f00:	4649      	mov	r1, r9
 8005f02:	4638      	mov	r0, r7
 8005f04:	47c0      	blx	r8
 8005f06:	3001      	adds	r0, #1
 8005f08:	d0e6      	beq.n	8005ed8 <_printf_common+0xa4>
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	e7d9      	b.n	8005ec2 <_printf_common+0x8e>
	...

08005f10 <_printf_i>:
 8005f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	7e0f      	ldrb	r7, [r1, #24]
 8005f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f18:	2f78      	cmp	r7, #120	; 0x78
 8005f1a:	4691      	mov	r9, r2
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	469a      	mov	sl, r3
 8005f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f26:	d807      	bhi.n	8005f38 <_printf_i+0x28>
 8005f28:	2f62      	cmp	r7, #98	; 0x62
 8005f2a:	d80a      	bhi.n	8005f42 <_printf_i+0x32>
 8005f2c:	2f00      	cmp	r7, #0
 8005f2e:	f000 80d4 	beq.w	80060da <_printf_i+0x1ca>
 8005f32:	2f58      	cmp	r7, #88	; 0x58
 8005f34:	f000 80c0 	beq.w	80060b8 <_printf_i+0x1a8>
 8005f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f40:	e03a      	b.n	8005fb8 <_printf_i+0xa8>
 8005f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f46:	2b15      	cmp	r3, #21
 8005f48:	d8f6      	bhi.n	8005f38 <_printf_i+0x28>
 8005f4a:	a101      	add	r1, pc, #4	; (adr r1, 8005f50 <_printf_i+0x40>)
 8005f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f50:	08005fa9 	.word	0x08005fa9
 8005f54:	08005fbd 	.word	0x08005fbd
 8005f58:	08005f39 	.word	0x08005f39
 8005f5c:	08005f39 	.word	0x08005f39
 8005f60:	08005f39 	.word	0x08005f39
 8005f64:	08005f39 	.word	0x08005f39
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08005f39 	.word	0x08005f39
 8005f70:	08005f39 	.word	0x08005f39
 8005f74:	08005f39 	.word	0x08005f39
 8005f78:	08005f39 	.word	0x08005f39
 8005f7c:	080060c1 	.word	0x080060c1
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	0800607b 	.word	0x0800607b
 8005f88:	08005f39 	.word	0x08005f39
 8005f8c:	08005f39 	.word	0x08005f39
 8005f90:	080060e3 	.word	0x080060e3
 8005f94:	08005f39 	.word	0x08005f39
 8005f98:	08005fe9 	.word	0x08005fe9
 8005f9c:	08005f39 	.word	0x08005f39
 8005fa0:	08005f39 	.word	0x08005f39
 8005fa4:	08006083 	.word	0x08006083
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	1d1a      	adds	r2, r3, #4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	602a      	str	r2, [r5, #0]
 8005fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e09f      	b.n	80060fc <_printf_i+0x1ec>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	0607      	lsls	r7, r0, #24
 8005fc2:	f103 0104 	add.w	r1, r3, #4
 8005fc6:	6029      	str	r1, [r5, #0]
 8005fc8:	d501      	bpl.n	8005fce <_printf_i+0xbe>
 8005fca:	681e      	ldr	r6, [r3, #0]
 8005fcc:	e003      	b.n	8005fd6 <_printf_i+0xc6>
 8005fce:	0646      	lsls	r6, r0, #25
 8005fd0:	d5fb      	bpl.n	8005fca <_printf_i+0xba>
 8005fd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	da03      	bge.n	8005fe2 <_printf_i+0xd2>
 8005fda:	232d      	movs	r3, #45	; 0x2d
 8005fdc:	4276      	negs	r6, r6
 8005fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe2:	485a      	ldr	r0, [pc, #360]	; (800614c <_printf_i+0x23c>)
 8005fe4:	230a      	movs	r3, #10
 8005fe6:	e012      	b.n	800600e <_printf_i+0xfe>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	6820      	ldr	r0, [r4, #0]
 8005fec:	1d19      	adds	r1, r3, #4
 8005fee:	6029      	str	r1, [r5, #0]
 8005ff0:	0605      	lsls	r5, r0, #24
 8005ff2:	d501      	bpl.n	8005ff8 <_printf_i+0xe8>
 8005ff4:	681e      	ldr	r6, [r3, #0]
 8005ff6:	e002      	b.n	8005ffe <_printf_i+0xee>
 8005ff8:	0641      	lsls	r1, r0, #25
 8005ffa:	d5fb      	bpl.n	8005ff4 <_printf_i+0xe4>
 8005ffc:	881e      	ldrh	r6, [r3, #0]
 8005ffe:	4853      	ldr	r0, [pc, #332]	; (800614c <_printf_i+0x23c>)
 8006000:	2f6f      	cmp	r7, #111	; 0x6f
 8006002:	bf0c      	ite	eq
 8006004:	2308      	moveq	r3, #8
 8006006:	230a      	movne	r3, #10
 8006008:	2100      	movs	r1, #0
 800600a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800600e:	6865      	ldr	r5, [r4, #4]
 8006010:	60a5      	str	r5, [r4, #8]
 8006012:	2d00      	cmp	r5, #0
 8006014:	bfa2      	ittt	ge
 8006016:	6821      	ldrge	r1, [r4, #0]
 8006018:	f021 0104 	bicge.w	r1, r1, #4
 800601c:	6021      	strge	r1, [r4, #0]
 800601e:	b90e      	cbnz	r6, 8006024 <_printf_i+0x114>
 8006020:	2d00      	cmp	r5, #0
 8006022:	d04b      	beq.n	80060bc <_printf_i+0x1ac>
 8006024:	4615      	mov	r5, r2
 8006026:	fbb6 f1f3 	udiv	r1, r6, r3
 800602a:	fb03 6711 	mls	r7, r3, r1, r6
 800602e:	5dc7      	ldrb	r7, [r0, r7]
 8006030:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006034:	4637      	mov	r7, r6
 8006036:	42bb      	cmp	r3, r7
 8006038:	460e      	mov	r6, r1
 800603a:	d9f4      	bls.n	8006026 <_printf_i+0x116>
 800603c:	2b08      	cmp	r3, #8
 800603e:	d10b      	bne.n	8006058 <_printf_i+0x148>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	07de      	lsls	r6, r3, #31
 8006044:	d508      	bpl.n	8006058 <_printf_i+0x148>
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	6861      	ldr	r1, [r4, #4]
 800604a:	4299      	cmp	r1, r3
 800604c:	bfde      	ittt	le
 800604e:	2330      	movle	r3, #48	; 0x30
 8006050:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006054:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006058:	1b52      	subs	r2, r2, r5
 800605a:	6122      	str	r2, [r4, #16]
 800605c:	f8cd a000 	str.w	sl, [sp]
 8006060:	464b      	mov	r3, r9
 8006062:	aa03      	add	r2, sp, #12
 8006064:	4621      	mov	r1, r4
 8006066:	4640      	mov	r0, r8
 8006068:	f7ff fee4 	bl	8005e34 <_printf_common>
 800606c:	3001      	adds	r0, #1
 800606e:	d14a      	bne.n	8006106 <_printf_i+0x1f6>
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	b004      	add	sp, #16
 8006076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	f043 0320 	orr.w	r3, r3, #32
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	4833      	ldr	r0, [pc, #204]	; (8006150 <_printf_i+0x240>)
 8006084:	2778      	movs	r7, #120	; 0x78
 8006086:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	6829      	ldr	r1, [r5, #0]
 800608e:	061f      	lsls	r7, r3, #24
 8006090:	f851 6b04 	ldr.w	r6, [r1], #4
 8006094:	d402      	bmi.n	800609c <_printf_i+0x18c>
 8006096:	065f      	lsls	r7, r3, #25
 8006098:	bf48      	it	mi
 800609a:	b2b6      	uxthmi	r6, r6
 800609c:	07df      	lsls	r7, r3, #31
 800609e:	bf48      	it	mi
 80060a0:	f043 0320 	orrmi.w	r3, r3, #32
 80060a4:	6029      	str	r1, [r5, #0]
 80060a6:	bf48      	it	mi
 80060a8:	6023      	strmi	r3, [r4, #0]
 80060aa:	b91e      	cbnz	r6, 80060b4 <_printf_i+0x1a4>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	f023 0320 	bic.w	r3, r3, #32
 80060b2:	6023      	str	r3, [r4, #0]
 80060b4:	2310      	movs	r3, #16
 80060b6:	e7a7      	b.n	8006008 <_printf_i+0xf8>
 80060b8:	4824      	ldr	r0, [pc, #144]	; (800614c <_printf_i+0x23c>)
 80060ba:	e7e4      	b.n	8006086 <_printf_i+0x176>
 80060bc:	4615      	mov	r5, r2
 80060be:	e7bd      	b.n	800603c <_printf_i+0x12c>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	6826      	ldr	r6, [r4, #0]
 80060c4:	6961      	ldr	r1, [r4, #20]
 80060c6:	1d18      	adds	r0, r3, #4
 80060c8:	6028      	str	r0, [r5, #0]
 80060ca:	0635      	lsls	r5, r6, #24
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	d501      	bpl.n	80060d4 <_printf_i+0x1c4>
 80060d0:	6019      	str	r1, [r3, #0]
 80060d2:	e002      	b.n	80060da <_printf_i+0x1ca>
 80060d4:	0670      	lsls	r0, r6, #25
 80060d6:	d5fb      	bpl.n	80060d0 <_printf_i+0x1c0>
 80060d8:	8019      	strh	r1, [r3, #0]
 80060da:	2300      	movs	r3, #0
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	4615      	mov	r5, r2
 80060e0:	e7bc      	b.n	800605c <_printf_i+0x14c>
 80060e2:	682b      	ldr	r3, [r5, #0]
 80060e4:	1d1a      	adds	r2, r3, #4
 80060e6:	602a      	str	r2, [r5, #0]
 80060e8:	681d      	ldr	r5, [r3, #0]
 80060ea:	6862      	ldr	r2, [r4, #4]
 80060ec:	2100      	movs	r1, #0
 80060ee:	4628      	mov	r0, r5
 80060f0:	f7fa f86e 	bl	80001d0 <memchr>
 80060f4:	b108      	cbz	r0, 80060fa <_printf_i+0x1ea>
 80060f6:	1b40      	subs	r0, r0, r5
 80060f8:	6060      	str	r0, [r4, #4]
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	2300      	movs	r3, #0
 8006100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006104:	e7aa      	b.n	800605c <_printf_i+0x14c>
 8006106:	6923      	ldr	r3, [r4, #16]
 8006108:	462a      	mov	r2, r5
 800610a:	4649      	mov	r1, r9
 800610c:	4640      	mov	r0, r8
 800610e:	47d0      	blx	sl
 8006110:	3001      	adds	r0, #1
 8006112:	d0ad      	beq.n	8006070 <_printf_i+0x160>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	079b      	lsls	r3, r3, #30
 8006118:	d413      	bmi.n	8006142 <_printf_i+0x232>
 800611a:	68e0      	ldr	r0, [r4, #12]
 800611c:	9b03      	ldr	r3, [sp, #12]
 800611e:	4298      	cmp	r0, r3
 8006120:	bfb8      	it	lt
 8006122:	4618      	movlt	r0, r3
 8006124:	e7a6      	b.n	8006074 <_printf_i+0x164>
 8006126:	2301      	movs	r3, #1
 8006128:	4632      	mov	r2, r6
 800612a:	4649      	mov	r1, r9
 800612c:	4640      	mov	r0, r8
 800612e:	47d0      	blx	sl
 8006130:	3001      	adds	r0, #1
 8006132:	d09d      	beq.n	8006070 <_printf_i+0x160>
 8006134:	3501      	adds	r5, #1
 8006136:	68e3      	ldr	r3, [r4, #12]
 8006138:	9903      	ldr	r1, [sp, #12]
 800613a:	1a5b      	subs	r3, r3, r1
 800613c:	42ab      	cmp	r3, r5
 800613e:	dcf2      	bgt.n	8006126 <_printf_i+0x216>
 8006140:	e7eb      	b.n	800611a <_printf_i+0x20a>
 8006142:	2500      	movs	r5, #0
 8006144:	f104 0619 	add.w	r6, r4, #25
 8006148:	e7f5      	b.n	8006136 <_printf_i+0x226>
 800614a:	bf00      	nop
 800614c:	0800a0aa 	.word	0x0800a0aa
 8006150:	0800a0bb 	.word	0x0800a0bb

08006154 <_scanf_float>:
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	b087      	sub	sp, #28
 800615a:	4617      	mov	r7, r2
 800615c:	9303      	str	r3, [sp, #12]
 800615e:	688b      	ldr	r3, [r1, #8]
 8006160:	1e5a      	subs	r2, r3, #1
 8006162:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006166:	bf83      	ittte	hi
 8006168:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800616c:	195b      	addhi	r3, r3, r5
 800616e:	9302      	strhi	r3, [sp, #8]
 8006170:	2300      	movls	r3, #0
 8006172:	bf86      	itte	hi
 8006174:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006178:	608b      	strhi	r3, [r1, #8]
 800617a:	9302      	strls	r3, [sp, #8]
 800617c:	680b      	ldr	r3, [r1, #0]
 800617e:	468b      	mov	fp, r1
 8006180:	2500      	movs	r5, #0
 8006182:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006186:	f84b 3b1c 	str.w	r3, [fp], #28
 800618a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800618e:	4680      	mov	r8, r0
 8006190:	460c      	mov	r4, r1
 8006192:	465e      	mov	r6, fp
 8006194:	46aa      	mov	sl, r5
 8006196:	46a9      	mov	r9, r5
 8006198:	9501      	str	r5, [sp, #4]
 800619a:	68a2      	ldr	r2, [r4, #8]
 800619c:	b152      	cbz	r2, 80061b4 <_scanf_float+0x60>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b4e      	cmp	r3, #78	; 0x4e
 80061a4:	d864      	bhi.n	8006270 <_scanf_float+0x11c>
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d83c      	bhi.n	8006224 <_scanf_float+0xd0>
 80061aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80061ae:	b2c8      	uxtb	r0, r1
 80061b0:	280e      	cmp	r0, #14
 80061b2:	d93a      	bls.n	800622a <_scanf_float+0xd6>
 80061b4:	f1b9 0f00 	cmp.w	r9, #0
 80061b8:	d003      	beq.n	80061c2 <_scanf_float+0x6e>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061c6:	f1ba 0f01 	cmp.w	sl, #1
 80061ca:	f200 8113 	bhi.w	80063f4 <_scanf_float+0x2a0>
 80061ce:	455e      	cmp	r6, fp
 80061d0:	f200 8105 	bhi.w	80063de <_scanf_float+0x28a>
 80061d4:	2501      	movs	r5, #1
 80061d6:	4628      	mov	r0, r5
 80061d8:	b007      	add	sp, #28
 80061da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80061e2:	2a0d      	cmp	r2, #13
 80061e4:	d8e6      	bhi.n	80061b4 <_scanf_float+0x60>
 80061e6:	a101      	add	r1, pc, #4	; (adr r1, 80061ec <_scanf_float+0x98>)
 80061e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061ec:	0800632b 	.word	0x0800632b
 80061f0:	080061b5 	.word	0x080061b5
 80061f4:	080061b5 	.word	0x080061b5
 80061f8:	080061b5 	.word	0x080061b5
 80061fc:	0800638b 	.word	0x0800638b
 8006200:	08006363 	.word	0x08006363
 8006204:	080061b5 	.word	0x080061b5
 8006208:	080061b5 	.word	0x080061b5
 800620c:	08006339 	.word	0x08006339
 8006210:	080061b5 	.word	0x080061b5
 8006214:	080061b5 	.word	0x080061b5
 8006218:	080061b5 	.word	0x080061b5
 800621c:	080061b5 	.word	0x080061b5
 8006220:	080062f1 	.word	0x080062f1
 8006224:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006228:	e7db      	b.n	80061e2 <_scanf_float+0x8e>
 800622a:	290e      	cmp	r1, #14
 800622c:	d8c2      	bhi.n	80061b4 <_scanf_float+0x60>
 800622e:	a001      	add	r0, pc, #4	; (adr r0, 8006234 <_scanf_float+0xe0>)
 8006230:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006234:	080062e3 	.word	0x080062e3
 8006238:	080061b5 	.word	0x080061b5
 800623c:	080062e3 	.word	0x080062e3
 8006240:	08006377 	.word	0x08006377
 8006244:	080061b5 	.word	0x080061b5
 8006248:	08006291 	.word	0x08006291
 800624c:	080062cd 	.word	0x080062cd
 8006250:	080062cd 	.word	0x080062cd
 8006254:	080062cd 	.word	0x080062cd
 8006258:	080062cd 	.word	0x080062cd
 800625c:	080062cd 	.word	0x080062cd
 8006260:	080062cd 	.word	0x080062cd
 8006264:	080062cd 	.word	0x080062cd
 8006268:	080062cd 	.word	0x080062cd
 800626c:	080062cd 	.word	0x080062cd
 8006270:	2b6e      	cmp	r3, #110	; 0x6e
 8006272:	d809      	bhi.n	8006288 <_scanf_float+0x134>
 8006274:	2b60      	cmp	r3, #96	; 0x60
 8006276:	d8b2      	bhi.n	80061de <_scanf_float+0x8a>
 8006278:	2b54      	cmp	r3, #84	; 0x54
 800627a:	d077      	beq.n	800636c <_scanf_float+0x218>
 800627c:	2b59      	cmp	r3, #89	; 0x59
 800627e:	d199      	bne.n	80061b4 <_scanf_float+0x60>
 8006280:	2d07      	cmp	r5, #7
 8006282:	d197      	bne.n	80061b4 <_scanf_float+0x60>
 8006284:	2508      	movs	r5, #8
 8006286:	e029      	b.n	80062dc <_scanf_float+0x188>
 8006288:	2b74      	cmp	r3, #116	; 0x74
 800628a:	d06f      	beq.n	800636c <_scanf_float+0x218>
 800628c:	2b79      	cmp	r3, #121	; 0x79
 800628e:	e7f6      	b.n	800627e <_scanf_float+0x12a>
 8006290:	6821      	ldr	r1, [r4, #0]
 8006292:	05c8      	lsls	r0, r1, #23
 8006294:	d51a      	bpl.n	80062cc <_scanf_float+0x178>
 8006296:	9b02      	ldr	r3, [sp, #8]
 8006298:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800629c:	6021      	str	r1, [r4, #0]
 800629e:	f109 0901 	add.w	r9, r9, #1
 80062a2:	b11b      	cbz	r3, 80062ac <_scanf_float+0x158>
 80062a4:	3b01      	subs	r3, #1
 80062a6:	3201      	adds	r2, #1
 80062a8:	9302      	str	r3, [sp, #8]
 80062aa:	60a2      	str	r2, [r4, #8]
 80062ac:	68a3      	ldr	r3, [r4, #8]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	60a3      	str	r3, [r4, #8]
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	3301      	adds	r3, #1
 80062b6:	6123      	str	r3, [r4, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	607b      	str	r3, [r7, #4]
 80062c0:	f340 8084 	ble.w	80063cc <_scanf_float+0x278>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	603b      	str	r3, [r7, #0]
 80062ca:	e766      	b.n	800619a <_scanf_float+0x46>
 80062cc:	eb1a 0f05 	cmn.w	sl, r5
 80062d0:	f47f af70 	bne.w	80061b4 <_scanf_float+0x60>
 80062d4:	6822      	ldr	r2, [r4, #0]
 80062d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80062da:	6022      	str	r2, [r4, #0]
 80062dc:	f806 3b01 	strb.w	r3, [r6], #1
 80062e0:	e7e4      	b.n	80062ac <_scanf_float+0x158>
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	0610      	lsls	r0, r2, #24
 80062e6:	f57f af65 	bpl.w	80061b4 <_scanf_float+0x60>
 80062ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062ee:	e7f4      	b.n	80062da <_scanf_float+0x186>
 80062f0:	f1ba 0f00 	cmp.w	sl, #0
 80062f4:	d10e      	bne.n	8006314 <_scanf_float+0x1c0>
 80062f6:	f1b9 0f00 	cmp.w	r9, #0
 80062fa:	d10e      	bne.n	800631a <_scanf_float+0x1c6>
 80062fc:	6822      	ldr	r2, [r4, #0]
 80062fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006302:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006306:	d108      	bne.n	800631a <_scanf_float+0x1c6>
 8006308:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800630c:	6022      	str	r2, [r4, #0]
 800630e:	f04f 0a01 	mov.w	sl, #1
 8006312:	e7e3      	b.n	80062dc <_scanf_float+0x188>
 8006314:	f1ba 0f02 	cmp.w	sl, #2
 8006318:	d055      	beq.n	80063c6 <_scanf_float+0x272>
 800631a:	2d01      	cmp	r5, #1
 800631c:	d002      	beq.n	8006324 <_scanf_float+0x1d0>
 800631e:	2d04      	cmp	r5, #4
 8006320:	f47f af48 	bne.w	80061b4 <_scanf_float+0x60>
 8006324:	3501      	adds	r5, #1
 8006326:	b2ed      	uxtb	r5, r5
 8006328:	e7d8      	b.n	80062dc <_scanf_float+0x188>
 800632a:	f1ba 0f01 	cmp.w	sl, #1
 800632e:	f47f af41 	bne.w	80061b4 <_scanf_float+0x60>
 8006332:	f04f 0a02 	mov.w	sl, #2
 8006336:	e7d1      	b.n	80062dc <_scanf_float+0x188>
 8006338:	b97d      	cbnz	r5, 800635a <_scanf_float+0x206>
 800633a:	f1b9 0f00 	cmp.w	r9, #0
 800633e:	f47f af3c 	bne.w	80061ba <_scanf_float+0x66>
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006348:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800634c:	f47f af39 	bne.w	80061c2 <_scanf_float+0x6e>
 8006350:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006354:	6022      	str	r2, [r4, #0]
 8006356:	2501      	movs	r5, #1
 8006358:	e7c0      	b.n	80062dc <_scanf_float+0x188>
 800635a:	2d03      	cmp	r5, #3
 800635c:	d0e2      	beq.n	8006324 <_scanf_float+0x1d0>
 800635e:	2d05      	cmp	r5, #5
 8006360:	e7de      	b.n	8006320 <_scanf_float+0x1cc>
 8006362:	2d02      	cmp	r5, #2
 8006364:	f47f af26 	bne.w	80061b4 <_scanf_float+0x60>
 8006368:	2503      	movs	r5, #3
 800636a:	e7b7      	b.n	80062dc <_scanf_float+0x188>
 800636c:	2d06      	cmp	r5, #6
 800636e:	f47f af21 	bne.w	80061b4 <_scanf_float+0x60>
 8006372:	2507      	movs	r5, #7
 8006374:	e7b2      	b.n	80062dc <_scanf_float+0x188>
 8006376:	6822      	ldr	r2, [r4, #0]
 8006378:	0591      	lsls	r1, r2, #22
 800637a:	f57f af1b 	bpl.w	80061b4 <_scanf_float+0x60>
 800637e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006382:	6022      	str	r2, [r4, #0]
 8006384:	f8cd 9004 	str.w	r9, [sp, #4]
 8006388:	e7a8      	b.n	80062dc <_scanf_float+0x188>
 800638a:	6822      	ldr	r2, [r4, #0]
 800638c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006390:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006394:	d006      	beq.n	80063a4 <_scanf_float+0x250>
 8006396:	0550      	lsls	r0, r2, #21
 8006398:	f57f af0c 	bpl.w	80061b4 <_scanf_float+0x60>
 800639c:	f1b9 0f00 	cmp.w	r9, #0
 80063a0:	f43f af0f 	beq.w	80061c2 <_scanf_float+0x6e>
 80063a4:	0591      	lsls	r1, r2, #22
 80063a6:	bf58      	it	pl
 80063a8:	9901      	ldrpl	r1, [sp, #4]
 80063aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80063ae:	bf58      	it	pl
 80063b0:	eba9 0101 	subpl.w	r1, r9, r1
 80063b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80063b8:	bf58      	it	pl
 80063ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063be:	6022      	str	r2, [r4, #0]
 80063c0:	f04f 0900 	mov.w	r9, #0
 80063c4:	e78a      	b.n	80062dc <_scanf_float+0x188>
 80063c6:	f04f 0a03 	mov.w	sl, #3
 80063ca:	e787      	b.n	80062dc <_scanf_float+0x188>
 80063cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80063d0:	4639      	mov	r1, r7
 80063d2:	4640      	mov	r0, r8
 80063d4:	4798      	blx	r3
 80063d6:	2800      	cmp	r0, #0
 80063d8:	f43f aedf 	beq.w	800619a <_scanf_float+0x46>
 80063dc:	e6ea      	b.n	80061b4 <_scanf_float+0x60>
 80063de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063e6:	463a      	mov	r2, r7
 80063e8:	4640      	mov	r0, r8
 80063ea:	4798      	blx	r3
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	e6ec      	b.n	80061ce <_scanf_float+0x7a>
 80063f4:	1e6b      	subs	r3, r5, #1
 80063f6:	2b06      	cmp	r3, #6
 80063f8:	d825      	bhi.n	8006446 <_scanf_float+0x2f2>
 80063fa:	2d02      	cmp	r5, #2
 80063fc:	d836      	bhi.n	800646c <_scanf_float+0x318>
 80063fe:	455e      	cmp	r6, fp
 8006400:	f67f aee8 	bls.w	80061d4 <_scanf_float+0x80>
 8006404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006408:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800640c:	463a      	mov	r2, r7
 800640e:	4640      	mov	r0, r8
 8006410:	4798      	blx	r3
 8006412:	6923      	ldr	r3, [r4, #16]
 8006414:	3b01      	subs	r3, #1
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	e7f1      	b.n	80063fe <_scanf_float+0x2aa>
 800641a:	9802      	ldr	r0, [sp, #8]
 800641c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006420:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006424:	9002      	str	r0, [sp, #8]
 8006426:	463a      	mov	r2, r7
 8006428:	4640      	mov	r0, r8
 800642a:	4798      	blx	r3
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	3b01      	subs	r3, #1
 8006430:	6123      	str	r3, [r4, #16]
 8006432:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006436:	fa5f fa8a 	uxtb.w	sl, sl
 800643a:	f1ba 0f02 	cmp.w	sl, #2
 800643e:	d1ec      	bne.n	800641a <_scanf_float+0x2c6>
 8006440:	3d03      	subs	r5, #3
 8006442:	b2ed      	uxtb	r5, r5
 8006444:	1b76      	subs	r6, r6, r5
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	05da      	lsls	r2, r3, #23
 800644a:	d52f      	bpl.n	80064ac <_scanf_float+0x358>
 800644c:	055b      	lsls	r3, r3, #21
 800644e:	d510      	bpl.n	8006472 <_scanf_float+0x31e>
 8006450:	455e      	cmp	r6, fp
 8006452:	f67f aebf 	bls.w	80061d4 <_scanf_float+0x80>
 8006456:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800645a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800645e:	463a      	mov	r2, r7
 8006460:	4640      	mov	r0, r8
 8006462:	4798      	blx	r3
 8006464:	6923      	ldr	r3, [r4, #16]
 8006466:	3b01      	subs	r3, #1
 8006468:	6123      	str	r3, [r4, #16]
 800646a:	e7f1      	b.n	8006450 <_scanf_float+0x2fc>
 800646c:	46aa      	mov	sl, r5
 800646e:	9602      	str	r6, [sp, #8]
 8006470:	e7df      	b.n	8006432 <_scanf_float+0x2de>
 8006472:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	2965      	cmp	r1, #101	; 0x65
 800647a:	f103 33ff 	add.w	r3, r3, #4294967295
 800647e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	d00c      	beq.n	80064a0 <_scanf_float+0x34c>
 8006486:	2945      	cmp	r1, #69	; 0x45
 8006488:	d00a      	beq.n	80064a0 <_scanf_float+0x34c>
 800648a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800648e:	463a      	mov	r2, r7
 8006490:	4640      	mov	r0, r8
 8006492:	4798      	blx	r3
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800649a:	3b01      	subs	r3, #1
 800649c:	1eb5      	subs	r5, r6, #2
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064a4:	463a      	mov	r2, r7
 80064a6:	4640      	mov	r0, r8
 80064a8:	4798      	blx	r3
 80064aa:	462e      	mov	r6, r5
 80064ac:	6825      	ldr	r5, [r4, #0]
 80064ae:	f015 0510 	ands.w	r5, r5, #16
 80064b2:	d158      	bne.n	8006566 <_scanf_float+0x412>
 80064b4:	7035      	strb	r5, [r6, #0]
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c0:	d11c      	bne.n	80064fc <_scanf_float+0x3a8>
 80064c2:	9b01      	ldr	r3, [sp, #4]
 80064c4:	454b      	cmp	r3, r9
 80064c6:	eba3 0209 	sub.w	r2, r3, r9
 80064ca:	d124      	bne.n	8006516 <_scanf_float+0x3c2>
 80064cc:	2200      	movs	r2, #0
 80064ce:	4659      	mov	r1, fp
 80064d0:	4640      	mov	r0, r8
 80064d2:	f002 fc31 	bl	8008d38 <_strtod_r>
 80064d6:	9b03      	ldr	r3, [sp, #12]
 80064d8:	6821      	ldr	r1, [r4, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f011 0f02 	tst.w	r1, #2
 80064e0:	ec57 6b10 	vmov	r6, r7, d0
 80064e4:	f103 0204 	add.w	r2, r3, #4
 80064e8:	d020      	beq.n	800652c <_scanf_float+0x3d8>
 80064ea:	9903      	ldr	r1, [sp, #12]
 80064ec:	600a      	str	r2, [r1, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	e9c3 6700 	strd	r6, r7, [r3]
 80064f4:	68e3      	ldr	r3, [r4, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60e3      	str	r3, [r4, #12]
 80064fa:	e66c      	b.n	80061d6 <_scanf_float+0x82>
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0e4      	beq.n	80064cc <_scanf_float+0x378>
 8006502:	9905      	ldr	r1, [sp, #20]
 8006504:	230a      	movs	r3, #10
 8006506:	462a      	mov	r2, r5
 8006508:	3101      	adds	r1, #1
 800650a:	4640      	mov	r0, r8
 800650c:	f002 fc9c 	bl	8008e48 <_strtol_r>
 8006510:	9b04      	ldr	r3, [sp, #16]
 8006512:	9e05      	ldr	r6, [sp, #20]
 8006514:	1ac2      	subs	r2, r0, r3
 8006516:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800651a:	429e      	cmp	r6, r3
 800651c:	bf28      	it	cs
 800651e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006522:	4912      	ldr	r1, [pc, #72]	; (800656c <_scanf_float+0x418>)
 8006524:	4630      	mov	r0, r6
 8006526:	f000 f8e7 	bl	80066f8 <siprintf>
 800652a:	e7cf      	b.n	80064cc <_scanf_float+0x378>
 800652c:	f011 0f04 	tst.w	r1, #4
 8006530:	9903      	ldr	r1, [sp, #12]
 8006532:	600a      	str	r2, [r1, #0]
 8006534:	d1db      	bne.n	80064ee <_scanf_float+0x39a>
 8006536:	f8d3 8000 	ldr.w	r8, [r3]
 800653a:	ee10 2a10 	vmov	r2, s0
 800653e:	ee10 0a10 	vmov	r0, s0
 8006542:	463b      	mov	r3, r7
 8006544:	4639      	mov	r1, r7
 8006546:	f7fa faf1 	bl	8000b2c <__aeabi_dcmpun>
 800654a:	b128      	cbz	r0, 8006558 <_scanf_float+0x404>
 800654c:	4808      	ldr	r0, [pc, #32]	; (8006570 <_scanf_float+0x41c>)
 800654e:	f000 f9b7 	bl	80068c0 <nanf>
 8006552:	ed88 0a00 	vstr	s0, [r8]
 8006556:	e7cd      	b.n	80064f4 <_scanf_float+0x3a0>
 8006558:	4630      	mov	r0, r6
 800655a:	4639      	mov	r1, r7
 800655c:	f7fa fb44 	bl	8000be8 <__aeabi_d2f>
 8006560:	f8c8 0000 	str.w	r0, [r8]
 8006564:	e7c6      	b.n	80064f4 <_scanf_float+0x3a0>
 8006566:	2500      	movs	r5, #0
 8006568:	e635      	b.n	80061d6 <_scanf_float+0x82>
 800656a:	bf00      	nop
 800656c:	0800a0cc 	.word	0x0800a0cc
 8006570:	0800a45d 	.word	0x0800a45d

08006574 <std>:
 8006574:	2300      	movs	r3, #0
 8006576:	b510      	push	{r4, lr}
 8006578:	4604      	mov	r4, r0
 800657a:	e9c0 3300 	strd	r3, r3, [r0]
 800657e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006582:	6083      	str	r3, [r0, #8]
 8006584:	8181      	strh	r1, [r0, #12]
 8006586:	6643      	str	r3, [r0, #100]	; 0x64
 8006588:	81c2      	strh	r2, [r0, #14]
 800658a:	6183      	str	r3, [r0, #24]
 800658c:	4619      	mov	r1, r3
 800658e:	2208      	movs	r2, #8
 8006590:	305c      	adds	r0, #92	; 0x5c
 8006592:	f000 f914 	bl	80067be <memset>
 8006596:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <std+0x58>)
 8006598:	6263      	str	r3, [r4, #36]	; 0x24
 800659a:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <std+0x5c>)
 800659c:	62a3      	str	r3, [r4, #40]	; 0x28
 800659e:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <std+0x60>)
 80065a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065a2:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <std+0x64>)
 80065a4:	6323      	str	r3, [r4, #48]	; 0x30
 80065a6:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <std+0x68>)
 80065a8:	6224      	str	r4, [r4, #32]
 80065aa:	429c      	cmp	r4, r3
 80065ac:	d006      	beq.n	80065bc <std+0x48>
 80065ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80065b2:	4294      	cmp	r4, r2
 80065b4:	d002      	beq.n	80065bc <std+0x48>
 80065b6:	33d0      	adds	r3, #208	; 0xd0
 80065b8:	429c      	cmp	r4, r3
 80065ba:	d105      	bne.n	80065c8 <std+0x54>
 80065bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c4:	f000 b978 	b.w	80068b8 <__retarget_lock_init_recursive>
 80065c8:	bd10      	pop	{r4, pc}
 80065ca:	bf00      	nop
 80065cc:	08006739 	.word	0x08006739
 80065d0:	0800675b 	.word	0x0800675b
 80065d4:	08006793 	.word	0x08006793
 80065d8:	080067b7 	.word	0x080067b7
 80065dc:	200003a4 	.word	0x200003a4

080065e0 <stdio_exit_handler>:
 80065e0:	4a02      	ldr	r2, [pc, #8]	; (80065ec <stdio_exit_handler+0xc>)
 80065e2:	4903      	ldr	r1, [pc, #12]	; (80065f0 <stdio_exit_handler+0x10>)
 80065e4:	4803      	ldr	r0, [pc, #12]	; (80065f4 <stdio_exit_handler+0x14>)
 80065e6:	f000 b869 	b.w	80066bc <_fwalk_sglue>
 80065ea:	bf00      	nop
 80065ec:	2000000c 	.word	0x2000000c
 80065f0:	08009209 	.word	0x08009209
 80065f4:	20000018 	.word	0x20000018

080065f8 <cleanup_stdio>:
 80065f8:	6841      	ldr	r1, [r0, #4]
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <cleanup_stdio+0x34>)
 80065fc:	4299      	cmp	r1, r3
 80065fe:	b510      	push	{r4, lr}
 8006600:	4604      	mov	r4, r0
 8006602:	d001      	beq.n	8006608 <cleanup_stdio+0x10>
 8006604:	f002 fe00 	bl	8009208 <_fflush_r>
 8006608:	68a1      	ldr	r1, [r4, #8]
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <cleanup_stdio+0x38>)
 800660c:	4299      	cmp	r1, r3
 800660e:	d002      	beq.n	8006616 <cleanup_stdio+0x1e>
 8006610:	4620      	mov	r0, r4
 8006612:	f002 fdf9 	bl	8009208 <_fflush_r>
 8006616:	68e1      	ldr	r1, [r4, #12]
 8006618:	4b06      	ldr	r3, [pc, #24]	; (8006634 <cleanup_stdio+0x3c>)
 800661a:	4299      	cmp	r1, r3
 800661c:	d004      	beq.n	8006628 <cleanup_stdio+0x30>
 800661e:	4620      	mov	r0, r4
 8006620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006624:	f002 bdf0 	b.w	8009208 <_fflush_r>
 8006628:	bd10      	pop	{r4, pc}
 800662a:	bf00      	nop
 800662c:	200003a4 	.word	0x200003a4
 8006630:	2000040c 	.word	0x2000040c
 8006634:	20000474 	.word	0x20000474

08006638 <global_stdio_init.part.0>:
 8006638:	b510      	push	{r4, lr}
 800663a:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <global_stdio_init.part.0+0x30>)
 800663c:	4c0b      	ldr	r4, [pc, #44]	; (800666c <global_stdio_init.part.0+0x34>)
 800663e:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <global_stdio_init.part.0+0x38>)
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	4620      	mov	r0, r4
 8006644:	2200      	movs	r2, #0
 8006646:	2104      	movs	r1, #4
 8006648:	f7ff ff94 	bl	8006574 <std>
 800664c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006650:	2201      	movs	r2, #1
 8006652:	2109      	movs	r1, #9
 8006654:	f7ff ff8e 	bl	8006574 <std>
 8006658:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800665c:	2202      	movs	r2, #2
 800665e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006662:	2112      	movs	r1, #18
 8006664:	f7ff bf86 	b.w	8006574 <std>
 8006668:	200004dc 	.word	0x200004dc
 800666c:	200003a4 	.word	0x200003a4
 8006670:	080065e1 	.word	0x080065e1

08006674 <__sfp_lock_acquire>:
 8006674:	4801      	ldr	r0, [pc, #4]	; (800667c <__sfp_lock_acquire+0x8>)
 8006676:	f000 b920 	b.w	80068ba <__retarget_lock_acquire_recursive>
 800667a:	bf00      	nop
 800667c:	200004e5 	.word	0x200004e5

08006680 <__sfp_lock_release>:
 8006680:	4801      	ldr	r0, [pc, #4]	; (8006688 <__sfp_lock_release+0x8>)
 8006682:	f000 b91b 	b.w	80068bc <__retarget_lock_release_recursive>
 8006686:	bf00      	nop
 8006688:	200004e5 	.word	0x200004e5

0800668c <__sinit>:
 800668c:	b510      	push	{r4, lr}
 800668e:	4604      	mov	r4, r0
 8006690:	f7ff fff0 	bl	8006674 <__sfp_lock_acquire>
 8006694:	6a23      	ldr	r3, [r4, #32]
 8006696:	b11b      	cbz	r3, 80066a0 <__sinit+0x14>
 8006698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669c:	f7ff bff0 	b.w	8006680 <__sfp_lock_release>
 80066a0:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <__sinit+0x28>)
 80066a2:	6223      	str	r3, [r4, #32]
 80066a4:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <__sinit+0x2c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1f5      	bne.n	8006698 <__sinit+0xc>
 80066ac:	f7ff ffc4 	bl	8006638 <global_stdio_init.part.0>
 80066b0:	e7f2      	b.n	8006698 <__sinit+0xc>
 80066b2:	bf00      	nop
 80066b4:	080065f9 	.word	0x080065f9
 80066b8:	200004dc 	.word	0x200004dc

080066bc <_fwalk_sglue>:
 80066bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c0:	4607      	mov	r7, r0
 80066c2:	4688      	mov	r8, r1
 80066c4:	4614      	mov	r4, r2
 80066c6:	2600      	movs	r6, #0
 80066c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066cc:	f1b9 0901 	subs.w	r9, r9, #1
 80066d0:	d505      	bpl.n	80066de <_fwalk_sglue+0x22>
 80066d2:	6824      	ldr	r4, [r4, #0]
 80066d4:	2c00      	cmp	r4, #0
 80066d6:	d1f7      	bne.n	80066c8 <_fwalk_sglue+0xc>
 80066d8:	4630      	mov	r0, r6
 80066da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066de:	89ab      	ldrh	r3, [r5, #12]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d907      	bls.n	80066f4 <_fwalk_sglue+0x38>
 80066e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066e8:	3301      	adds	r3, #1
 80066ea:	d003      	beq.n	80066f4 <_fwalk_sglue+0x38>
 80066ec:	4629      	mov	r1, r5
 80066ee:	4638      	mov	r0, r7
 80066f0:	47c0      	blx	r8
 80066f2:	4306      	orrs	r6, r0
 80066f4:	3568      	adds	r5, #104	; 0x68
 80066f6:	e7e9      	b.n	80066cc <_fwalk_sglue+0x10>

080066f8 <siprintf>:
 80066f8:	b40e      	push	{r1, r2, r3}
 80066fa:	b500      	push	{lr}
 80066fc:	b09c      	sub	sp, #112	; 0x70
 80066fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006700:	9002      	str	r0, [sp, #8]
 8006702:	9006      	str	r0, [sp, #24]
 8006704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006708:	4809      	ldr	r0, [pc, #36]	; (8006730 <siprintf+0x38>)
 800670a:	9107      	str	r1, [sp, #28]
 800670c:	9104      	str	r1, [sp, #16]
 800670e:	4909      	ldr	r1, [pc, #36]	; (8006734 <siprintf+0x3c>)
 8006710:	f853 2b04 	ldr.w	r2, [r3], #4
 8006714:	9105      	str	r1, [sp, #20]
 8006716:	6800      	ldr	r0, [r0, #0]
 8006718:	9301      	str	r3, [sp, #4]
 800671a:	a902      	add	r1, sp, #8
 800671c:	f002 fbf0 	bl	8008f00 <_svfiprintf_r>
 8006720:	9b02      	ldr	r3, [sp, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	b01c      	add	sp, #112	; 0x70
 8006728:	f85d eb04 	ldr.w	lr, [sp], #4
 800672c:	b003      	add	sp, #12
 800672e:	4770      	bx	lr
 8006730:	20000064 	.word	0x20000064
 8006734:	ffff0208 	.word	0xffff0208

08006738 <__sread>:
 8006738:	b510      	push	{r4, lr}
 800673a:	460c      	mov	r4, r1
 800673c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006740:	f000 f86c 	bl	800681c <_read_r>
 8006744:	2800      	cmp	r0, #0
 8006746:	bfab      	itete	ge
 8006748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800674a:	89a3      	ldrhlt	r3, [r4, #12]
 800674c:	181b      	addge	r3, r3, r0
 800674e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006752:	bfac      	ite	ge
 8006754:	6563      	strge	r3, [r4, #84]	; 0x54
 8006756:	81a3      	strhlt	r3, [r4, #12]
 8006758:	bd10      	pop	{r4, pc}

0800675a <__swrite>:
 800675a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675e:	461f      	mov	r7, r3
 8006760:	898b      	ldrh	r3, [r1, #12]
 8006762:	05db      	lsls	r3, r3, #23
 8006764:	4605      	mov	r5, r0
 8006766:	460c      	mov	r4, r1
 8006768:	4616      	mov	r6, r2
 800676a:	d505      	bpl.n	8006778 <__swrite+0x1e>
 800676c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006770:	2302      	movs	r3, #2
 8006772:	2200      	movs	r2, #0
 8006774:	f000 f840 	bl	80067f8 <_lseek_r>
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800677e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	4632      	mov	r2, r6
 8006786:	463b      	mov	r3, r7
 8006788:	4628      	mov	r0, r5
 800678a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800678e:	f000 b857 	b.w	8006840 <_write_r>

08006792 <__sseek>:
 8006792:	b510      	push	{r4, lr}
 8006794:	460c      	mov	r4, r1
 8006796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679a:	f000 f82d 	bl	80067f8 <_lseek_r>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	bf15      	itete	ne
 80067a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80067a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067ae:	81a3      	strheq	r3, [r4, #12]
 80067b0:	bf18      	it	ne
 80067b2:	81a3      	strhne	r3, [r4, #12]
 80067b4:	bd10      	pop	{r4, pc}

080067b6 <__sclose>:
 80067b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ba:	f000 b80d 	b.w	80067d8 <_close_r>

080067be <memset>:
 80067be:	4402      	add	r2, r0
 80067c0:	4603      	mov	r3, r0
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d100      	bne.n	80067c8 <memset+0xa>
 80067c6:	4770      	bx	lr
 80067c8:	f803 1b01 	strb.w	r1, [r3], #1
 80067cc:	e7f9      	b.n	80067c2 <memset+0x4>
	...

080067d0 <_localeconv_r>:
 80067d0:	4800      	ldr	r0, [pc, #0]	; (80067d4 <_localeconv_r+0x4>)
 80067d2:	4770      	bx	lr
 80067d4:	20000158 	.word	0x20000158

080067d8 <_close_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d06      	ldr	r5, [pc, #24]	; (80067f4 <_close_r+0x1c>)
 80067dc:	2300      	movs	r3, #0
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	f7fb f843 	bl	800186e <_close>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_close_r+0x1a>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_close_r+0x1a>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	200004e0 	.word	0x200004e0

080067f8 <_lseek_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d07      	ldr	r5, [pc, #28]	; (8006818 <_lseek_r+0x20>)
 80067fc:	4604      	mov	r4, r0
 80067fe:	4608      	mov	r0, r1
 8006800:	4611      	mov	r1, r2
 8006802:	2200      	movs	r2, #0
 8006804:	602a      	str	r2, [r5, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	f7fb f858 	bl	80018bc <_lseek>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d102      	bne.n	8006816 <_lseek_r+0x1e>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	b103      	cbz	r3, 8006816 <_lseek_r+0x1e>
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	200004e0 	.word	0x200004e0

0800681c <_read_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d07      	ldr	r5, [pc, #28]	; (800683c <_read_r+0x20>)
 8006820:	4604      	mov	r4, r0
 8006822:	4608      	mov	r0, r1
 8006824:	4611      	mov	r1, r2
 8006826:	2200      	movs	r2, #0
 8006828:	602a      	str	r2, [r5, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	f7fa ffe6 	bl	80017fc <_read>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_read_r+0x1e>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_read_r+0x1e>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	200004e0 	.word	0x200004e0

08006840 <_write_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d07      	ldr	r5, [pc, #28]	; (8006860 <_write_r+0x20>)
 8006844:	4604      	mov	r4, r0
 8006846:	4608      	mov	r0, r1
 8006848:	4611      	mov	r1, r2
 800684a:	2200      	movs	r2, #0
 800684c:	602a      	str	r2, [r5, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f7fa fff1 	bl	8001836 <_write>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_write_r+0x1e>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_write_r+0x1e>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	200004e0 	.word	0x200004e0

08006864 <__errno>:
 8006864:	4b01      	ldr	r3, [pc, #4]	; (800686c <__errno+0x8>)
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000064 	.word	0x20000064

08006870 <__libc_init_array>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	4d0d      	ldr	r5, [pc, #52]	; (80068a8 <__libc_init_array+0x38>)
 8006874:	4c0d      	ldr	r4, [pc, #52]	; (80068ac <__libc_init_array+0x3c>)
 8006876:	1b64      	subs	r4, r4, r5
 8006878:	10a4      	asrs	r4, r4, #2
 800687a:	2600      	movs	r6, #0
 800687c:	42a6      	cmp	r6, r4
 800687e:	d109      	bne.n	8006894 <__libc_init_array+0x24>
 8006880:	4d0b      	ldr	r5, [pc, #44]	; (80068b0 <__libc_init_array+0x40>)
 8006882:	4c0c      	ldr	r4, [pc, #48]	; (80068b4 <__libc_init_array+0x44>)
 8006884:	f003 fbd8 	bl	800a038 <_init>
 8006888:	1b64      	subs	r4, r4, r5
 800688a:	10a4      	asrs	r4, r4, #2
 800688c:	2600      	movs	r6, #0
 800688e:	42a6      	cmp	r6, r4
 8006890:	d105      	bne.n	800689e <__libc_init_array+0x2e>
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	f855 3b04 	ldr.w	r3, [r5], #4
 8006898:	4798      	blx	r3
 800689a:	3601      	adds	r6, #1
 800689c:	e7ee      	b.n	800687c <__libc_init_array+0xc>
 800689e:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a2:	4798      	blx	r3
 80068a4:	3601      	adds	r6, #1
 80068a6:	e7f2      	b.n	800688e <__libc_init_array+0x1e>
 80068a8:	0800a4c8 	.word	0x0800a4c8
 80068ac:	0800a4c8 	.word	0x0800a4c8
 80068b0:	0800a4c8 	.word	0x0800a4c8
 80068b4:	0800a4cc 	.word	0x0800a4cc

080068b8 <__retarget_lock_init_recursive>:
 80068b8:	4770      	bx	lr

080068ba <__retarget_lock_acquire_recursive>:
 80068ba:	4770      	bx	lr

080068bc <__retarget_lock_release_recursive>:
 80068bc:	4770      	bx	lr
	...

080068c0 <nanf>:
 80068c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068c8 <nanf+0x8>
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	7fc00000 	.word	0x7fc00000

080068cc <quorem>:
 80068cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d0:	6903      	ldr	r3, [r0, #16]
 80068d2:	690c      	ldr	r4, [r1, #16]
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	4607      	mov	r7, r0
 80068d8:	db7e      	blt.n	80069d8 <quorem+0x10c>
 80068da:	3c01      	subs	r4, #1
 80068dc:	f101 0814 	add.w	r8, r1, #20
 80068e0:	f100 0514 	add.w	r5, r0, #20
 80068e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068f2:	3301      	adds	r3, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8006902:	d331      	bcc.n	8006968 <quorem+0x9c>
 8006904:	f04f 0e00 	mov.w	lr, #0
 8006908:	4640      	mov	r0, r8
 800690a:	46ac      	mov	ip, r5
 800690c:	46f2      	mov	sl, lr
 800690e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006912:	b293      	uxth	r3, r2
 8006914:	fb06 e303 	mla	r3, r6, r3, lr
 8006918:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800691c:	0c1a      	lsrs	r2, r3, #16
 800691e:	b29b      	uxth	r3, r3
 8006920:	ebaa 0303 	sub.w	r3, sl, r3
 8006924:	f8dc a000 	ldr.w	sl, [ip]
 8006928:	fa13 f38a 	uxtah	r3, r3, sl
 800692c:	fb06 220e 	mla	r2, r6, lr, r2
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	9b00      	ldr	r3, [sp, #0]
 8006934:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006938:	b292      	uxth	r2, r2
 800693a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800693e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006942:	f8bd 3000 	ldrh.w	r3, [sp]
 8006946:	4581      	cmp	r9, r0
 8006948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800694c:	f84c 3b04 	str.w	r3, [ip], #4
 8006950:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006954:	d2db      	bcs.n	800690e <quorem+0x42>
 8006956:	f855 300b 	ldr.w	r3, [r5, fp]
 800695a:	b92b      	cbnz	r3, 8006968 <quorem+0x9c>
 800695c:	9b01      	ldr	r3, [sp, #4]
 800695e:	3b04      	subs	r3, #4
 8006960:	429d      	cmp	r5, r3
 8006962:	461a      	mov	r2, r3
 8006964:	d32c      	bcc.n	80069c0 <quorem+0xf4>
 8006966:	613c      	str	r4, [r7, #16]
 8006968:	4638      	mov	r0, r7
 800696a:	f001 f9f1 	bl	8007d50 <__mcmp>
 800696e:	2800      	cmp	r0, #0
 8006970:	db22      	blt.n	80069b8 <quorem+0xec>
 8006972:	3601      	adds	r6, #1
 8006974:	4629      	mov	r1, r5
 8006976:	2000      	movs	r0, #0
 8006978:	f858 2b04 	ldr.w	r2, [r8], #4
 800697c:	f8d1 c000 	ldr.w	ip, [r1]
 8006980:	b293      	uxth	r3, r2
 8006982:	1ac3      	subs	r3, r0, r3
 8006984:	0c12      	lsrs	r2, r2, #16
 8006986:	fa13 f38c 	uxtah	r3, r3, ip
 800698a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800698e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006992:	b29b      	uxth	r3, r3
 8006994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006998:	45c1      	cmp	r9, r8
 800699a:	f841 3b04 	str.w	r3, [r1], #4
 800699e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069a2:	d2e9      	bcs.n	8006978 <quorem+0xac>
 80069a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069ac:	b922      	cbnz	r2, 80069b8 <quorem+0xec>
 80069ae:	3b04      	subs	r3, #4
 80069b0:	429d      	cmp	r5, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	d30a      	bcc.n	80069cc <quorem+0x100>
 80069b6:	613c      	str	r4, [r7, #16]
 80069b8:	4630      	mov	r0, r6
 80069ba:	b003      	add	sp, #12
 80069bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c0:	6812      	ldr	r2, [r2, #0]
 80069c2:	3b04      	subs	r3, #4
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	d1ce      	bne.n	8006966 <quorem+0x9a>
 80069c8:	3c01      	subs	r4, #1
 80069ca:	e7c9      	b.n	8006960 <quorem+0x94>
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	3b04      	subs	r3, #4
 80069d0:	2a00      	cmp	r2, #0
 80069d2:	d1f0      	bne.n	80069b6 <quorem+0xea>
 80069d4:	3c01      	subs	r4, #1
 80069d6:	e7eb      	b.n	80069b0 <quorem+0xe4>
 80069d8:	2000      	movs	r0, #0
 80069da:	e7ee      	b.n	80069ba <quorem+0xee>
 80069dc:	0000      	movs	r0, r0
	...

080069e0 <_dtoa_r>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	ed2d 8b04 	vpush	{d8-d9}
 80069e8:	69c5      	ldr	r5, [r0, #28]
 80069ea:	b093      	sub	sp, #76	; 0x4c
 80069ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069f0:	ec57 6b10 	vmov	r6, r7, d0
 80069f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069f8:	9107      	str	r1, [sp, #28]
 80069fa:	4604      	mov	r4, r0
 80069fc:	920a      	str	r2, [sp, #40]	; 0x28
 80069fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006a00:	b975      	cbnz	r5, 8006a20 <_dtoa_r+0x40>
 8006a02:	2010      	movs	r0, #16
 8006a04:	f000 fe2a 	bl	800765c <malloc>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	61e0      	str	r0, [r4, #28]
 8006a0c:	b920      	cbnz	r0, 8006a18 <_dtoa_r+0x38>
 8006a0e:	4bae      	ldr	r3, [pc, #696]	; (8006cc8 <_dtoa_r+0x2e8>)
 8006a10:	21ef      	movs	r1, #239	; 0xef
 8006a12:	48ae      	ldr	r0, [pc, #696]	; (8006ccc <_dtoa_r+0x2ec>)
 8006a14:	f002 fc74 	bl	8009300 <__assert_func>
 8006a18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a1c:	6005      	str	r5, [r0, #0]
 8006a1e:	60c5      	str	r5, [r0, #12]
 8006a20:	69e3      	ldr	r3, [r4, #28]
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	b151      	cbz	r1, 8006a3c <_dtoa_r+0x5c>
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	604a      	str	r2, [r1, #4]
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4093      	lsls	r3, r2
 8006a2e:	608b      	str	r3, [r1, #8]
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 ff07 	bl	8007844 <_Bfree>
 8006a36:	69e3      	ldr	r3, [r4, #28]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	1e3b      	subs	r3, r7, #0
 8006a3e:	bfbb      	ittet	lt
 8006a40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a44:	9303      	strlt	r3, [sp, #12]
 8006a46:	2300      	movge	r3, #0
 8006a48:	2201      	movlt	r2, #1
 8006a4a:	bfac      	ite	ge
 8006a4c:	f8c8 3000 	strge.w	r3, [r8]
 8006a50:	f8c8 2000 	strlt.w	r2, [r8]
 8006a54:	4b9e      	ldr	r3, [pc, #632]	; (8006cd0 <_dtoa_r+0x2f0>)
 8006a56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a5a:	ea33 0308 	bics.w	r3, r3, r8
 8006a5e:	d11b      	bne.n	8006a98 <_dtoa_r+0xb8>
 8006a60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a62:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a6c:	4333      	orrs	r3, r6
 8006a6e:	f000 8593 	beq.w	8007598 <_dtoa_r+0xbb8>
 8006a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a74:	b963      	cbnz	r3, 8006a90 <_dtoa_r+0xb0>
 8006a76:	4b97      	ldr	r3, [pc, #604]	; (8006cd4 <_dtoa_r+0x2f4>)
 8006a78:	e027      	b.n	8006aca <_dtoa_r+0xea>
 8006a7a:	4b97      	ldr	r3, [pc, #604]	; (8006cd8 <_dtoa_r+0x2f8>)
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	9800      	ldr	r0, [sp, #0]
 8006a86:	b013      	add	sp, #76	; 0x4c
 8006a88:	ecbd 8b04 	vpop	{d8-d9}
 8006a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a90:	4b90      	ldr	r3, [pc, #576]	; (8006cd4 <_dtoa_r+0x2f4>)
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	3303      	adds	r3, #3
 8006a96:	e7f3      	b.n	8006a80 <_dtoa_r+0xa0>
 8006a98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	ec51 0b17 	vmov	r0, r1, d7
 8006aa2:	eeb0 8a47 	vmov.f32	s16, s14
 8006aa6:	eef0 8a67 	vmov.f32	s17, s15
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f7fa f80c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ab0:	4681      	mov	r9, r0
 8006ab2:	b160      	cbz	r0, 8006ace <_dtoa_r+0xee>
 8006ab4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 8568 	beq.w	8007592 <_dtoa_r+0xbb2>
 8006ac2:	4b86      	ldr	r3, [pc, #536]	; (8006cdc <_dtoa_r+0x2fc>)
 8006ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	e7da      	b.n	8006a84 <_dtoa_r+0xa4>
 8006ace:	aa10      	add	r2, sp, #64	; 0x40
 8006ad0:	a911      	add	r1, sp, #68	; 0x44
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ad8:	eef0 0a68 	vmov.f32	s1, s17
 8006adc:	f001 fa4e 	bl	8007f7c <__d2b>
 8006ae0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006ae4:	4682      	mov	sl, r0
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	d07f      	beq.n	8006bea <_dtoa_r+0x20a>
 8006aea:	ee18 3a90 	vmov	r3, s17
 8006aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006af6:	ec51 0b18 	vmov	r0, r1, d8
 8006afa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b06:	4619      	mov	r1, r3
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4b75      	ldr	r3, [pc, #468]	; (8006ce0 <_dtoa_r+0x300>)
 8006b0c:	f7f9 fbbc 	bl	8000288 <__aeabi_dsub>
 8006b10:	a367      	add	r3, pc, #412	; (adr r3, 8006cb0 <_dtoa_r+0x2d0>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7f9 fd6f 	bl	80005f8 <__aeabi_dmul>
 8006b1a:	a367      	add	r3, pc, #412	; (adr r3, 8006cb8 <_dtoa_r+0x2d8>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f7f9 fbb4 	bl	800028c <__adddf3>
 8006b24:	4606      	mov	r6, r0
 8006b26:	4628      	mov	r0, r5
 8006b28:	460f      	mov	r7, r1
 8006b2a:	f7f9 fcfb 	bl	8000524 <__aeabi_i2d>
 8006b2e:	a364      	add	r3, pc, #400	; (adr r3, 8006cc0 <_dtoa_r+0x2e0>)
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f7f9 fd60 	bl	80005f8 <__aeabi_dmul>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4639      	mov	r1, r7
 8006b40:	f7f9 fba4 	bl	800028c <__adddf3>
 8006b44:	4606      	mov	r6, r0
 8006b46:	460f      	mov	r7, r1
 8006b48:	f7fa f806 	bl	8000b58 <__aeabi_d2iz>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4683      	mov	fp, r0
 8006b50:	2300      	movs	r3, #0
 8006b52:	4630      	mov	r0, r6
 8006b54:	4639      	mov	r1, r7
 8006b56:	f7f9 ffc1 	bl	8000adc <__aeabi_dcmplt>
 8006b5a:	b148      	cbz	r0, 8006b70 <_dtoa_r+0x190>
 8006b5c:	4658      	mov	r0, fp
 8006b5e:	f7f9 fce1 	bl	8000524 <__aeabi_i2d>
 8006b62:	4632      	mov	r2, r6
 8006b64:	463b      	mov	r3, r7
 8006b66:	f7f9 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b6a:	b908      	cbnz	r0, 8006b70 <_dtoa_r+0x190>
 8006b6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b70:	f1bb 0f16 	cmp.w	fp, #22
 8006b74:	d857      	bhi.n	8006c26 <_dtoa_r+0x246>
 8006b76:	4b5b      	ldr	r3, [pc, #364]	; (8006ce4 <_dtoa_r+0x304>)
 8006b78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	ec51 0b18 	vmov	r0, r1, d8
 8006b84:	f7f9 ffaa 	bl	8000adc <__aeabi_dcmplt>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d04e      	beq.n	8006c2a <_dtoa_r+0x24a>
 8006b8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b90:	2300      	movs	r3, #0
 8006b92:	930c      	str	r3, [sp, #48]	; 0x30
 8006b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b96:	1b5b      	subs	r3, r3, r5
 8006b98:	1e5a      	subs	r2, r3, #1
 8006b9a:	bf45      	ittet	mi
 8006b9c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ba0:	9305      	strmi	r3, [sp, #20]
 8006ba2:	2300      	movpl	r3, #0
 8006ba4:	2300      	movmi	r3, #0
 8006ba6:	9206      	str	r2, [sp, #24]
 8006ba8:	bf54      	ite	pl
 8006baa:	9305      	strpl	r3, [sp, #20]
 8006bac:	9306      	strmi	r3, [sp, #24]
 8006bae:	f1bb 0f00 	cmp.w	fp, #0
 8006bb2:	db3c      	blt.n	8006c2e <_dtoa_r+0x24e>
 8006bb4:	9b06      	ldr	r3, [sp, #24]
 8006bb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006bba:	445b      	add	r3, fp
 8006bbc:	9306      	str	r3, [sp, #24]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9308      	str	r3, [sp, #32]
 8006bc2:	9b07      	ldr	r3, [sp, #28]
 8006bc4:	2b09      	cmp	r3, #9
 8006bc6:	d868      	bhi.n	8006c9a <_dtoa_r+0x2ba>
 8006bc8:	2b05      	cmp	r3, #5
 8006bca:	bfc4      	itt	gt
 8006bcc:	3b04      	subgt	r3, #4
 8006bce:	9307      	strgt	r3, [sp, #28]
 8006bd0:	9b07      	ldr	r3, [sp, #28]
 8006bd2:	f1a3 0302 	sub.w	r3, r3, #2
 8006bd6:	bfcc      	ite	gt
 8006bd8:	2500      	movgt	r5, #0
 8006bda:	2501      	movle	r5, #1
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	f200 8085 	bhi.w	8006cec <_dtoa_r+0x30c>
 8006be2:	e8df f003 	tbb	[pc, r3]
 8006be6:	3b2e      	.short	0x3b2e
 8006be8:	5839      	.short	0x5839
 8006bea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006bee:	441d      	add	r5, r3
 8006bf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	bfc1      	itttt	gt
 8006bf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c04:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c08:	bfd6      	itet	le
 8006c0a:	f1c3 0320 	rsble	r3, r3, #32
 8006c0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c12:	fa06 f003 	lslle.w	r0, r6, r3
 8006c16:	f7f9 fc75 	bl	8000504 <__aeabi_ui2d>
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c20:	3d01      	subs	r5, #1
 8006c22:	920e      	str	r2, [sp, #56]	; 0x38
 8006c24:	e76f      	b.n	8006b06 <_dtoa_r+0x126>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e7b3      	b.n	8006b92 <_dtoa_r+0x1b2>
 8006c2a:	900c      	str	r0, [sp, #48]	; 0x30
 8006c2c:	e7b2      	b.n	8006b94 <_dtoa_r+0x1b4>
 8006c2e:	9b05      	ldr	r3, [sp, #20]
 8006c30:	eba3 030b 	sub.w	r3, r3, fp
 8006c34:	9305      	str	r3, [sp, #20]
 8006c36:	f1cb 0300 	rsb	r3, fp, #0
 8006c3a:	9308      	str	r3, [sp, #32]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c40:	e7bf      	b.n	8006bc2 <_dtoa_r+0x1e2>
 8006c42:	2300      	movs	r3, #0
 8006c44:	9309      	str	r3, [sp, #36]	; 0x24
 8006c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dc52      	bgt.n	8006cf2 <_dtoa_r+0x312>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	9304      	str	r3, [sp, #16]
 8006c52:	461a      	mov	r2, r3
 8006c54:	920a      	str	r2, [sp, #40]	; 0x28
 8006c56:	e00b      	b.n	8006c70 <_dtoa_r+0x290>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e7f3      	b.n	8006c44 <_dtoa_r+0x264>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c62:	445b      	add	r3, fp
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	3301      	adds	r3, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	9304      	str	r3, [sp, #16]
 8006c6c:	bfb8      	it	lt
 8006c6e:	2301      	movlt	r3, #1
 8006c70:	69e0      	ldr	r0, [r4, #28]
 8006c72:	2100      	movs	r1, #0
 8006c74:	2204      	movs	r2, #4
 8006c76:	f102 0614 	add.w	r6, r2, #20
 8006c7a:	429e      	cmp	r6, r3
 8006c7c:	d93d      	bls.n	8006cfa <_dtoa_r+0x31a>
 8006c7e:	6041      	str	r1, [r0, #4]
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fd9f 	bl	80077c4 <_Balloc>
 8006c86:	9000      	str	r0, [sp, #0]
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d139      	bne.n	8006d00 <_dtoa_r+0x320>
 8006c8c:	4b16      	ldr	r3, [pc, #88]	; (8006ce8 <_dtoa_r+0x308>)
 8006c8e:	4602      	mov	r2, r0
 8006c90:	f240 11af 	movw	r1, #431	; 0x1af
 8006c94:	e6bd      	b.n	8006a12 <_dtoa_r+0x32>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e7e1      	b.n	8006c5e <_dtoa_r+0x27e>
 8006c9a:	2501      	movs	r5, #1
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9307      	str	r3, [sp, #28]
 8006ca0:	9509      	str	r5, [sp, #36]	; 0x24
 8006ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	2200      	movs	r2, #0
 8006cac:	2312      	movs	r3, #18
 8006cae:	e7d1      	b.n	8006c54 <_dtoa_r+0x274>
 8006cb0:	636f4361 	.word	0x636f4361
 8006cb4:	3fd287a7 	.word	0x3fd287a7
 8006cb8:	8b60c8b3 	.word	0x8b60c8b3
 8006cbc:	3fc68a28 	.word	0x3fc68a28
 8006cc0:	509f79fb 	.word	0x509f79fb
 8006cc4:	3fd34413 	.word	0x3fd34413
 8006cc8:	0800a0de 	.word	0x0800a0de
 8006ccc:	0800a0f5 	.word	0x0800a0f5
 8006cd0:	7ff00000 	.word	0x7ff00000
 8006cd4:	0800a0da 	.word	0x0800a0da
 8006cd8:	0800a0d1 	.word	0x0800a0d1
 8006cdc:	0800a0a9 	.word	0x0800a0a9
 8006ce0:	3ff80000 	.word	0x3ff80000
 8006ce4:	0800a1e0 	.word	0x0800a1e0
 8006ce8:	0800a14d 	.word	0x0800a14d
 8006cec:	2301      	movs	r3, #1
 8006cee:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf0:	e7d7      	b.n	8006ca2 <_dtoa_r+0x2c2>
 8006cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	e7ba      	b.n	8006c70 <_dtoa_r+0x290>
 8006cfa:	3101      	adds	r1, #1
 8006cfc:	0052      	lsls	r2, r2, #1
 8006cfe:	e7ba      	b.n	8006c76 <_dtoa_r+0x296>
 8006d00:	69e3      	ldr	r3, [r4, #28]
 8006d02:	9a00      	ldr	r2, [sp, #0]
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	9b04      	ldr	r3, [sp, #16]
 8006d08:	2b0e      	cmp	r3, #14
 8006d0a:	f200 80a8 	bhi.w	8006e5e <_dtoa_r+0x47e>
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	f000 80a5 	beq.w	8006e5e <_dtoa_r+0x47e>
 8006d14:	f1bb 0f00 	cmp.w	fp, #0
 8006d18:	dd38      	ble.n	8006d8c <_dtoa_r+0x3ac>
 8006d1a:	4bc0      	ldr	r3, [pc, #768]	; (800701c <_dtoa_r+0x63c>)
 8006d1c:	f00b 020f 	and.w	r2, fp, #15
 8006d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d30:	d019      	beq.n	8006d66 <_dtoa_r+0x386>
 8006d32:	4bbb      	ldr	r3, [pc, #748]	; (8007020 <_dtoa_r+0x640>)
 8006d34:	ec51 0b18 	vmov	r0, r1, d8
 8006d38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d3c:	f7f9 fd86 	bl	800084c <__aeabi_ddiv>
 8006d40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d44:	f008 080f 	and.w	r8, r8, #15
 8006d48:	2503      	movs	r5, #3
 8006d4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007020 <_dtoa_r+0x640>
 8006d4e:	f1b8 0f00 	cmp.w	r8, #0
 8006d52:	d10a      	bne.n	8006d6a <_dtoa_r+0x38a>
 8006d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d58:	4632      	mov	r2, r6
 8006d5a:	463b      	mov	r3, r7
 8006d5c:	f7f9 fd76 	bl	800084c <__aeabi_ddiv>
 8006d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d64:	e02b      	b.n	8006dbe <_dtoa_r+0x3de>
 8006d66:	2502      	movs	r5, #2
 8006d68:	e7ef      	b.n	8006d4a <_dtoa_r+0x36a>
 8006d6a:	f018 0f01 	tst.w	r8, #1
 8006d6e:	d008      	beq.n	8006d82 <_dtoa_r+0x3a2>
 8006d70:	4630      	mov	r0, r6
 8006d72:	4639      	mov	r1, r7
 8006d74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d78:	f7f9 fc3e 	bl	80005f8 <__aeabi_dmul>
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	4606      	mov	r6, r0
 8006d80:	460f      	mov	r7, r1
 8006d82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d86:	f109 0908 	add.w	r9, r9, #8
 8006d8a:	e7e0      	b.n	8006d4e <_dtoa_r+0x36e>
 8006d8c:	f000 809f 	beq.w	8006ece <_dtoa_r+0x4ee>
 8006d90:	f1cb 0600 	rsb	r6, fp, #0
 8006d94:	4ba1      	ldr	r3, [pc, #644]	; (800701c <_dtoa_r+0x63c>)
 8006d96:	4fa2      	ldr	r7, [pc, #648]	; (8007020 <_dtoa_r+0x640>)
 8006d98:	f006 020f 	and.w	r2, r6, #15
 8006d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	ec51 0b18 	vmov	r0, r1, d8
 8006da8:	f7f9 fc26 	bl	80005f8 <__aeabi_dmul>
 8006dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006db0:	1136      	asrs	r6, r6, #4
 8006db2:	2300      	movs	r3, #0
 8006db4:	2502      	movs	r5, #2
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	d17e      	bne.n	8006eb8 <_dtoa_r+0x4d8>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1d0      	bne.n	8006d60 <_dtoa_r+0x380>
 8006dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8084 	beq.w	8006ed2 <_dtoa_r+0x4f2>
 8006dca:	4b96      	ldr	r3, [pc, #600]	; (8007024 <_dtoa_r+0x644>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4640      	mov	r0, r8
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	f7f9 fe83 	bl	8000adc <__aeabi_dcmplt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d07b      	beq.n	8006ed2 <_dtoa_r+0x4f2>
 8006dda:	9b04      	ldr	r3, [sp, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d078      	beq.n	8006ed2 <_dtoa_r+0x4f2>
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dd39      	ble.n	8006e5a <_dtoa_r+0x47a>
 8006de6:	4b90      	ldr	r3, [pc, #576]	; (8007028 <_dtoa_r+0x648>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	f7f9 fc03 	bl	80005f8 <__aeabi_dmul>
 8006df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006df6:	9e01      	ldr	r6, [sp, #4]
 8006df8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e02:	4628      	mov	r0, r5
 8006e04:	f7f9 fb8e 	bl	8000524 <__aeabi_i2d>
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	f7f9 fbf4 	bl	80005f8 <__aeabi_dmul>
 8006e10:	4b86      	ldr	r3, [pc, #536]	; (800702c <_dtoa_r+0x64c>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	f7f9 fa3a 	bl	800028c <__adddf3>
 8006e18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e20:	9303      	str	r3, [sp, #12]
 8006e22:	2e00      	cmp	r6, #0
 8006e24:	d158      	bne.n	8006ed8 <_dtoa_r+0x4f8>
 8006e26:	4b82      	ldr	r3, [pc, #520]	; (8007030 <_dtoa_r+0x650>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	f7f9 fa2b 	bl	8000288 <__aeabi_dsub>
 8006e32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e36:	4680      	mov	r8, r0
 8006e38:	4689      	mov	r9, r1
 8006e3a:	f7f9 fe6d 	bl	8000b18 <__aeabi_dcmpgt>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f040 8296 	bne.w	8007370 <_dtoa_r+0x990>
 8006e44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e48:	4640      	mov	r0, r8
 8006e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e4e:	4649      	mov	r1, r9
 8006e50:	f7f9 fe44 	bl	8000adc <__aeabi_dcmplt>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	f040 8289 	bne.w	800736c <_dtoa_r+0x98c>
 8006e5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f2c0 814e 	blt.w	8007102 <_dtoa_r+0x722>
 8006e66:	f1bb 0f0e 	cmp.w	fp, #14
 8006e6a:	f300 814a 	bgt.w	8007102 <_dtoa_r+0x722>
 8006e6e:	4b6b      	ldr	r3, [pc, #428]	; (800701c <_dtoa_r+0x63c>)
 8006e70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f280 80dc 	bge.w	8007038 <_dtoa_r+0x658>
 8006e80:	9b04      	ldr	r3, [sp, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f300 80d8 	bgt.w	8007038 <_dtoa_r+0x658>
 8006e88:	f040 826f 	bne.w	800736a <_dtoa_r+0x98a>
 8006e8c:	4b68      	ldr	r3, [pc, #416]	; (8007030 <_dtoa_r+0x650>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	4640      	mov	r0, r8
 8006e92:	4649      	mov	r1, r9
 8006e94:	f7f9 fbb0 	bl	80005f8 <__aeabi_dmul>
 8006e98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e9c:	f7f9 fe32 	bl	8000b04 <__aeabi_dcmpge>
 8006ea0:	9e04      	ldr	r6, [sp, #16]
 8006ea2:	4637      	mov	r7, r6
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	f040 8245 	bne.w	8007334 <_dtoa_r+0x954>
 8006eaa:	9d00      	ldr	r5, [sp, #0]
 8006eac:	2331      	movs	r3, #49	; 0x31
 8006eae:	f805 3b01 	strb.w	r3, [r5], #1
 8006eb2:	f10b 0b01 	add.w	fp, fp, #1
 8006eb6:	e241      	b.n	800733c <_dtoa_r+0x95c>
 8006eb8:	07f2      	lsls	r2, r6, #31
 8006eba:	d505      	bpl.n	8006ec8 <_dtoa_r+0x4e8>
 8006ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ec0:	f7f9 fb9a 	bl	80005f8 <__aeabi_dmul>
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	1076      	asrs	r6, r6, #1
 8006eca:	3708      	adds	r7, #8
 8006ecc:	e773      	b.n	8006db6 <_dtoa_r+0x3d6>
 8006ece:	2502      	movs	r5, #2
 8006ed0:	e775      	b.n	8006dbe <_dtoa_r+0x3de>
 8006ed2:	9e04      	ldr	r6, [sp, #16]
 8006ed4:	465f      	mov	r7, fp
 8006ed6:	e792      	b.n	8006dfe <_dtoa_r+0x41e>
 8006ed8:	9900      	ldr	r1, [sp, #0]
 8006eda:	4b50      	ldr	r3, [pc, #320]	; (800701c <_dtoa_r+0x63c>)
 8006edc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ee0:	4431      	add	r1, r6
 8006ee2:	9102      	str	r1, [sp, #8]
 8006ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ee6:	eeb0 9a47 	vmov.f32	s18, s14
 8006eea:	eef0 9a67 	vmov.f32	s19, s15
 8006eee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ef2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ef6:	2900      	cmp	r1, #0
 8006ef8:	d044      	beq.n	8006f84 <_dtoa_r+0x5a4>
 8006efa:	494e      	ldr	r1, [pc, #312]	; (8007034 <_dtoa_r+0x654>)
 8006efc:	2000      	movs	r0, #0
 8006efe:	f7f9 fca5 	bl	800084c <__aeabi_ddiv>
 8006f02:	ec53 2b19 	vmov	r2, r3, d9
 8006f06:	f7f9 f9bf 	bl	8000288 <__aeabi_dsub>
 8006f0a:	9d00      	ldr	r5, [sp, #0]
 8006f0c:	ec41 0b19 	vmov	d9, r0, r1
 8006f10:	4649      	mov	r1, r9
 8006f12:	4640      	mov	r0, r8
 8006f14:	f7f9 fe20 	bl	8000b58 <__aeabi_d2iz>
 8006f18:	4606      	mov	r6, r0
 8006f1a:	f7f9 fb03 	bl	8000524 <__aeabi_i2d>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4640      	mov	r0, r8
 8006f24:	4649      	mov	r1, r9
 8006f26:	f7f9 f9af 	bl	8000288 <__aeabi_dsub>
 8006f2a:	3630      	adds	r6, #48	; 0x30
 8006f2c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f30:	ec53 2b19 	vmov	r2, r3, d9
 8006f34:	4680      	mov	r8, r0
 8006f36:	4689      	mov	r9, r1
 8006f38:	f7f9 fdd0 	bl	8000adc <__aeabi_dcmplt>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d164      	bne.n	800700a <_dtoa_r+0x62a>
 8006f40:	4642      	mov	r2, r8
 8006f42:	464b      	mov	r3, r9
 8006f44:	4937      	ldr	r1, [pc, #220]	; (8007024 <_dtoa_r+0x644>)
 8006f46:	2000      	movs	r0, #0
 8006f48:	f7f9 f99e 	bl	8000288 <__aeabi_dsub>
 8006f4c:	ec53 2b19 	vmov	r2, r3, d9
 8006f50:	f7f9 fdc4 	bl	8000adc <__aeabi_dcmplt>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	f040 80b6 	bne.w	80070c6 <_dtoa_r+0x6e6>
 8006f5a:	9b02      	ldr	r3, [sp, #8]
 8006f5c:	429d      	cmp	r5, r3
 8006f5e:	f43f af7c 	beq.w	8006e5a <_dtoa_r+0x47a>
 8006f62:	4b31      	ldr	r3, [pc, #196]	; (8007028 <_dtoa_r+0x648>)
 8006f64:	ec51 0b19 	vmov	r0, r1, d9
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f7f9 fb45 	bl	80005f8 <__aeabi_dmul>
 8006f6e:	4b2e      	ldr	r3, [pc, #184]	; (8007028 <_dtoa_r+0x648>)
 8006f70:	ec41 0b19 	vmov	d9, r0, r1
 8006f74:	2200      	movs	r2, #0
 8006f76:	4640      	mov	r0, r8
 8006f78:	4649      	mov	r1, r9
 8006f7a:	f7f9 fb3d 	bl	80005f8 <__aeabi_dmul>
 8006f7e:	4680      	mov	r8, r0
 8006f80:	4689      	mov	r9, r1
 8006f82:	e7c5      	b.n	8006f10 <_dtoa_r+0x530>
 8006f84:	ec51 0b17 	vmov	r0, r1, d7
 8006f88:	f7f9 fb36 	bl	80005f8 <__aeabi_dmul>
 8006f8c:	9b02      	ldr	r3, [sp, #8]
 8006f8e:	9d00      	ldr	r5, [sp, #0]
 8006f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f92:	ec41 0b19 	vmov	d9, r0, r1
 8006f96:	4649      	mov	r1, r9
 8006f98:	4640      	mov	r0, r8
 8006f9a:	f7f9 fddd 	bl	8000b58 <__aeabi_d2iz>
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	f7f9 fac0 	bl	8000524 <__aeabi_i2d>
 8006fa4:	3630      	adds	r6, #48	; 0x30
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4640      	mov	r0, r8
 8006fac:	4649      	mov	r1, r9
 8006fae:	f7f9 f96b 	bl	8000288 <__aeabi_dsub>
 8006fb2:	f805 6b01 	strb.w	r6, [r5], #1
 8006fb6:	9b02      	ldr	r3, [sp, #8]
 8006fb8:	429d      	cmp	r5, r3
 8006fba:	4680      	mov	r8, r0
 8006fbc:	4689      	mov	r9, r1
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	d124      	bne.n	800700e <_dtoa_r+0x62e>
 8006fc4:	4b1b      	ldr	r3, [pc, #108]	; (8007034 <_dtoa_r+0x654>)
 8006fc6:	ec51 0b19 	vmov	r0, r1, d9
 8006fca:	f7f9 f95f 	bl	800028c <__adddf3>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	f7f9 fd9f 	bl	8000b18 <__aeabi_dcmpgt>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d173      	bne.n	80070c6 <_dtoa_r+0x6e6>
 8006fde:	ec53 2b19 	vmov	r2, r3, d9
 8006fe2:	4914      	ldr	r1, [pc, #80]	; (8007034 <_dtoa_r+0x654>)
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	f7f9 f94f 	bl	8000288 <__aeabi_dsub>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4640      	mov	r0, r8
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	f7f9 fd73 	bl	8000adc <__aeabi_dcmplt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f43f af2f 	beq.w	8006e5a <_dtoa_r+0x47a>
 8006ffc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ffe:	1e6b      	subs	r3, r5, #1
 8007000:	930f      	str	r3, [sp, #60]	; 0x3c
 8007002:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007006:	2b30      	cmp	r3, #48	; 0x30
 8007008:	d0f8      	beq.n	8006ffc <_dtoa_r+0x61c>
 800700a:	46bb      	mov	fp, r7
 800700c:	e04a      	b.n	80070a4 <_dtoa_r+0x6c4>
 800700e:	4b06      	ldr	r3, [pc, #24]	; (8007028 <_dtoa_r+0x648>)
 8007010:	f7f9 faf2 	bl	80005f8 <__aeabi_dmul>
 8007014:	4680      	mov	r8, r0
 8007016:	4689      	mov	r9, r1
 8007018:	e7bd      	b.n	8006f96 <_dtoa_r+0x5b6>
 800701a:	bf00      	nop
 800701c:	0800a1e0 	.word	0x0800a1e0
 8007020:	0800a1b8 	.word	0x0800a1b8
 8007024:	3ff00000 	.word	0x3ff00000
 8007028:	40240000 	.word	0x40240000
 800702c:	401c0000 	.word	0x401c0000
 8007030:	40140000 	.word	0x40140000
 8007034:	3fe00000 	.word	0x3fe00000
 8007038:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800703c:	9d00      	ldr	r5, [sp, #0]
 800703e:	4642      	mov	r2, r8
 8007040:	464b      	mov	r3, r9
 8007042:	4630      	mov	r0, r6
 8007044:	4639      	mov	r1, r7
 8007046:	f7f9 fc01 	bl	800084c <__aeabi_ddiv>
 800704a:	f7f9 fd85 	bl	8000b58 <__aeabi_d2iz>
 800704e:	9001      	str	r0, [sp, #4]
 8007050:	f7f9 fa68 	bl	8000524 <__aeabi_i2d>
 8007054:	4642      	mov	r2, r8
 8007056:	464b      	mov	r3, r9
 8007058:	f7f9 face 	bl	80005f8 <__aeabi_dmul>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4630      	mov	r0, r6
 8007062:	4639      	mov	r1, r7
 8007064:	f7f9 f910 	bl	8000288 <__aeabi_dsub>
 8007068:	9e01      	ldr	r6, [sp, #4]
 800706a:	9f04      	ldr	r7, [sp, #16]
 800706c:	3630      	adds	r6, #48	; 0x30
 800706e:	f805 6b01 	strb.w	r6, [r5], #1
 8007072:	9e00      	ldr	r6, [sp, #0]
 8007074:	1bae      	subs	r6, r5, r6
 8007076:	42b7      	cmp	r7, r6
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	d134      	bne.n	80070e8 <_dtoa_r+0x708>
 800707e:	f7f9 f905 	bl	800028c <__adddf3>
 8007082:	4642      	mov	r2, r8
 8007084:	464b      	mov	r3, r9
 8007086:	4606      	mov	r6, r0
 8007088:	460f      	mov	r7, r1
 800708a:	f7f9 fd45 	bl	8000b18 <__aeabi_dcmpgt>
 800708e:	b9c8      	cbnz	r0, 80070c4 <_dtoa_r+0x6e4>
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	4630      	mov	r0, r6
 8007096:	4639      	mov	r1, r7
 8007098:	f7f9 fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 800709c:	b110      	cbz	r0, 80070a4 <_dtoa_r+0x6c4>
 800709e:	9b01      	ldr	r3, [sp, #4]
 80070a0:	07db      	lsls	r3, r3, #31
 80070a2:	d40f      	bmi.n	80070c4 <_dtoa_r+0x6e4>
 80070a4:	4651      	mov	r1, sl
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fbcc 	bl	8007844 <_Bfree>
 80070ac:	2300      	movs	r3, #0
 80070ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070b0:	702b      	strb	r3, [r5, #0]
 80070b2:	f10b 0301 	add.w	r3, fp, #1
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f43f ace2 	beq.w	8006a84 <_dtoa_r+0xa4>
 80070c0:	601d      	str	r5, [r3, #0]
 80070c2:	e4df      	b.n	8006a84 <_dtoa_r+0xa4>
 80070c4:	465f      	mov	r7, fp
 80070c6:	462b      	mov	r3, r5
 80070c8:	461d      	mov	r5, r3
 80070ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ce:	2a39      	cmp	r2, #57	; 0x39
 80070d0:	d106      	bne.n	80070e0 <_dtoa_r+0x700>
 80070d2:	9a00      	ldr	r2, [sp, #0]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d1f7      	bne.n	80070c8 <_dtoa_r+0x6e8>
 80070d8:	9900      	ldr	r1, [sp, #0]
 80070da:	2230      	movs	r2, #48	; 0x30
 80070dc:	3701      	adds	r7, #1
 80070de:	700a      	strb	r2, [r1, #0]
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	3201      	adds	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e790      	b.n	800700a <_dtoa_r+0x62a>
 80070e8:	4ba3      	ldr	r3, [pc, #652]	; (8007378 <_dtoa_r+0x998>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	f7f9 fa84 	bl	80005f8 <__aeabi_dmul>
 80070f0:	2200      	movs	r2, #0
 80070f2:	2300      	movs	r3, #0
 80070f4:	4606      	mov	r6, r0
 80070f6:	460f      	mov	r7, r1
 80070f8:	f7f9 fce6 	bl	8000ac8 <__aeabi_dcmpeq>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d09e      	beq.n	800703e <_dtoa_r+0x65e>
 8007100:	e7d0      	b.n	80070a4 <_dtoa_r+0x6c4>
 8007102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007104:	2a00      	cmp	r2, #0
 8007106:	f000 80ca 	beq.w	800729e <_dtoa_r+0x8be>
 800710a:	9a07      	ldr	r2, [sp, #28]
 800710c:	2a01      	cmp	r2, #1
 800710e:	f300 80ad 	bgt.w	800726c <_dtoa_r+0x88c>
 8007112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007114:	2a00      	cmp	r2, #0
 8007116:	f000 80a5 	beq.w	8007264 <_dtoa_r+0x884>
 800711a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800711e:	9e08      	ldr	r6, [sp, #32]
 8007120:	9d05      	ldr	r5, [sp, #20]
 8007122:	9a05      	ldr	r2, [sp, #20]
 8007124:	441a      	add	r2, r3
 8007126:	9205      	str	r2, [sp, #20]
 8007128:	9a06      	ldr	r2, [sp, #24]
 800712a:	2101      	movs	r1, #1
 800712c:	441a      	add	r2, r3
 800712e:	4620      	mov	r0, r4
 8007130:	9206      	str	r2, [sp, #24]
 8007132:	f000 fc87 	bl	8007a44 <__i2b>
 8007136:	4607      	mov	r7, r0
 8007138:	b165      	cbz	r5, 8007154 <_dtoa_r+0x774>
 800713a:	9b06      	ldr	r3, [sp, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	dd09      	ble.n	8007154 <_dtoa_r+0x774>
 8007140:	42ab      	cmp	r3, r5
 8007142:	9a05      	ldr	r2, [sp, #20]
 8007144:	bfa8      	it	ge
 8007146:	462b      	movge	r3, r5
 8007148:	1ad2      	subs	r2, r2, r3
 800714a:	9205      	str	r2, [sp, #20]
 800714c:	9a06      	ldr	r2, [sp, #24]
 800714e:	1aed      	subs	r5, r5, r3
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	9306      	str	r3, [sp, #24]
 8007154:	9b08      	ldr	r3, [sp, #32]
 8007156:	b1f3      	cbz	r3, 8007196 <_dtoa_r+0x7b6>
 8007158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 80a3 	beq.w	80072a6 <_dtoa_r+0x8c6>
 8007160:	2e00      	cmp	r6, #0
 8007162:	dd10      	ble.n	8007186 <_dtoa_r+0x7a6>
 8007164:	4639      	mov	r1, r7
 8007166:	4632      	mov	r2, r6
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fd2b 	bl	8007bc4 <__pow5mult>
 800716e:	4652      	mov	r2, sl
 8007170:	4601      	mov	r1, r0
 8007172:	4607      	mov	r7, r0
 8007174:	4620      	mov	r0, r4
 8007176:	f000 fc7b 	bl	8007a70 <__multiply>
 800717a:	4651      	mov	r1, sl
 800717c:	4680      	mov	r8, r0
 800717e:	4620      	mov	r0, r4
 8007180:	f000 fb60 	bl	8007844 <_Bfree>
 8007184:	46c2      	mov	sl, r8
 8007186:	9b08      	ldr	r3, [sp, #32]
 8007188:	1b9a      	subs	r2, r3, r6
 800718a:	d004      	beq.n	8007196 <_dtoa_r+0x7b6>
 800718c:	4651      	mov	r1, sl
 800718e:	4620      	mov	r0, r4
 8007190:	f000 fd18 	bl	8007bc4 <__pow5mult>
 8007194:	4682      	mov	sl, r0
 8007196:	2101      	movs	r1, #1
 8007198:	4620      	mov	r0, r4
 800719a:	f000 fc53 	bl	8007a44 <__i2b>
 800719e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	4606      	mov	r6, r0
 80071a4:	f340 8081 	ble.w	80072aa <_dtoa_r+0x8ca>
 80071a8:	461a      	mov	r2, r3
 80071aa:	4601      	mov	r1, r0
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fd09 	bl	8007bc4 <__pow5mult>
 80071b2:	9b07      	ldr	r3, [sp, #28]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	4606      	mov	r6, r0
 80071b8:	dd7a      	ble.n	80072b0 <_dtoa_r+0x8d0>
 80071ba:	f04f 0800 	mov.w	r8, #0
 80071be:	6933      	ldr	r3, [r6, #16]
 80071c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071c4:	6918      	ldr	r0, [r3, #16]
 80071c6:	f000 fbef 	bl	80079a8 <__hi0bits>
 80071ca:	f1c0 0020 	rsb	r0, r0, #32
 80071ce:	9b06      	ldr	r3, [sp, #24]
 80071d0:	4418      	add	r0, r3
 80071d2:	f010 001f 	ands.w	r0, r0, #31
 80071d6:	f000 8094 	beq.w	8007302 <_dtoa_r+0x922>
 80071da:	f1c0 0320 	rsb	r3, r0, #32
 80071de:	2b04      	cmp	r3, #4
 80071e0:	f340 8085 	ble.w	80072ee <_dtoa_r+0x90e>
 80071e4:	9b05      	ldr	r3, [sp, #20]
 80071e6:	f1c0 001c 	rsb	r0, r0, #28
 80071ea:	4403      	add	r3, r0
 80071ec:	9305      	str	r3, [sp, #20]
 80071ee:	9b06      	ldr	r3, [sp, #24]
 80071f0:	4403      	add	r3, r0
 80071f2:	4405      	add	r5, r0
 80071f4:	9306      	str	r3, [sp, #24]
 80071f6:	9b05      	ldr	r3, [sp, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	dd05      	ble.n	8007208 <_dtoa_r+0x828>
 80071fc:	4651      	mov	r1, sl
 80071fe:	461a      	mov	r2, r3
 8007200:	4620      	mov	r0, r4
 8007202:	f000 fd39 	bl	8007c78 <__lshift>
 8007206:	4682      	mov	sl, r0
 8007208:	9b06      	ldr	r3, [sp, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	dd05      	ble.n	800721a <_dtoa_r+0x83a>
 800720e:	4631      	mov	r1, r6
 8007210:	461a      	mov	r2, r3
 8007212:	4620      	mov	r0, r4
 8007214:	f000 fd30 	bl	8007c78 <__lshift>
 8007218:	4606      	mov	r6, r0
 800721a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800721c:	2b00      	cmp	r3, #0
 800721e:	d072      	beq.n	8007306 <_dtoa_r+0x926>
 8007220:	4631      	mov	r1, r6
 8007222:	4650      	mov	r0, sl
 8007224:	f000 fd94 	bl	8007d50 <__mcmp>
 8007228:	2800      	cmp	r0, #0
 800722a:	da6c      	bge.n	8007306 <_dtoa_r+0x926>
 800722c:	2300      	movs	r3, #0
 800722e:	4651      	mov	r1, sl
 8007230:	220a      	movs	r2, #10
 8007232:	4620      	mov	r0, r4
 8007234:	f000 fb28 	bl	8007888 <__multadd>
 8007238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800723e:	4682      	mov	sl, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 81b0 	beq.w	80075a6 <_dtoa_r+0xbc6>
 8007246:	2300      	movs	r3, #0
 8007248:	4639      	mov	r1, r7
 800724a:	220a      	movs	r2, #10
 800724c:	4620      	mov	r0, r4
 800724e:	f000 fb1b 	bl	8007888 <__multadd>
 8007252:	9b01      	ldr	r3, [sp, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	4607      	mov	r7, r0
 8007258:	f300 8096 	bgt.w	8007388 <_dtoa_r+0x9a8>
 800725c:	9b07      	ldr	r3, [sp, #28]
 800725e:	2b02      	cmp	r3, #2
 8007260:	dc59      	bgt.n	8007316 <_dtoa_r+0x936>
 8007262:	e091      	b.n	8007388 <_dtoa_r+0x9a8>
 8007264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007266:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800726a:	e758      	b.n	800711e <_dtoa_r+0x73e>
 800726c:	9b04      	ldr	r3, [sp, #16]
 800726e:	1e5e      	subs	r6, r3, #1
 8007270:	9b08      	ldr	r3, [sp, #32]
 8007272:	42b3      	cmp	r3, r6
 8007274:	bfbf      	itttt	lt
 8007276:	9b08      	ldrlt	r3, [sp, #32]
 8007278:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800727a:	9608      	strlt	r6, [sp, #32]
 800727c:	1af3      	sublt	r3, r6, r3
 800727e:	bfb4      	ite	lt
 8007280:	18d2      	addlt	r2, r2, r3
 8007282:	1b9e      	subge	r6, r3, r6
 8007284:	9b04      	ldr	r3, [sp, #16]
 8007286:	bfbc      	itt	lt
 8007288:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800728a:	2600      	movlt	r6, #0
 800728c:	2b00      	cmp	r3, #0
 800728e:	bfb7      	itett	lt
 8007290:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007294:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007298:	1a9d      	sublt	r5, r3, r2
 800729a:	2300      	movlt	r3, #0
 800729c:	e741      	b.n	8007122 <_dtoa_r+0x742>
 800729e:	9e08      	ldr	r6, [sp, #32]
 80072a0:	9d05      	ldr	r5, [sp, #20]
 80072a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072a4:	e748      	b.n	8007138 <_dtoa_r+0x758>
 80072a6:	9a08      	ldr	r2, [sp, #32]
 80072a8:	e770      	b.n	800718c <_dtoa_r+0x7ac>
 80072aa:	9b07      	ldr	r3, [sp, #28]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	dc19      	bgt.n	80072e4 <_dtoa_r+0x904>
 80072b0:	9b02      	ldr	r3, [sp, #8]
 80072b2:	b9bb      	cbnz	r3, 80072e4 <_dtoa_r+0x904>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072ba:	b99b      	cbnz	r3, 80072e4 <_dtoa_r+0x904>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072c2:	0d1b      	lsrs	r3, r3, #20
 80072c4:	051b      	lsls	r3, r3, #20
 80072c6:	b183      	cbz	r3, 80072ea <_dtoa_r+0x90a>
 80072c8:	9b05      	ldr	r3, [sp, #20]
 80072ca:	3301      	adds	r3, #1
 80072cc:	9305      	str	r3, [sp, #20]
 80072ce:	9b06      	ldr	r3, [sp, #24]
 80072d0:	3301      	adds	r3, #1
 80072d2:	9306      	str	r3, [sp, #24]
 80072d4:	f04f 0801 	mov.w	r8, #1
 80072d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f47f af6f 	bne.w	80071be <_dtoa_r+0x7de>
 80072e0:	2001      	movs	r0, #1
 80072e2:	e774      	b.n	80071ce <_dtoa_r+0x7ee>
 80072e4:	f04f 0800 	mov.w	r8, #0
 80072e8:	e7f6      	b.n	80072d8 <_dtoa_r+0x8f8>
 80072ea:	4698      	mov	r8, r3
 80072ec:	e7f4      	b.n	80072d8 <_dtoa_r+0x8f8>
 80072ee:	d082      	beq.n	80071f6 <_dtoa_r+0x816>
 80072f0:	9a05      	ldr	r2, [sp, #20]
 80072f2:	331c      	adds	r3, #28
 80072f4:	441a      	add	r2, r3
 80072f6:	9205      	str	r2, [sp, #20]
 80072f8:	9a06      	ldr	r2, [sp, #24]
 80072fa:	441a      	add	r2, r3
 80072fc:	441d      	add	r5, r3
 80072fe:	9206      	str	r2, [sp, #24]
 8007300:	e779      	b.n	80071f6 <_dtoa_r+0x816>
 8007302:	4603      	mov	r3, r0
 8007304:	e7f4      	b.n	80072f0 <_dtoa_r+0x910>
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	dc37      	bgt.n	800737c <_dtoa_r+0x99c>
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	2b02      	cmp	r3, #2
 8007310:	dd34      	ble.n	800737c <_dtoa_r+0x99c>
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	9b01      	ldr	r3, [sp, #4]
 8007318:	b963      	cbnz	r3, 8007334 <_dtoa_r+0x954>
 800731a:	4631      	mov	r1, r6
 800731c:	2205      	movs	r2, #5
 800731e:	4620      	mov	r0, r4
 8007320:	f000 fab2 	bl	8007888 <__multadd>
 8007324:	4601      	mov	r1, r0
 8007326:	4606      	mov	r6, r0
 8007328:	4650      	mov	r0, sl
 800732a:	f000 fd11 	bl	8007d50 <__mcmp>
 800732e:	2800      	cmp	r0, #0
 8007330:	f73f adbb 	bgt.w	8006eaa <_dtoa_r+0x4ca>
 8007334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007336:	9d00      	ldr	r5, [sp, #0]
 8007338:	ea6f 0b03 	mvn.w	fp, r3
 800733c:	f04f 0800 	mov.w	r8, #0
 8007340:	4631      	mov	r1, r6
 8007342:	4620      	mov	r0, r4
 8007344:	f000 fa7e 	bl	8007844 <_Bfree>
 8007348:	2f00      	cmp	r7, #0
 800734a:	f43f aeab 	beq.w	80070a4 <_dtoa_r+0x6c4>
 800734e:	f1b8 0f00 	cmp.w	r8, #0
 8007352:	d005      	beq.n	8007360 <_dtoa_r+0x980>
 8007354:	45b8      	cmp	r8, r7
 8007356:	d003      	beq.n	8007360 <_dtoa_r+0x980>
 8007358:	4641      	mov	r1, r8
 800735a:	4620      	mov	r0, r4
 800735c:	f000 fa72 	bl	8007844 <_Bfree>
 8007360:	4639      	mov	r1, r7
 8007362:	4620      	mov	r0, r4
 8007364:	f000 fa6e 	bl	8007844 <_Bfree>
 8007368:	e69c      	b.n	80070a4 <_dtoa_r+0x6c4>
 800736a:	2600      	movs	r6, #0
 800736c:	4637      	mov	r7, r6
 800736e:	e7e1      	b.n	8007334 <_dtoa_r+0x954>
 8007370:	46bb      	mov	fp, r7
 8007372:	4637      	mov	r7, r6
 8007374:	e599      	b.n	8006eaa <_dtoa_r+0x4ca>
 8007376:	bf00      	nop
 8007378:	40240000 	.word	0x40240000
 800737c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 80c8 	beq.w	8007514 <_dtoa_r+0xb34>
 8007384:	9b04      	ldr	r3, [sp, #16]
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	2d00      	cmp	r5, #0
 800738a:	dd05      	ble.n	8007398 <_dtoa_r+0x9b8>
 800738c:	4639      	mov	r1, r7
 800738e:	462a      	mov	r2, r5
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fc71 	bl	8007c78 <__lshift>
 8007396:	4607      	mov	r7, r0
 8007398:	f1b8 0f00 	cmp.w	r8, #0
 800739c:	d05b      	beq.n	8007456 <_dtoa_r+0xa76>
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 fa0f 	bl	80077c4 <_Balloc>
 80073a6:	4605      	mov	r5, r0
 80073a8:	b928      	cbnz	r0, 80073b6 <_dtoa_r+0x9d6>
 80073aa:	4b83      	ldr	r3, [pc, #524]	; (80075b8 <_dtoa_r+0xbd8>)
 80073ac:	4602      	mov	r2, r0
 80073ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80073b2:	f7ff bb2e 	b.w	8006a12 <_dtoa_r+0x32>
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	3202      	adds	r2, #2
 80073ba:	0092      	lsls	r2, r2, #2
 80073bc:	f107 010c 	add.w	r1, r7, #12
 80073c0:	300c      	adds	r0, #12
 80073c2:	f001 ff85 	bl	80092d0 <memcpy>
 80073c6:	2201      	movs	r2, #1
 80073c8:	4629      	mov	r1, r5
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 fc54 	bl	8007c78 <__lshift>
 80073d0:	9b00      	ldr	r3, [sp, #0]
 80073d2:	3301      	adds	r3, #1
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073da:	4413      	add	r3, r2
 80073dc:	9308      	str	r3, [sp, #32]
 80073de:	9b02      	ldr	r3, [sp, #8]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	46b8      	mov	r8, r7
 80073e6:	9306      	str	r3, [sp, #24]
 80073e8:	4607      	mov	r7, r0
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	4631      	mov	r1, r6
 80073ee:	3b01      	subs	r3, #1
 80073f0:	4650      	mov	r0, sl
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	f7ff fa6a 	bl	80068cc <quorem>
 80073f8:	4641      	mov	r1, r8
 80073fa:	9002      	str	r0, [sp, #8]
 80073fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007400:	4650      	mov	r0, sl
 8007402:	f000 fca5 	bl	8007d50 <__mcmp>
 8007406:	463a      	mov	r2, r7
 8007408:	9005      	str	r0, [sp, #20]
 800740a:	4631      	mov	r1, r6
 800740c:	4620      	mov	r0, r4
 800740e:	f000 fcbb 	bl	8007d88 <__mdiff>
 8007412:	68c2      	ldr	r2, [r0, #12]
 8007414:	4605      	mov	r5, r0
 8007416:	bb02      	cbnz	r2, 800745a <_dtoa_r+0xa7a>
 8007418:	4601      	mov	r1, r0
 800741a:	4650      	mov	r0, sl
 800741c:	f000 fc98 	bl	8007d50 <__mcmp>
 8007420:	4602      	mov	r2, r0
 8007422:	4629      	mov	r1, r5
 8007424:	4620      	mov	r0, r4
 8007426:	9209      	str	r2, [sp, #36]	; 0x24
 8007428:	f000 fa0c 	bl	8007844 <_Bfree>
 800742c:	9b07      	ldr	r3, [sp, #28]
 800742e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007430:	9d04      	ldr	r5, [sp, #16]
 8007432:	ea43 0102 	orr.w	r1, r3, r2
 8007436:	9b06      	ldr	r3, [sp, #24]
 8007438:	4319      	orrs	r1, r3
 800743a:	d110      	bne.n	800745e <_dtoa_r+0xa7e>
 800743c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007440:	d029      	beq.n	8007496 <_dtoa_r+0xab6>
 8007442:	9b05      	ldr	r3, [sp, #20]
 8007444:	2b00      	cmp	r3, #0
 8007446:	dd02      	ble.n	800744e <_dtoa_r+0xa6e>
 8007448:	9b02      	ldr	r3, [sp, #8]
 800744a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800744e:	9b01      	ldr	r3, [sp, #4]
 8007450:	f883 9000 	strb.w	r9, [r3]
 8007454:	e774      	b.n	8007340 <_dtoa_r+0x960>
 8007456:	4638      	mov	r0, r7
 8007458:	e7ba      	b.n	80073d0 <_dtoa_r+0x9f0>
 800745a:	2201      	movs	r2, #1
 800745c:	e7e1      	b.n	8007422 <_dtoa_r+0xa42>
 800745e:	9b05      	ldr	r3, [sp, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	db04      	blt.n	800746e <_dtoa_r+0xa8e>
 8007464:	9907      	ldr	r1, [sp, #28]
 8007466:	430b      	orrs	r3, r1
 8007468:	9906      	ldr	r1, [sp, #24]
 800746a:	430b      	orrs	r3, r1
 800746c:	d120      	bne.n	80074b0 <_dtoa_r+0xad0>
 800746e:	2a00      	cmp	r2, #0
 8007470:	dded      	ble.n	800744e <_dtoa_r+0xa6e>
 8007472:	4651      	mov	r1, sl
 8007474:	2201      	movs	r2, #1
 8007476:	4620      	mov	r0, r4
 8007478:	f000 fbfe 	bl	8007c78 <__lshift>
 800747c:	4631      	mov	r1, r6
 800747e:	4682      	mov	sl, r0
 8007480:	f000 fc66 	bl	8007d50 <__mcmp>
 8007484:	2800      	cmp	r0, #0
 8007486:	dc03      	bgt.n	8007490 <_dtoa_r+0xab0>
 8007488:	d1e1      	bne.n	800744e <_dtoa_r+0xa6e>
 800748a:	f019 0f01 	tst.w	r9, #1
 800748e:	d0de      	beq.n	800744e <_dtoa_r+0xa6e>
 8007490:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007494:	d1d8      	bne.n	8007448 <_dtoa_r+0xa68>
 8007496:	9a01      	ldr	r2, [sp, #4]
 8007498:	2339      	movs	r3, #57	; 0x39
 800749a:	7013      	strb	r3, [r2, #0]
 800749c:	462b      	mov	r3, r5
 800749e:	461d      	mov	r5, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074a6:	2a39      	cmp	r2, #57	; 0x39
 80074a8:	d06c      	beq.n	8007584 <_dtoa_r+0xba4>
 80074aa:	3201      	adds	r2, #1
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	e747      	b.n	8007340 <_dtoa_r+0x960>
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	dd07      	ble.n	80074c4 <_dtoa_r+0xae4>
 80074b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074b8:	d0ed      	beq.n	8007496 <_dtoa_r+0xab6>
 80074ba:	9a01      	ldr	r2, [sp, #4]
 80074bc:	f109 0301 	add.w	r3, r9, #1
 80074c0:	7013      	strb	r3, [r2, #0]
 80074c2:	e73d      	b.n	8007340 <_dtoa_r+0x960>
 80074c4:	9b04      	ldr	r3, [sp, #16]
 80074c6:	9a08      	ldr	r2, [sp, #32]
 80074c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d043      	beq.n	8007558 <_dtoa_r+0xb78>
 80074d0:	4651      	mov	r1, sl
 80074d2:	2300      	movs	r3, #0
 80074d4:	220a      	movs	r2, #10
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 f9d6 	bl	8007888 <__multadd>
 80074dc:	45b8      	cmp	r8, r7
 80074de:	4682      	mov	sl, r0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	f04f 020a 	mov.w	r2, #10
 80074e8:	4641      	mov	r1, r8
 80074ea:	4620      	mov	r0, r4
 80074ec:	d107      	bne.n	80074fe <_dtoa_r+0xb1e>
 80074ee:	f000 f9cb 	bl	8007888 <__multadd>
 80074f2:	4680      	mov	r8, r0
 80074f4:	4607      	mov	r7, r0
 80074f6:	9b04      	ldr	r3, [sp, #16]
 80074f8:	3301      	adds	r3, #1
 80074fa:	9304      	str	r3, [sp, #16]
 80074fc:	e775      	b.n	80073ea <_dtoa_r+0xa0a>
 80074fe:	f000 f9c3 	bl	8007888 <__multadd>
 8007502:	4639      	mov	r1, r7
 8007504:	4680      	mov	r8, r0
 8007506:	2300      	movs	r3, #0
 8007508:	220a      	movs	r2, #10
 800750a:	4620      	mov	r0, r4
 800750c:	f000 f9bc 	bl	8007888 <__multadd>
 8007510:	4607      	mov	r7, r0
 8007512:	e7f0      	b.n	80074f6 <_dtoa_r+0xb16>
 8007514:	9b04      	ldr	r3, [sp, #16]
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	9d00      	ldr	r5, [sp, #0]
 800751a:	4631      	mov	r1, r6
 800751c:	4650      	mov	r0, sl
 800751e:	f7ff f9d5 	bl	80068cc <quorem>
 8007522:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007526:	9b00      	ldr	r3, [sp, #0]
 8007528:	f805 9b01 	strb.w	r9, [r5], #1
 800752c:	1aea      	subs	r2, r5, r3
 800752e:	9b01      	ldr	r3, [sp, #4]
 8007530:	4293      	cmp	r3, r2
 8007532:	dd07      	ble.n	8007544 <_dtoa_r+0xb64>
 8007534:	4651      	mov	r1, sl
 8007536:	2300      	movs	r3, #0
 8007538:	220a      	movs	r2, #10
 800753a:	4620      	mov	r0, r4
 800753c:	f000 f9a4 	bl	8007888 <__multadd>
 8007540:	4682      	mov	sl, r0
 8007542:	e7ea      	b.n	800751a <_dtoa_r+0xb3a>
 8007544:	9b01      	ldr	r3, [sp, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	bfc8      	it	gt
 800754a:	461d      	movgt	r5, r3
 800754c:	9b00      	ldr	r3, [sp, #0]
 800754e:	bfd8      	it	le
 8007550:	2501      	movle	r5, #1
 8007552:	441d      	add	r5, r3
 8007554:	f04f 0800 	mov.w	r8, #0
 8007558:	4651      	mov	r1, sl
 800755a:	2201      	movs	r2, #1
 800755c:	4620      	mov	r0, r4
 800755e:	f000 fb8b 	bl	8007c78 <__lshift>
 8007562:	4631      	mov	r1, r6
 8007564:	4682      	mov	sl, r0
 8007566:	f000 fbf3 	bl	8007d50 <__mcmp>
 800756a:	2800      	cmp	r0, #0
 800756c:	dc96      	bgt.n	800749c <_dtoa_r+0xabc>
 800756e:	d102      	bne.n	8007576 <_dtoa_r+0xb96>
 8007570:	f019 0f01 	tst.w	r9, #1
 8007574:	d192      	bne.n	800749c <_dtoa_r+0xabc>
 8007576:	462b      	mov	r3, r5
 8007578:	461d      	mov	r5, r3
 800757a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800757e:	2a30      	cmp	r2, #48	; 0x30
 8007580:	d0fa      	beq.n	8007578 <_dtoa_r+0xb98>
 8007582:	e6dd      	b.n	8007340 <_dtoa_r+0x960>
 8007584:	9a00      	ldr	r2, [sp, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d189      	bne.n	800749e <_dtoa_r+0xabe>
 800758a:	f10b 0b01 	add.w	fp, fp, #1
 800758e:	2331      	movs	r3, #49	; 0x31
 8007590:	e796      	b.n	80074c0 <_dtoa_r+0xae0>
 8007592:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <_dtoa_r+0xbdc>)
 8007594:	f7ff ba99 	b.w	8006aca <_dtoa_r+0xea>
 8007598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800759a:	2b00      	cmp	r3, #0
 800759c:	f47f aa6d 	bne.w	8006a7a <_dtoa_r+0x9a>
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <_dtoa_r+0xbe0>)
 80075a2:	f7ff ba92 	b.w	8006aca <_dtoa_r+0xea>
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	dcb5      	bgt.n	8007518 <_dtoa_r+0xb38>
 80075ac:	9b07      	ldr	r3, [sp, #28]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	f73f aeb1 	bgt.w	8007316 <_dtoa_r+0x936>
 80075b4:	e7b0      	b.n	8007518 <_dtoa_r+0xb38>
 80075b6:	bf00      	nop
 80075b8:	0800a14d 	.word	0x0800a14d
 80075bc:	0800a0a8 	.word	0x0800a0a8
 80075c0:	0800a0d1 	.word	0x0800a0d1

080075c4 <_free_r>:
 80075c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075c6:	2900      	cmp	r1, #0
 80075c8:	d044      	beq.n	8007654 <_free_r+0x90>
 80075ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ce:	9001      	str	r0, [sp, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f1a1 0404 	sub.w	r4, r1, #4
 80075d6:	bfb8      	it	lt
 80075d8:	18e4      	addlt	r4, r4, r3
 80075da:	f000 f8e7 	bl	80077ac <__malloc_lock>
 80075de:	4a1e      	ldr	r2, [pc, #120]	; (8007658 <_free_r+0x94>)
 80075e0:	9801      	ldr	r0, [sp, #4]
 80075e2:	6813      	ldr	r3, [r2, #0]
 80075e4:	b933      	cbnz	r3, 80075f4 <_free_r+0x30>
 80075e6:	6063      	str	r3, [r4, #4]
 80075e8:	6014      	str	r4, [r2, #0]
 80075ea:	b003      	add	sp, #12
 80075ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075f0:	f000 b8e2 	b.w	80077b8 <__malloc_unlock>
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	d908      	bls.n	800760a <_free_r+0x46>
 80075f8:	6825      	ldr	r5, [r4, #0]
 80075fa:	1961      	adds	r1, r4, r5
 80075fc:	428b      	cmp	r3, r1
 80075fe:	bf01      	itttt	eq
 8007600:	6819      	ldreq	r1, [r3, #0]
 8007602:	685b      	ldreq	r3, [r3, #4]
 8007604:	1949      	addeq	r1, r1, r5
 8007606:	6021      	streq	r1, [r4, #0]
 8007608:	e7ed      	b.n	80075e6 <_free_r+0x22>
 800760a:	461a      	mov	r2, r3
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	b10b      	cbz	r3, 8007614 <_free_r+0x50>
 8007610:	42a3      	cmp	r3, r4
 8007612:	d9fa      	bls.n	800760a <_free_r+0x46>
 8007614:	6811      	ldr	r1, [r2, #0]
 8007616:	1855      	adds	r5, r2, r1
 8007618:	42a5      	cmp	r5, r4
 800761a:	d10b      	bne.n	8007634 <_free_r+0x70>
 800761c:	6824      	ldr	r4, [r4, #0]
 800761e:	4421      	add	r1, r4
 8007620:	1854      	adds	r4, r2, r1
 8007622:	42a3      	cmp	r3, r4
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	d1e0      	bne.n	80075ea <_free_r+0x26>
 8007628:	681c      	ldr	r4, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	6053      	str	r3, [r2, #4]
 800762e:	440c      	add	r4, r1
 8007630:	6014      	str	r4, [r2, #0]
 8007632:	e7da      	b.n	80075ea <_free_r+0x26>
 8007634:	d902      	bls.n	800763c <_free_r+0x78>
 8007636:	230c      	movs	r3, #12
 8007638:	6003      	str	r3, [r0, #0]
 800763a:	e7d6      	b.n	80075ea <_free_r+0x26>
 800763c:	6825      	ldr	r5, [r4, #0]
 800763e:	1961      	adds	r1, r4, r5
 8007640:	428b      	cmp	r3, r1
 8007642:	bf04      	itt	eq
 8007644:	6819      	ldreq	r1, [r3, #0]
 8007646:	685b      	ldreq	r3, [r3, #4]
 8007648:	6063      	str	r3, [r4, #4]
 800764a:	bf04      	itt	eq
 800764c:	1949      	addeq	r1, r1, r5
 800764e:	6021      	streq	r1, [r4, #0]
 8007650:	6054      	str	r4, [r2, #4]
 8007652:	e7ca      	b.n	80075ea <_free_r+0x26>
 8007654:	b003      	add	sp, #12
 8007656:	bd30      	pop	{r4, r5, pc}
 8007658:	200004e8 	.word	0x200004e8

0800765c <malloc>:
 800765c:	4b02      	ldr	r3, [pc, #8]	; (8007668 <malloc+0xc>)
 800765e:	4601      	mov	r1, r0
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	f000 b823 	b.w	80076ac <_malloc_r>
 8007666:	bf00      	nop
 8007668:	20000064 	.word	0x20000064

0800766c <sbrk_aligned>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4e0e      	ldr	r6, [pc, #56]	; (80076a8 <sbrk_aligned+0x3c>)
 8007670:	460c      	mov	r4, r1
 8007672:	6831      	ldr	r1, [r6, #0]
 8007674:	4605      	mov	r5, r0
 8007676:	b911      	cbnz	r1, 800767e <sbrk_aligned+0x12>
 8007678:	f001 fe1a 	bl	80092b0 <_sbrk_r>
 800767c:	6030      	str	r0, [r6, #0]
 800767e:	4621      	mov	r1, r4
 8007680:	4628      	mov	r0, r5
 8007682:	f001 fe15 	bl	80092b0 <_sbrk_r>
 8007686:	1c43      	adds	r3, r0, #1
 8007688:	d00a      	beq.n	80076a0 <sbrk_aligned+0x34>
 800768a:	1cc4      	adds	r4, r0, #3
 800768c:	f024 0403 	bic.w	r4, r4, #3
 8007690:	42a0      	cmp	r0, r4
 8007692:	d007      	beq.n	80076a4 <sbrk_aligned+0x38>
 8007694:	1a21      	subs	r1, r4, r0
 8007696:	4628      	mov	r0, r5
 8007698:	f001 fe0a 	bl	80092b0 <_sbrk_r>
 800769c:	3001      	adds	r0, #1
 800769e:	d101      	bne.n	80076a4 <sbrk_aligned+0x38>
 80076a0:	f04f 34ff 	mov.w	r4, #4294967295
 80076a4:	4620      	mov	r0, r4
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	200004ec 	.word	0x200004ec

080076ac <_malloc_r>:
 80076ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b0:	1ccd      	adds	r5, r1, #3
 80076b2:	f025 0503 	bic.w	r5, r5, #3
 80076b6:	3508      	adds	r5, #8
 80076b8:	2d0c      	cmp	r5, #12
 80076ba:	bf38      	it	cc
 80076bc:	250c      	movcc	r5, #12
 80076be:	2d00      	cmp	r5, #0
 80076c0:	4607      	mov	r7, r0
 80076c2:	db01      	blt.n	80076c8 <_malloc_r+0x1c>
 80076c4:	42a9      	cmp	r1, r5
 80076c6:	d905      	bls.n	80076d4 <_malloc_r+0x28>
 80076c8:	230c      	movs	r3, #12
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	2600      	movs	r6, #0
 80076ce:	4630      	mov	r0, r6
 80076d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077a8 <_malloc_r+0xfc>
 80076d8:	f000 f868 	bl	80077ac <__malloc_lock>
 80076dc:	f8d8 3000 	ldr.w	r3, [r8]
 80076e0:	461c      	mov	r4, r3
 80076e2:	bb5c      	cbnz	r4, 800773c <_malloc_r+0x90>
 80076e4:	4629      	mov	r1, r5
 80076e6:	4638      	mov	r0, r7
 80076e8:	f7ff ffc0 	bl	800766c <sbrk_aligned>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	4604      	mov	r4, r0
 80076f0:	d155      	bne.n	800779e <_malloc_r+0xf2>
 80076f2:	f8d8 4000 	ldr.w	r4, [r8]
 80076f6:	4626      	mov	r6, r4
 80076f8:	2e00      	cmp	r6, #0
 80076fa:	d145      	bne.n	8007788 <_malloc_r+0xdc>
 80076fc:	2c00      	cmp	r4, #0
 80076fe:	d048      	beq.n	8007792 <_malloc_r+0xe6>
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	4631      	mov	r1, r6
 8007704:	4638      	mov	r0, r7
 8007706:	eb04 0903 	add.w	r9, r4, r3
 800770a:	f001 fdd1 	bl	80092b0 <_sbrk_r>
 800770e:	4581      	cmp	r9, r0
 8007710:	d13f      	bne.n	8007792 <_malloc_r+0xe6>
 8007712:	6821      	ldr	r1, [r4, #0]
 8007714:	1a6d      	subs	r5, r5, r1
 8007716:	4629      	mov	r1, r5
 8007718:	4638      	mov	r0, r7
 800771a:	f7ff ffa7 	bl	800766c <sbrk_aligned>
 800771e:	3001      	adds	r0, #1
 8007720:	d037      	beq.n	8007792 <_malloc_r+0xe6>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	442b      	add	r3, r5
 8007726:	6023      	str	r3, [r4, #0]
 8007728:	f8d8 3000 	ldr.w	r3, [r8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d038      	beq.n	80077a2 <_malloc_r+0xf6>
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	42a2      	cmp	r2, r4
 8007734:	d12b      	bne.n	800778e <_malloc_r+0xe2>
 8007736:	2200      	movs	r2, #0
 8007738:	605a      	str	r2, [r3, #4]
 800773a:	e00f      	b.n	800775c <_malloc_r+0xb0>
 800773c:	6822      	ldr	r2, [r4, #0]
 800773e:	1b52      	subs	r2, r2, r5
 8007740:	d41f      	bmi.n	8007782 <_malloc_r+0xd6>
 8007742:	2a0b      	cmp	r2, #11
 8007744:	d917      	bls.n	8007776 <_malloc_r+0xca>
 8007746:	1961      	adds	r1, r4, r5
 8007748:	42a3      	cmp	r3, r4
 800774a:	6025      	str	r5, [r4, #0]
 800774c:	bf18      	it	ne
 800774e:	6059      	strne	r1, [r3, #4]
 8007750:	6863      	ldr	r3, [r4, #4]
 8007752:	bf08      	it	eq
 8007754:	f8c8 1000 	streq.w	r1, [r8]
 8007758:	5162      	str	r2, [r4, r5]
 800775a:	604b      	str	r3, [r1, #4]
 800775c:	4638      	mov	r0, r7
 800775e:	f104 060b 	add.w	r6, r4, #11
 8007762:	f000 f829 	bl	80077b8 <__malloc_unlock>
 8007766:	f026 0607 	bic.w	r6, r6, #7
 800776a:	1d23      	adds	r3, r4, #4
 800776c:	1af2      	subs	r2, r6, r3
 800776e:	d0ae      	beq.n	80076ce <_malloc_r+0x22>
 8007770:	1b9b      	subs	r3, r3, r6
 8007772:	50a3      	str	r3, [r4, r2]
 8007774:	e7ab      	b.n	80076ce <_malloc_r+0x22>
 8007776:	42a3      	cmp	r3, r4
 8007778:	6862      	ldr	r2, [r4, #4]
 800777a:	d1dd      	bne.n	8007738 <_malloc_r+0x8c>
 800777c:	f8c8 2000 	str.w	r2, [r8]
 8007780:	e7ec      	b.n	800775c <_malloc_r+0xb0>
 8007782:	4623      	mov	r3, r4
 8007784:	6864      	ldr	r4, [r4, #4]
 8007786:	e7ac      	b.n	80076e2 <_malloc_r+0x36>
 8007788:	4634      	mov	r4, r6
 800778a:	6876      	ldr	r6, [r6, #4]
 800778c:	e7b4      	b.n	80076f8 <_malloc_r+0x4c>
 800778e:	4613      	mov	r3, r2
 8007790:	e7cc      	b.n	800772c <_malloc_r+0x80>
 8007792:	230c      	movs	r3, #12
 8007794:	603b      	str	r3, [r7, #0]
 8007796:	4638      	mov	r0, r7
 8007798:	f000 f80e 	bl	80077b8 <__malloc_unlock>
 800779c:	e797      	b.n	80076ce <_malloc_r+0x22>
 800779e:	6025      	str	r5, [r4, #0]
 80077a0:	e7dc      	b.n	800775c <_malloc_r+0xb0>
 80077a2:	605b      	str	r3, [r3, #4]
 80077a4:	deff      	udf	#255	; 0xff
 80077a6:	bf00      	nop
 80077a8:	200004e8 	.word	0x200004e8

080077ac <__malloc_lock>:
 80077ac:	4801      	ldr	r0, [pc, #4]	; (80077b4 <__malloc_lock+0x8>)
 80077ae:	f7ff b884 	b.w	80068ba <__retarget_lock_acquire_recursive>
 80077b2:	bf00      	nop
 80077b4:	200004e4 	.word	0x200004e4

080077b8 <__malloc_unlock>:
 80077b8:	4801      	ldr	r0, [pc, #4]	; (80077c0 <__malloc_unlock+0x8>)
 80077ba:	f7ff b87f 	b.w	80068bc <__retarget_lock_release_recursive>
 80077be:	bf00      	nop
 80077c0:	200004e4 	.word	0x200004e4

080077c4 <_Balloc>:
 80077c4:	b570      	push	{r4, r5, r6, lr}
 80077c6:	69c6      	ldr	r6, [r0, #28]
 80077c8:	4604      	mov	r4, r0
 80077ca:	460d      	mov	r5, r1
 80077cc:	b976      	cbnz	r6, 80077ec <_Balloc+0x28>
 80077ce:	2010      	movs	r0, #16
 80077d0:	f7ff ff44 	bl	800765c <malloc>
 80077d4:	4602      	mov	r2, r0
 80077d6:	61e0      	str	r0, [r4, #28]
 80077d8:	b920      	cbnz	r0, 80077e4 <_Balloc+0x20>
 80077da:	4b18      	ldr	r3, [pc, #96]	; (800783c <_Balloc+0x78>)
 80077dc:	4818      	ldr	r0, [pc, #96]	; (8007840 <_Balloc+0x7c>)
 80077de:	216b      	movs	r1, #107	; 0x6b
 80077e0:	f001 fd8e 	bl	8009300 <__assert_func>
 80077e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077e8:	6006      	str	r6, [r0, #0]
 80077ea:	60c6      	str	r6, [r0, #12]
 80077ec:	69e6      	ldr	r6, [r4, #28]
 80077ee:	68f3      	ldr	r3, [r6, #12]
 80077f0:	b183      	cbz	r3, 8007814 <_Balloc+0x50>
 80077f2:	69e3      	ldr	r3, [r4, #28]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077fa:	b9b8      	cbnz	r0, 800782c <_Balloc+0x68>
 80077fc:	2101      	movs	r1, #1
 80077fe:	fa01 f605 	lsl.w	r6, r1, r5
 8007802:	1d72      	adds	r2, r6, #5
 8007804:	0092      	lsls	r2, r2, #2
 8007806:	4620      	mov	r0, r4
 8007808:	f001 fd98 	bl	800933c <_calloc_r>
 800780c:	b160      	cbz	r0, 8007828 <_Balloc+0x64>
 800780e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007812:	e00e      	b.n	8007832 <_Balloc+0x6e>
 8007814:	2221      	movs	r2, #33	; 0x21
 8007816:	2104      	movs	r1, #4
 8007818:	4620      	mov	r0, r4
 800781a:	f001 fd8f 	bl	800933c <_calloc_r>
 800781e:	69e3      	ldr	r3, [r4, #28]
 8007820:	60f0      	str	r0, [r6, #12]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e4      	bne.n	80077f2 <_Balloc+0x2e>
 8007828:	2000      	movs	r0, #0
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	6802      	ldr	r2, [r0, #0]
 800782e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007832:	2300      	movs	r3, #0
 8007834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007838:	e7f7      	b.n	800782a <_Balloc+0x66>
 800783a:	bf00      	nop
 800783c:	0800a0de 	.word	0x0800a0de
 8007840:	0800a15e 	.word	0x0800a15e

08007844 <_Bfree>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	69c6      	ldr	r6, [r0, #28]
 8007848:	4605      	mov	r5, r0
 800784a:	460c      	mov	r4, r1
 800784c:	b976      	cbnz	r6, 800786c <_Bfree+0x28>
 800784e:	2010      	movs	r0, #16
 8007850:	f7ff ff04 	bl	800765c <malloc>
 8007854:	4602      	mov	r2, r0
 8007856:	61e8      	str	r0, [r5, #28]
 8007858:	b920      	cbnz	r0, 8007864 <_Bfree+0x20>
 800785a:	4b09      	ldr	r3, [pc, #36]	; (8007880 <_Bfree+0x3c>)
 800785c:	4809      	ldr	r0, [pc, #36]	; (8007884 <_Bfree+0x40>)
 800785e:	218f      	movs	r1, #143	; 0x8f
 8007860:	f001 fd4e 	bl	8009300 <__assert_func>
 8007864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007868:	6006      	str	r6, [r0, #0]
 800786a:	60c6      	str	r6, [r0, #12]
 800786c:	b13c      	cbz	r4, 800787e <_Bfree+0x3a>
 800786e:	69eb      	ldr	r3, [r5, #28]
 8007870:	6862      	ldr	r2, [r4, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007878:	6021      	str	r1, [r4, #0]
 800787a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800787e:	bd70      	pop	{r4, r5, r6, pc}
 8007880:	0800a0de 	.word	0x0800a0de
 8007884:	0800a15e 	.word	0x0800a15e

08007888 <__multadd>:
 8007888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800788c:	690d      	ldr	r5, [r1, #16]
 800788e:	4607      	mov	r7, r0
 8007890:	460c      	mov	r4, r1
 8007892:	461e      	mov	r6, r3
 8007894:	f101 0c14 	add.w	ip, r1, #20
 8007898:	2000      	movs	r0, #0
 800789a:	f8dc 3000 	ldr.w	r3, [ip]
 800789e:	b299      	uxth	r1, r3
 80078a0:	fb02 6101 	mla	r1, r2, r1, r6
 80078a4:	0c1e      	lsrs	r6, r3, #16
 80078a6:	0c0b      	lsrs	r3, r1, #16
 80078a8:	fb02 3306 	mla	r3, r2, r6, r3
 80078ac:	b289      	uxth	r1, r1
 80078ae:	3001      	adds	r0, #1
 80078b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078b4:	4285      	cmp	r5, r0
 80078b6:	f84c 1b04 	str.w	r1, [ip], #4
 80078ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078be:	dcec      	bgt.n	800789a <__multadd+0x12>
 80078c0:	b30e      	cbz	r6, 8007906 <__multadd+0x7e>
 80078c2:	68a3      	ldr	r3, [r4, #8]
 80078c4:	42ab      	cmp	r3, r5
 80078c6:	dc19      	bgt.n	80078fc <__multadd+0x74>
 80078c8:	6861      	ldr	r1, [r4, #4]
 80078ca:	4638      	mov	r0, r7
 80078cc:	3101      	adds	r1, #1
 80078ce:	f7ff ff79 	bl	80077c4 <_Balloc>
 80078d2:	4680      	mov	r8, r0
 80078d4:	b928      	cbnz	r0, 80078e2 <__multadd+0x5a>
 80078d6:	4602      	mov	r2, r0
 80078d8:	4b0c      	ldr	r3, [pc, #48]	; (800790c <__multadd+0x84>)
 80078da:	480d      	ldr	r0, [pc, #52]	; (8007910 <__multadd+0x88>)
 80078dc:	21ba      	movs	r1, #186	; 0xba
 80078de:	f001 fd0f 	bl	8009300 <__assert_func>
 80078e2:	6922      	ldr	r2, [r4, #16]
 80078e4:	3202      	adds	r2, #2
 80078e6:	f104 010c 	add.w	r1, r4, #12
 80078ea:	0092      	lsls	r2, r2, #2
 80078ec:	300c      	adds	r0, #12
 80078ee:	f001 fcef 	bl	80092d0 <memcpy>
 80078f2:	4621      	mov	r1, r4
 80078f4:	4638      	mov	r0, r7
 80078f6:	f7ff ffa5 	bl	8007844 <_Bfree>
 80078fa:	4644      	mov	r4, r8
 80078fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007900:	3501      	adds	r5, #1
 8007902:	615e      	str	r6, [r3, #20]
 8007904:	6125      	str	r5, [r4, #16]
 8007906:	4620      	mov	r0, r4
 8007908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800790c:	0800a14d 	.word	0x0800a14d
 8007910:	0800a15e 	.word	0x0800a15e

08007914 <__s2b>:
 8007914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007918:	460c      	mov	r4, r1
 800791a:	4615      	mov	r5, r2
 800791c:	461f      	mov	r7, r3
 800791e:	2209      	movs	r2, #9
 8007920:	3308      	adds	r3, #8
 8007922:	4606      	mov	r6, r0
 8007924:	fb93 f3f2 	sdiv	r3, r3, r2
 8007928:	2100      	movs	r1, #0
 800792a:	2201      	movs	r2, #1
 800792c:	429a      	cmp	r2, r3
 800792e:	db09      	blt.n	8007944 <__s2b+0x30>
 8007930:	4630      	mov	r0, r6
 8007932:	f7ff ff47 	bl	80077c4 <_Balloc>
 8007936:	b940      	cbnz	r0, 800794a <__s2b+0x36>
 8007938:	4602      	mov	r2, r0
 800793a:	4b19      	ldr	r3, [pc, #100]	; (80079a0 <__s2b+0x8c>)
 800793c:	4819      	ldr	r0, [pc, #100]	; (80079a4 <__s2b+0x90>)
 800793e:	21d3      	movs	r1, #211	; 0xd3
 8007940:	f001 fcde 	bl	8009300 <__assert_func>
 8007944:	0052      	lsls	r2, r2, #1
 8007946:	3101      	adds	r1, #1
 8007948:	e7f0      	b.n	800792c <__s2b+0x18>
 800794a:	9b08      	ldr	r3, [sp, #32]
 800794c:	6143      	str	r3, [r0, #20]
 800794e:	2d09      	cmp	r5, #9
 8007950:	f04f 0301 	mov.w	r3, #1
 8007954:	6103      	str	r3, [r0, #16]
 8007956:	dd16      	ble.n	8007986 <__s2b+0x72>
 8007958:	f104 0909 	add.w	r9, r4, #9
 800795c:	46c8      	mov	r8, r9
 800795e:	442c      	add	r4, r5
 8007960:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007964:	4601      	mov	r1, r0
 8007966:	3b30      	subs	r3, #48	; 0x30
 8007968:	220a      	movs	r2, #10
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff ff8c 	bl	8007888 <__multadd>
 8007970:	45a0      	cmp	r8, r4
 8007972:	d1f5      	bne.n	8007960 <__s2b+0x4c>
 8007974:	f1a5 0408 	sub.w	r4, r5, #8
 8007978:	444c      	add	r4, r9
 800797a:	1b2d      	subs	r5, r5, r4
 800797c:	1963      	adds	r3, r4, r5
 800797e:	42bb      	cmp	r3, r7
 8007980:	db04      	blt.n	800798c <__s2b+0x78>
 8007982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007986:	340a      	adds	r4, #10
 8007988:	2509      	movs	r5, #9
 800798a:	e7f6      	b.n	800797a <__s2b+0x66>
 800798c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007990:	4601      	mov	r1, r0
 8007992:	3b30      	subs	r3, #48	; 0x30
 8007994:	220a      	movs	r2, #10
 8007996:	4630      	mov	r0, r6
 8007998:	f7ff ff76 	bl	8007888 <__multadd>
 800799c:	e7ee      	b.n	800797c <__s2b+0x68>
 800799e:	bf00      	nop
 80079a0:	0800a14d 	.word	0x0800a14d
 80079a4:	0800a15e 	.word	0x0800a15e

080079a8 <__hi0bits>:
 80079a8:	0c03      	lsrs	r3, r0, #16
 80079aa:	041b      	lsls	r3, r3, #16
 80079ac:	b9d3      	cbnz	r3, 80079e4 <__hi0bits+0x3c>
 80079ae:	0400      	lsls	r0, r0, #16
 80079b0:	2310      	movs	r3, #16
 80079b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079b6:	bf04      	itt	eq
 80079b8:	0200      	lsleq	r0, r0, #8
 80079ba:	3308      	addeq	r3, #8
 80079bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079c0:	bf04      	itt	eq
 80079c2:	0100      	lsleq	r0, r0, #4
 80079c4:	3304      	addeq	r3, #4
 80079c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079ca:	bf04      	itt	eq
 80079cc:	0080      	lsleq	r0, r0, #2
 80079ce:	3302      	addeq	r3, #2
 80079d0:	2800      	cmp	r0, #0
 80079d2:	db05      	blt.n	80079e0 <__hi0bits+0x38>
 80079d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80079d8:	f103 0301 	add.w	r3, r3, #1
 80079dc:	bf08      	it	eq
 80079de:	2320      	moveq	r3, #32
 80079e0:	4618      	mov	r0, r3
 80079e2:	4770      	bx	lr
 80079e4:	2300      	movs	r3, #0
 80079e6:	e7e4      	b.n	80079b2 <__hi0bits+0xa>

080079e8 <__lo0bits>:
 80079e8:	6803      	ldr	r3, [r0, #0]
 80079ea:	f013 0207 	ands.w	r2, r3, #7
 80079ee:	d00c      	beq.n	8007a0a <__lo0bits+0x22>
 80079f0:	07d9      	lsls	r1, r3, #31
 80079f2:	d422      	bmi.n	8007a3a <__lo0bits+0x52>
 80079f4:	079a      	lsls	r2, r3, #30
 80079f6:	bf49      	itett	mi
 80079f8:	085b      	lsrmi	r3, r3, #1
 80079fa:	089b      	lsrpl	r3, r3, #2
 80079fc:	6003      	strmi	r3, [r0, #0]
 80079fe:	2201      	movmi	r2, #1
 8007a00:	bf5c      	itt	pl
 8007a02:	6003      	strpl	r3, [r0, #0]
 8007a04:	2202      	movpl	r2, #2
 8007a06:	4610      	mov	r0, r2
 8007a08:	4770      	bx	lr
 8007a0a:	b299      	uxth	r1, r3
 8007a0c:	b909      	cbnz	r1, 8007a12 <__lo0bits+0x2a>
 8007a0e:	0c1b      	lsrs	r3, r3, #16
 8007a10:	2210      	movs	r2, #16
 8007a12:	b2d9      	uxtb	r1, r3
 8007a14:	b909      	cbnz	r1, 8007a1a <__lo0bits+0x32>
 8007a16:	3208      	adds	r2, #8
 8007a18:	0a1b      	lsrs	r3, r3, #8
 8007a1a:	0719      	lsls	r1, r3, #28
 8007a1c:	bf04      	itt	eq
 8007a1e:	091b      	lsreq	r3, r3, #4
 8007a20:	3204      	addeq	r2, #4
 8007a22:	0799      	lsls	r1, r3, #30
 8007a24:	bf04      	itt	eq
 8007a26:	089b      	lsreq	r3, r3, #2
 8007a28:	3202      	addeq	r2, #2
 8007a2a:	07d9      	lsls	r1, r3, #31
 8007a2c:	d403      	bmi.n	8007a36 <__lo0bits+0x4e>
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	f102 0201 	add.w	r2, r2, #1
 8007a34:	d003      	beq.n	8007a3e <__lo0bits+0x56>
 8007a36:	6003      	str	r3, [r0, #0]
 8007a38:	e7e5      	b.n	8007a06 <__lo0bits+0x1e>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	e7e3      	b.n	8007a06 <__lo0bits+0x1e>
 8007a3e:	2220      	movs	r2, #32
 8007a40:	e7e1      	b.n	8007a06 <__lo0bits+0x1e>
	...

08007a44 <__i2b>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	460c      	mov	r4, r1
 8007a48:	2101      	movs	r1, #1
 8007a4a:	f7ff febb 	bl	80077c4 <_Balloc>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	b928      	cbnz	r0, 8007a5e <__i2b+0x1a>
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <__i2b+0x24>)
 8007a54:	4805      	ldr	r0, [pc, #20]	; (8007a6c <__i2b+0x28>)
 8007a56:	f240 1145 	movw	r1, #325	; 0x145
 8007a5a:	f001 fc51 	bl	8009300 <__assert_func>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	6144      	str	r4, [r0, #20]
 8007a62:	6103      	str	r3, [r0, #16]
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	bf00      	nop
 8007a68:	0800a14d 	.word	0x0800a14d
 8007a6c:	0800a15e 	.word	0x0800a15e

08007a70 <__multiply>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	4691      	mov	r9, r2
 8007a76:	690a      	ldr	r2, [r1, #16]
 8007a78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	bfb8      	it	lt
 8007a80:	460b      	movlt	r3, r1
 8007a82:	460c      	mov	r4, r1
 8007a84:	bfbc      	itt	lt
 8007a86:	464c      	movlt	r4, r9
 8007a88:	4699      	movlt	r9, r3
 8007a8a:	6927      	ldr	r7, [r4, #16]
 8007a8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a90:	68a3      	ldr	r3, [r4, #8]
 8007a92:	6861      	ldr	r1, [r4, #4]
 8007a94:	eb07 060a 	add.w	r6, r7, sl
 8007a98:	42b3      	cmp	r3, r6
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	bfb8      	it	lt
 8007a9e:	3101      	addlt	r1, #1
 8007aa0:	f7ff fe90 	bl	80077c4 <_Balloc>
 8007aa4:	b930      	cbnz	r0, 8007ab4 <__multiply+0x44>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	4b44      	ldr	r3, [pc, #272]	; (8007bbc <__multiply+0x14c>)
 8007aaa:	4845      	ldr	r0, [pc, #276]	; (8007bc0 <__multiply+0x150>)
 8007aac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007ab0:	f001 fc26 	bl	8009300 <__assert_func>
 8007ab4:	f100 0514 	add.w	r5, r0, #20
 8007ab8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007abc:	462b      	mov	r3, r5
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4543      	cmp	r3, r8
 8007ac2:	d321      	bcc.n	8007b08 <__multiply+0x98>
 8007ac4:	f104 0314 	add.w	r3, r4, #20
 8007ac8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007acc:	f109 0314 	add.w	r3, r9, #20
 8007ad0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ad4:	9202      	str	r2, [sp, #8]
 8007ad6:	1b3a      	subs	r2, r7, r4
 8007ad8:	3a15      	subs	r2, #21
 8007ada:	f022 0203 	bic.w	r2, r2, #3
 8007ade:	3204      	adds	r2, #4
 8007ae0:	f104 0115 	add.w	r1, r4, #21
 8007ae4:	428f      	cmp	r7, r1
 8007ae6:	bf38      	it	cc
 8007ae8:	2204      	movcc	r2, #4
 8007aea:	9201      	str	r2, [sp, #4]
 8007aec:	9a02      	ldr	r2, [sp, #8]
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d80c      	bhi.n	8007b0e <__multiply+0x9e>
 8007af4:	2e00      	cmp	r6, #0
 8007af6:	dd03      	ble.n	8007b00 <__multiply+0x90>
 8007af8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d05b      	beq.n	8007bb8 <__multiply+0x148>
 8007b00:	6106      	str	r6, [r0, #16]
 8007b02:	b005      	add	sp, #20
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	f843 2b04 	str.w	r2, [r3], #4
 8007b0c:	e7d8      	b.n	8007ac0 <__multiply+0x50>
 8007b0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b12:	f1ba 0f00 	cmp.w	sl, #0
 8007b16:	d024      	beq.n	8007b62 <__multiply+0xf2>
 8007b18:	f104 0e14 	add.w	lr, r4, #20
 8007b1c:	46a9      	mov	r9, r5
 8007b1e:	f04f 0c00 	mov.w	ip, #0
 8007b22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b26:	f8d9 1000 	ldr.w	r1, [r9]
 8007b2a:	fa1f fb82 	uxth.w	fp, r2
 8007b2e:	b289      	uxth	r1, r1
 8007b30:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b38:	f8d9 2000 	ldr.w	r2, [r9]
 8007b3c:	4461      	add	r1, ip
 8007b3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b42:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b4a:	b289      	uxth	r1, r1
 8007b4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b50:	4577      	cmp	r7, lr
 8007b52:	f849 1b04 	str.w	r1, [r9], #4
 8007b56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b5a:	d8e2      	bhi.n	8007b22 <__multiply+0xb2>
 8007b5c:	9a01      	ldr	r2, [sp, #4]
 8007b5e:	f845 c002 	str.w	ip, [r5, r2]
 8007b62:	9a03      	ldr	r2, [sp, #12]
 8007b64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	f1b9 0f00 	cmp.w	r9, #0
 8007b6e:	d021      	beq.n	8007bb4 <__multiply+0x144>
 8007b70:	6829      	ldr	r1, [r5, #0]
 8007b72:	f104 0c14 	add.w	ip, r4, #20
 8007b76:	46ae      	mov	lr, r5
 8007b78:	f04f 0a00 	mov.w	sl, #0
 8007b7c:	f8bc b000 	ldrh.w	fp, [ip]
 8007b80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b84:	fb09 220b 	mla	r2, r9, fp, r2
 8007b88:	4452      	add	r2, sl
 8007b8a:	b289      	uxth	r1, r1
 8007b8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b90:	f84e 1b04 	str.w	r1, [lr], #4
 8007b94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b9c:	f8be 1000 	ldrh.w	r1, [lr]
 8007ba0:	fb09 110a 	mla	r1, r9, sl, r1
 8007ba4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007ba8:	4567      	cmp	r7, ip
 8007baa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bae:	d8e5      	bhi.n	8007b7c <__multiply+0x10c>
 8007bb0:	9a01      	ldr	r2, [sp, #4]
 8007bb2:	50a9      	str	r1, [r5, r2]
 8007bb4:	3504      	adds	r5, #4
 8007bb6:	e799      	b.n	8007aec <__multiply+0x7c>
 8007bb8:	3e01      	subs	r6, #1
 8007bba:	e79b      	b.n	8007af4 <__multiply+0x84>
 8007bbc:	0800a14d 	.word	0x0800a14d
 8007bc0:	0800a15e 	.word	0x0800a15e

08007bc4 <__pow5mult>:
 8007bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	4615      	mov	r5, r2
 8007bca:	f012 0203 	ands.w	r2, r2, #3
 8007bce:	4606      	mov	r6, r0
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	d007      	beq.n	8007be4 <__pow5mult+0x20>
 8007bd4:	4c25      	ldr	r4, [pc, #148]	; (8007c6c <__pow5mult+0xa8>)
 8007bd6:	3a01      	subs	r2, #1
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bde:	f7ff fe53 	bl	8007888 <__multadd>
 8007be2:	4607      	mov	r7, r0
 8007be4:	10ad      	asrs	r5, r5, #2
 8007be6:	d03d      	beq.n	8007c64 <__pow5mult+0xa0>
 8007be8:	69f4      	ldr	r4, [r6, #28]
 8007bea:	b97c      	cbnz	r4, 8007c0c <__pow5mult+0x48>
 8007bec:	2010      	movs	r0, #16
 8007bee:	f7ff fd35 	bl	800765c <malloc>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	61f0      	str	r0, [r6, #28]
 8007bf6:	b928      	cbnz	r0, 8007c04 <__pow5mult+0x40>
 8007bf8:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <__pow5mult+0xac>)
 8007bfa:	481e      	ldr	r0, [pc, #120]	; (8007c74 <__pow5mult+0xb0>)
 8007bfc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007c00:	f001 fb7e 	bl	8009300 <__assert_func>
 8007c04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c08:	6004      	str	r4, [r0, #0]
 8007c0a:	60c4      	str	r4, [r0, #12]
 8007c0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007c10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c14:	b94c      	cbnz	r4, 8007c2a <__pow5mult+0x66>
 8007c16:	f240 2171 	movw	r1, #625	; 0x271
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7ff ff12 	bl	8007a44 <__i2b>
 8007c20:	2300      	movs	r3, #0
 8007c22:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c26:	4604      	mov	r4, r0
 8007c28:	6003      	str	r3, [r0, #0]
 8007c2a:	f04f 0900 	mov.w	r9, #0
 8007c2e:	07eb      	lsls	r3, r5, #31
 8007c30:	d50a      	bpl.n	8007c48 <__pow5mult+0x84>
 8007c32:	4639      	mov	r1, r7
 8007c34:	4622      	mov	r2, r4
 8007c36:	4630      	mov	r0, r6
 8007c38:	f7ff ff1a 	bl	8007a70 <__multiply>
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	4680      	mov	r8, r0
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7ff fdff 	bl	8007844 <_Bfree>
 8007c46:	4647      	mov	r7, r8
 8007c48:	106d      	asrs	r5, r5, #1
 8007c4a:	d00b      	beq.n	8007c64 <__pow5mult+0xa0>
 8007c4c:	6820      	ldr	r0, [r4, #0]
 8007c4e:	b938      	cbnz	r0, 8007c60 <__pow5mult+0x9c>
 8007c50:	4622      	mov	r2, r4
 8007c52:	4621      	mov	r1, r4
 8007c54:	4630      	mov	r0, r6
 8007c56:	f7ff ff0b 	bl	8007a70 <__multiply>
 8007c5a:	6020      	str	r0, [r4, #0]
 8007c5c:	f8c0 9000 	str.w	r9, [r0]
 8007c60:	4604      	mov	r4, r0
 8007c62:	e7e4      	b.n	8007c2e <__pow5mult+0x6a>
 8007c64:	4638      	mov	r0, r7
 8007c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c6a:	bf00      	nop
 8007c6c:	0800a2a8 	.word	0x0800a2a8
 8007c70:	0800a0de 	.word	0x0800a0de
 8007c74:	0800a15e 	.word	0x0800a15e

08007c78 <__lshift>:
 8007c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	6849      	ldr	r1, [r1, #4]
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c86:	68a3      	ldr	r3, [r4, #8]
 8007c88:	4607      	mov	r7, r0
 8007c8a:	4691      	mov	r9, r2
 8007c8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c90:	f108 0601 	add.w	r6, r8, #1
 8007c94:	42b3      	cmp	r3, r6
 8007c96:	db0b      	blt.n	8007cb0 <__lshift+0x38>
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff fd93 	bl	80077c4 <_Balloc>
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	b948      	cbnz	r0, 8007cb6 <__lshift+0x3e>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <__lshift+0xd0>)
 8007ca6:	4829      	ldr	r0, [pc, #164]	; (8007d4c <__lshift+0xd4>)
 8007ca8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007cac:	f001 fb28 	bl	8009300 <__assert_func>
 8007cb0:	3101      	adds	r1, #1
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	e7ee      	b.n	8007c94 <__lshift+0x1c>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f100 0114 	add.w	r1, r0, #20
 8007cbc:	f100 0210 	add.w	r2, r0, #16
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	4553      	cmp	r3, sl
 8007cc4:	db33      	blt.n	8007d2e <__lshift+0xb6>
 8007cc6:	6920      	ldr	r0, [r4, #16]
 8007cc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ccc:	f104 0314 	add.w	r3, r4, #20
 8007cd0:	f019 091f 	ands.w	r9, r9, #31
 8007cd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cdc:	d02b      	beq.n	8007d36 <__lshift+0xbe>
 8007cde:	f1c9 0e20 	rsb	lr, r9, #32
 8007ce2:	468a      	mov	sl, r1
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	fa00 f009 	lsl.w	r0, r0, r9
 8007cec:	4310      	orrs	r0, r2
 8007cee:	f84a 0b04 	str.w	r0, [sl], #4
 8007cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf6:	459c      	cmp	ip, r3
 8007cf8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cfc:	d8f3      	bhi.n	8007ce6 <__lshift+0x6e>
 8007cfe:	ebac 0304 	sub.w	r3, ip, r4
 8007d02:	3b15      	subs	r3, #21
 8007d04:	f023 0303 	bic.w	r3, r3, #3
 8007d08:	3304      	adds	r3, #4
 8007d0a:	f104 0015 	add.w	r0, r4, #21
 8007d0e:	4584      	cmp	ip, r0
 8007d10:	bf38      	it	cc
 8007d12:	2304      	movcc	r3, #4
 8007d14:	50ca      	str	r2, [r1, r3]
 8007d16:	b10a      	cbz	r2, 8007d1c <__lshift+0xa4>
 8007d18:	f108 0602 	add.w	r6, r8, #2
 8007d1c:	3e01      	subs	r6, #1
 8007d1e:	4638      	mov	r0, r7
 8007d20:	612e      	str	r6, [r5, #16]
 8007d22:	4621      	mov	r1, r4
 8007d24:	f7ff fd8e 	bl	8007844 <_Bfree>
 8007d28:	4628      	mov	r0, r5
 8007d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d32:	3301      	adds	r3, #1
 8007d34:	e7c5      	b.n	8007cc2 <__lshift+0x4a>
 8007d36:	3904      	subs	r1, #4
 8007d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d40:	459c      	cmp	ip, r3
 8007d42:	d8f9      	bhi.n	8007d38 <__lshift+0xc0>
 8007d44:	e7ea      	b.n	8007d1c <__lshift+0xa4>
 8007d46:	bf00      	nop
 8007d48:	0800a14d 	.word	0x0800a14d
 8007d4c:	0800a15e 	.word	0x0800a15e

08007d50 <__mcmp>:
 8007d50:	b530      	push	{r4, r5, lr}
 8007d52:	6902      	ldr	r2, [r0, #16]
 8007d54:	690c      	ldr	r4, [r1, #16]
 8007d56:	1b12      	subs	r2, r2, r4
 8007d58:	d10e      	bne.n	8007d78 <__mcmp+0x28>
 8007d5a:	f100 0314 	add.w	r3, r0, #20
 8007d5e:	3114      	adds	r1, #20
 8007d60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d70:	42a5      	cmp	r5, r4
 8007d72:	d003      	beq.n	8007d7c <__mcmp+0x2c>
 8007d74:	d305      	bcc.n	8007d82 <__mcmp+0x32>
 8007d76:	2201      	movs	r2, #1
 8007d78:	4610      	mov	r0, r2
 8007d7a:	bd30      	pop	{r4, r5, pc}
 8007d7c:	4283      	cmp	r3, r0
 8007d7e:	d3f3      	bcc.n	8007d68 <__mcmp+0x18>
 8007d80:	e7fa      	b.n	8007d78 <__mcmp+0x28>
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295
 8007d86:	e7f7      	b.n	8007d78 <__mcmp+0x28>

08007d88 <__mdiff>:
 8007d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	4606      	mov	r6, r0
 8007d90:	4611      	mov	r1, r2
 8007d92:	4620      	mov	r0, r4
 8007d94:	4690      	mov	r8, r2
 8007d96:	f7ff ffdb 	bl	8007d50 <__mcmp>
 8007d9a:	1e05      	subs	r5, r0, #0
 8007d9c:	d110      	bne.n	8007dc0 <__mdiff+0x38>
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff fd0f 	bl	80077c4 <_Balloc>
 8007da6:	b930      	cbnz	r0, 8007db6 <__mdiff+0x2e>
 8007da8:	4b3a      	ldr	r3, [pc, #232]	; (8007e94 <__mdiff+0x10c>)
 8007daa:	4602      	mov	r2, r0
 8007dac:	f240 2137 	movw	r1, #567	; 0x237
 8007db0:	4839      	ldr	r0, [pc, #228]	; (8007e98 <__mdiff+0x110>)
 8007db2:	f001 faa5 	bl	8009300 <__assert_func>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc0:	bfa4      	itt	ge
 8007dc2:	4643      	movge	r3, r8
 8007dc4:	46a0      	movge	r8, r4
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dcc:	bfa6      	itte	ge
 8007dce:	461c      	movge	r4, r3
 8007dd0:	2500      	movge	r5, #0
 8007dd2:	2501      	movlt	r5, #1
 8007dd4:	f7ff fcf6 	bl	80077c4 <_Balloc>
 8007dd8:	b920      	cbnz	r0, 8007de4 <__mdiff+0x5c>
 8007dda:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <__mdiff+0x10c>)
 8007ddc:	4602      	mov	r2, r0
 8007dde:	f240 2145 	movw	r1, #581	; 0x245
 8007de2:	e7e5      	b.n	8007db0 <__mdiff+0x28>
 8007de4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007de8:	6926      	ldr	r6, [r4, #16]
 8007dea:	60c5      	str	r5, [r0, #12]
 8007dec:	f104 0914 	add.w	r9, r4, #20
 8007df0:	f108 0514 	add.w	r5, r8, #20
 8007df4:	f100 0e14 	add.w	lr, r0, #20
 8007df8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007dfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e00:	f108 0210 	add.w	r2, r8, #16
 8007e04:	46f2      	mov	sl, lr
 8007e06:	2100      	movs	r1, #0
 8007e08:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e10:	fa11 f88b 	uxtah	r8, r1, fp
 8007e14:	b299      	uxth	r1, r3
 8007e16:	0c1b      	lsrs	r3, r3, #16
 8007e18:	eba8 0801 	sub.w	r8, r8, r1
 8007e1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e20:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e24:	fa1f f888 	uxth.w	r8, r8
 8007e28:	1419      	asrs	r1, r3, #16
 8007e2a:	454e      	cmp	r6, r9
 8007e2c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e30:	f84a 3b04 	str.w	r3, [sl], #4
 8007e34:	d8e8      	bhi.n	8007e08 <__mdiff+0x80>
 8007e36:	1b33      	subs	r3, r6, r4
 8007e38:	3b15      	subs	r3, #21
 8007e3a:	f023 0303 	bic.w	r3, r3, #3
 8007e3e:	3304      	adds	r3, #4
 8007e40:	3415      	adds	r4, #21
 8007e42:	42a6      	cmp	r6, r4
 8007e44:	bf38      	it	cc
 8007e46:	2304      	movcc	r3, #4
 8007e48:	441d      	add	r5, r3
 8007e4a:	4473      	add	r3, lr
 8007e4c:	469e      	mov	lr, r3
 8007e4e:	462e      	mov	r6, r5
 8007e50:	4566      	cmp	r6, ip
 8007e52:	d30e      	bcc.n	8007e72 <__mdiff+0xea>
 8007e54:	f10c 0203 	add.w	r2, ip, #3
 8007e58:	1b52      	subs	r2, r2, r5
 8007e5a:	f022 0203 	bic.w	r2, r2, #3
 8007e5e:	3d03      	subs	r5, #3
 8007e60:	45ac      	cmp	ip, r5
 8007e62:	bf38      	it	cc
 8007e64:	2200      	movcc	r2, #0
 8007e66:	4413      	add	r3, r2
 8007e68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e6c:	b17a      	cbz	r2, 8007e8e <__mdiff+0x106>
 8007e6e:	6107      	str	r7, [r0, #16]
 8007e70:	e7a4      	b.n	8007dbc <__mdiff+0x34>
 8007e72:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e76:	fa11 f288 	uxtah	r2, r1, r8
 8007e7a:	1414      	asrs	r4, r2, #16
 8007e7c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e80:	b292      	uxth	r2, r2
 8007e82:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e86:	f84e 2b04 	str.w	r2, [lr], #4
 8007e8a:	1421      	asrs	r1, r4, #16
 8007e8c:	e7e0      	b.n	8007e50 <__mdiff+0xc8>
 8007e8e:	3f01      	subs	r7, #1
 8007e90:	e7ea      	b.n	8007e68 <__mdiff+0xe0>
 8007e92:	bf00      	nop
 8007e94:	0800a14d 	.word	0x0800a14d
 8007e98:	0800a15e 	.word	0x0800a15e

08007e9c <__ulp>:
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	ed8d 0b00 	vstr	d0, [sp]
 8007ea2:	9a01      	ldr	r2, [sp, #4]
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <__ulp+0x48>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dc08      	bgt.n	8007ec2 <__ulp+0x26>
 8007eb0:	425b      	negs	r3, r3
 8007eb2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007eb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007eba:	da04      	bge.n	8007ec6 <__ulp+0x2a>
 8007ebc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ec0:	4113      	asrs	r3, r2
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	e008      	b.n	8007ed8 <__ulp+0x3c>
 8007ec6:	f1a2 0314 	sub.w	r3, r2, #20
 8007eca:	2b1e      	cmp	r3, #30
 8007ecc:	bfda      	itte	le
 8007ece:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007ed2:	40da      	lsrle	r2, r3
 8007ed4:	2201      	movgt	r2, #1
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4610      	mov	r0, r2
 8007edc:	ec41 0b10 	vmov	d0, r0, r1
 8007ee0:	b002      	add	sp, #8
 8007ee2:	4770      	bx	lr
 8007ee4:	7ff00000 	.word	0x7ff00000

08007ee8 <__b2d>:
 8007ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eec:	6906      	ldr	r6, [r0, #16]
 8007eee:	f100 0814 	add.w	r8, r0, #20
 8007ef2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007ef6:	1f37      	subs	r7, r6, #4
 8007ef8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007efc:	4610      	mov	r0, r2
 8007efe:	f7ff fd53 	bl	80079a8 <__hi0bits>
 8007f02:	f1c0 0320 	rsb	r3, r0, #32
 8007f06:	280a      	cmp	r0, #10
 8007f08:	600b      	str	r3, [r1, #0]
 8007f0a:	491b      	ldr	r1, [pc, #108]	; (8007f78 <__b2d+0x90>)
 8007f0c:	dc15      	bgt.n	8007f3a <__b2d+0x52>
 8007f0e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f12:	fa22 f30c 	lsr.w	r3, r2, ip
 8007f16:	45b8      	cmp	r8, r7
 8007f18:	ea43 0501 	orr.w	r5, r3, r1
 8007f1c:	bf34      	ite	cc
 8007f1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f22:	2300      	movcs	r3, #0
 8007f24:	3015      	adds	r0, #21
 8007f26:	fa02 f000 	lsl.w	r0, r2, r0
 8007f2a:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f2e:	4303      	orrs	r3, r0
 8007f30:	461c      	mov	r4, r3
 8007f32:	ec45 4b10 	vmov	d0, r4, r5
 8007f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f3a:	45b8      	cmp	r8, r7
 8007f3c:	bf3a      	itte	cc
 8007f3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f42:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f46:	2300      	movcs	r3, #0
 8007f48:	380b      	subs	r0, #11
 8007f4a:	d012      	beq.n	8007f72 <__b2d+0x8a>
 8007f4c:	f1c0 0120 	rsb	r1, r0, #32
 8007f50:	fa23 f401 	lsr.w	r4, r3, r1
 8007f54:	4082      	lsls	r2, r0
 8007f56:	4322      	orrs	r2, r4
 8007f58:	4547      	cmp	r7, r8
 8007f5a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007f5e:	bf8c      	ite	hi
 8007f60:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f64:	2200      	movls	r2, #0
 8007f66:	4083      	lsls	r3, r0
 8007f68:	40ca      	lsrs	r2, r1
 8007f6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	e7de      	b.n	8007f30 <__b2d+0x48>
 8007f72:	ea42 0501 	orr.w	r5, r2, r1
 8007f76:	e7db      	b.n	8007f30 <__b2d+0x48>
 8007f78:	3ff00000 	.word	0x3ff00000

08007f7c <__d2b>:
 8007f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f80:	460f      	mov	r7, r1
 8007f82:	2101      	movs	r1, #1
 8007f84:	ec59 8b10 	vmov	r8, r9, d0
 8007f88:	4616      	mov	r6, r2
 8007f8a:	f7ff fc1b 	bl	80077c4 <_Balloc>
 8007f8e:	4604      	mov	r4, r0
 8007f90:	b930      	cbnz	r0, 8007fa0 <__d2b+0x24>
 8007f92:	4602      	mov	r2, r0
 8007f94:	4b24      	ldr	r3, [pc, #144]	; (8008028 <__d2b+0xac>)
 8007f96:	4825      	ldr	r0, [pc, #148]	; (800802c <__d2b+0xb0>)
 8007f98:	f240 310f 	movw	r1, #783	; 0x30f
 8007f9c:	f001 f9b0 	bl	8009300 <__assert_func>
 8007fa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fa8:	bb2d      	cbnz	r5, 8007ff6 <__d2b+0x7a>
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	f1b8 0300 	subs.w	r3, r8, #0
 8007fb0:	d026      	beq.n	8008000 <__d2b+0x84>
 8007fb2:	4668      	mov	r0, sp
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	f7ff fd17 	bl	80079e8 <__lo0bits>
 8007fba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fbe:	b1e8      	cbz	r0, 8007ffc <__d2b+0x80>
 8007fc0:	f1c0 0320 	rsb	r3, r0, #32
 8007fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	40c2      	lsrs	r2, r0
 8007fcc:	6163      	str	r3, [r4, #20]
 8007fce:	9201      	str	r2, [sp, #4]
 8007fd0:	9b01      	ldr	r3, [sp, #4]
 8007fd2:	61a3      	str	r3, [r4, #24]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bf14      	ite	ne
 8007fd8:	2202      	movne	r2, #2
 8007fda:	2201      	moveq	r2, #1
 8007fdc:	6122      	str	r2, [r4, #16]
 8007fde:	b1bd      	cbz	r5, 8008010 <__d2b+0x94>
 8007fe0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007fe4:	4405      	add	r5, r0
 8007fe6:	603d      	str	r5, [r7, #0]
 8007fe8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fec:	6030      	str	r0, [r6, #0]
 8007fee:	4620      	mov	r0, r4
 8007ff0:	b003      	add	sp, #12
 8007ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ffa:	e7d6      	b.n	8007faa <__d2b+0x2e>
 8007ffc:	6161      	str	r1, [r4, #20]
 8007ffe:	e7e7      	b.n	8007fd0 <__d2b+0x54>
 8008000:	a801      	add	r0, sp, #4
 8008002:	f7ff fcf1 	bl	80079e8 <__lo0bits>
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	6163      	str	r3, [r4, #20]
 800800a:	3020      	adds	r0, #32
 800800c:	2201      	movs	r2, #1
 800800e:	e7e5      	b.n	8007fdc <__d2b+0x60>
 8008010:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008014:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008018:	6038      	str	r0, [r7, #0]
 800801a:	6918      	ldr	r0, [r3, #16]
 800801c:	f7ff fcc4 	bl	80079a8 <__hi0bits>
 8008020:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008024:	e7e2      	b.n	8007fec <__d2b+0x70>
 8008026:	bf00      	nop
 8008028:	0800a14d 	.word	0x0800a14d
 800802c:	0800a15e 	.word	0x0800a15e

08008030 <__ratio>:
 8008030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	4688      	mov	r8, r1
 8008036:	4669      	mov	r1, sp
 8008038:	4681      	mov	r9, r0
 800803a:	f7ff ff55 	bl	8007ee8 <__b2d>
 800803e:	a901      	add	r1, sp, #4
 8008040:	4640      	mov	r0, r8
 8008042:	ec55 4b10 	vmov	r4, r5, d0
 8008046:	f7ff ff4f 	bl	8007ee8 <__b2d>
 800804a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800804e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008052:	eba3 0c02 	sub.w	ip, r3, r2
 8008056:	e9dd 3200 	ldrd	r3, r2, [sp]
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008060:	ec51 0b10 	vmov	r0, r1, d0
 8008064:	2b00      	cmp	r3, #0
 8008066:	bfd6      	itet	le
 8008068:	460a      	movle	r2, r1
 800806a:	462a      	movgt	r2, r5
 800806c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008070:	468b      	mov	fp, r1
 8008072:	462f      	mov	r7, r5
 8008074:	bfd4      	ite	le
 8008076:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800807a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800807e:	4620      	mov	r0, r4
 8008080:	ee10 2a10 	vmov	r2, s0
 8008084:	465b      	mov	r3, fp
 8008086:	4639      	mov	r1, r7
 8008088:	f7f8 fbe0 	bl	800084c <__aeabi_ddiv>
 800808c:	ec41 0b10 	vmov	d0, r0, r1
 8008090:	b003      	add	sp, #12
 8008092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008096 <__copybits>:
 8008096:	3901      	subs	r1, #1
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	1149      	asrs	r1, r1, #5
 800809c:	6914      	ldr	r4, [r2, #16]
 800809e:	3101      	adds	r1, #1
 80080a0:	f102 0314 	add.w	r3, r2, #20
 80080a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080ac:	1f05      	subs	r5, r0, #4
 80080ae:	42a3      	cmp	r3, r4
 80080b0:	d30c      	bcc.n	80080cc <__copybits+0x36>
 80080b2:	1aa3      	subs	r3, r4, r2
 80080b4:	3b11      	subs	r3, #17
 80080b6:	f023 0303 	bic.w	r3, r3, #3
 80080ba:	3211      	adds	r2, #17
 80080bc:	42a2      	cmp	r2, r4
 80080be:	bf88      	it	hi
 80080c0:	2300      	movhi	r3, #0
 80080c2:	4418      	add	r0, r3
 80080c4:	2300      	movs	r3, #0
 80080c6:	4288      	cmp	r0, r1
 80080c8:	d305      	bcc.n	80080d6 <__copybits+0x40>
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80080d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80080d4:	e7eb      	b.n	80080ae <__copybits+0x18>
 80080d6:	f840 3b04 	str.w	r3, [r0], #4
 80080da:	e7f4      	b.n	80080c6 <__copybits+0x30>

080080dc <__any_on>:
 80080dc:	f100 0214 	add.w	r2, r0, #20
 80080e0:	6900      	ldr	r0, [r0, #16]
 80080e2:	114b      	asrs	r3, r1, #5
 80080e4:	4298      	cmp	r0, r3
 80080e6:	b510      	push	{r4, lr}
 80080e8:	db11      	blt.n	800810e <__any_on+0x32>
 80080ea:	dd0a      	ble.n	8008102 <__any_on+0x26>
 80080ec:	f011 011f 	ands.w	r1, r1, #31
 80080f0:	d007      	beq.n	8008102 <__any_on+0x26>
 80080f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080f6:	fa24 f001 	lsr.w	r0, r4, r1
 80080fa:	fa00 f101 	lsl.w	r1, r0, r1
 80080fe:	428c      	cmp	r4, r1
 8008100:	d10b      	bne.n	800811a <__any_on+0x3e>
 8008102:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008106:	4293      	cmp	r3, r2
 8008108:	d803      	bhi.n	8008112 <__any_on+0x36>
 800810a:	2000      	movs	r0, #0
 800810c:	bd10      	pop	{r4, pc}
 800810e:	4603      	mov	r3, r0
 8008110:	e7f7      	b.n	8008102 <__any_on+0x26>
 8008112:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008116:	2900      	cmp	r1, #0
 8008118:	d0f5      	beq.n	8008106 <__any_on+0x2a>
 800811a:	2001      	movs	r0, #1
 800811c:	e7f6      	b.n	800810c <__any_on+0x30>

0800811e <sulp>:
 800811e:	b570      	push	{r4, r5, r6, lr}
 8008120:	4604      	mov	r4, r0
 8008122:	460d      	mov	r5, r1
 8008124:	ec45 4b10 	vmov	d0, r4, r5
 8008128:	4616      	mov	r6, r2
 800812a:	f7ff feb7 	bl	8007e9c <__ulp>
 800812e:	ec51 0b10 	vmov	r0, r1, d0
 8008132:	b17e      	cbz	r6, 8008154 <sulp+0x36>
 8008134:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008138:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800813c:	2b00      	cmp	r3, #0
 800813e:	dd09      	ble.n	8008154 <sulp+0x36>
 8008140:	051b      	lsls	r3, r3, #20
 8008142:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008146:	2400      	movs	r4, #0
 8008148:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800814c:	4622      	mov	r2, r4
 800814e:	462b      	mov	r3, r5
 8008150:	f7f8 fa52 	bl	80005f8 <__aeabi_dmul>
 8008154:	bd70      	pop	{r4, r5, r6, pc}
	...

08008158 <_strtod_l>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	ed2d 8b02 	vpush	{d8}
 8008160:	b09b      	sub	sp, #108	; 0x6c
 8008162:	4604      	mov	r4, r0
 8008164:	9213      	str	r2, [sp, #76]	; 0x4c
 8008166:	2200      	movs	r2, #0
 8008168:	9216      	str	r2, [sp, #88]	; 0x58
 800816a:	460d      	mov	r5, r1
 800816c:	f04f 0800 	mov.w	r8, #0
 8008170:	f04f 0900 	mov.w	r9, #0
 8008174:	460a      	mov	r2, r1
 8008176:	9215      	str	r2, [sp, #84]	; 0x54
 8008178:	7811      	ldrb	r1, [r2, #0]
 800817a:	292b      	cmp	r1, #43	; 0x2b
 800817c:	d04c      	beq.n	8008218 <_strtod_l+0xc0>
 800817e:	d83a      	bhi.n	80081f6 <_strtod_l+0x9e>
 8008180:	290d      	cmp	r1, #13
 8008182:	d834      	bhi.n	80081ee <_strtod_l+0x96>
 8008184:	2908      	cmp	r1, #8
 8008186:	d834      	bhi.n	80081f2 <_strtod_l+0x9a>
 8008188:	2900      	cmp	r1, #0
 800818a:	d03d      	beq.n	8008208 <_strtod_l+0xb0>
 800818c:	2200      	movs	r2, #0
 800818e:	920a      	str	r2, [sp, #40]	; 0x28
 8008190:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008192:	7832      	ldrb	r2, [r6, #0]
 8008194:	2a30      	cmp	r2, #48	; 0x30
 8008196:	f040 80b4 	bne.w	8008302 <_strtod_l+0x1aa>
 800819a:	7872      	ldrb	r2, [r6, #1]
 800819c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80081a0:	2a58      	cmp	r2, #88	; 0x58
 80081a2:	d170      	bne.n	8008286 <_strtod_l+0x12e>
 80081a4:	9302      	str	r3, [sp, #8]
 80081a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	ab16      	add	r3, sp, #88	; 0x58
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	4a8e      	ldr	r2, [pc, #568]	; (80083e8 <_strtod_l+0x290>)
 80081b0:	ab17      	add	r3, sp, #92	; 0x5c
 80081b2:	a915      	add	r1, sp, #84	; 0x54
 80081b4:	4620      	mov	r0, r4
 80081b6:	f001 f93f 	bl	8009438 <__gethex>
 80081ba:	f010 070f 	ands.w	r7, r0, #15
 80081be:	4605      	mov	r5, r0
 80081c0:	d005      	beq.n	80081ce <_strtod_l+0x76>
 80081c2:	2f06      	cmp	r7, #6
 80081c4:	d12a      	bne.n	800821c <_strtod_l+0xc4>
 80081c6:	3601      	adds	r6, #1
 80081c8:	2300      	movs	r3, #0
 80081ca:	9615      	str	r6, [sp, #84]	; 0x54
 80081cc:	930a      	str	r3, [sp, #40]	; 0x28
 80081ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f040 857f 	bne.w	8008cd4 <_strtod_l+0xb7c>
 80081d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d8:	b1db      	cbz	r3, 8008212 <_strtod_l+0xba>
 80081da:	4642      	mov	r2, r8
 80081dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80081e0:	ec43 2b10 	vmov	d0, r2, r3
 80081e4:	b01b      	add	sp, #108	; 0x6c
 80081e6:	ecbd 8b02 	vpop	{d8}
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ee:	2920      	cmp	r1, #32
 80081f0:	d1cc      	bne.n	800818c <_strtod_l+0x34>
 80081f2:	3201      	adds	r2, #1
 80081f4:	e7bf      	b.n	8008176 <_strtod_l+0x1e>
 80081f6:	292d      	cmp	r1, #45	; 0x2d
 80081f8:	d1c8      	bne.n	800818c <_strtod_l+0x34>
 80081fa:	2101      	movs	r1, #1
 80081fc:	910a      	str	r1, [sp, #40]	; 0x28
 80081fe:	1c51      	adds	r1, r2, #1
 8008200:	9115      	str	r1, [sp, #84]	; 0x54
 8008202:	7852      	ldrb	r2, [r2, #1]
 8008204:	2a00      	cmp	r2, #0
 8008206:	d1c3      	bne.n	8008190 <_strtod_l+0x38>
 8008208:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800820a:	9515      	str	r5, [sp, #84]	; 0x54
 800820c:	2b00      	cmp	r3, #0
 800820e:	f040 855f 	bne.w	8008cd0 <_strtod_l+0xb78>
 8008212:	4642      	mov	r2, r8
 8008214:	464b      	mov	r3, r9
 8008216:	e7e3      	b.n	80081e0 <_strtod_l+0x88>
 8008218:	2100      	movs	r1, #0
 800821a:	e7ef      	b.n	80081fc <_strtod_l+0xa4>
 800821c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800821e:	b13a      	cbz	r2, 8008230 <_strtod_l+0xd8>
 8008220:	2135      	movs	r1, #53	; 0x35
 8008222:	a818      	add	r0, sp, #96	; 0x60
 8008224:	f7ff ff37 	bl	8008096 <__copybits>
 8008228:	9916      	ldr	r1, [sp, #88]	; 0x58
 800822a:	4620      	mov	r0, r4
 800822c:	f7ff fb0a 	bl	8007844 <_Bfree>
 8008230:	3f01      	subs	r7, #1
 8008232:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008234:	2f04      	cmp	r7, #4
 8008236:	d806      	bhi.n	8008246 <_strtod_l+0xee>
 8008238:	e8df f007 	tbb	[pc, r7]
 800823c:	201d0314 	.word	0x201d0314
 8008240:	14          	.byte	0x14
 8008241:	00          	.byte	0x00
 8008242:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008246:	05e9      	lsls	r1, r5, #23
 8008248:	bf48      	it	mi
 800824a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800824e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008252:	0d1b      	lsrs	r3, r3, #20
 8008254:	051b      	lsls	r3, r3, #20
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1b9      	bne.n	80081ce <_strtod_l+0x76>
 800825a:	f7fe fb03 	bl	8006864 <__errno>
 800825e:	2322      	movs	r3, #34	; 0x22
 8008260:	6003      	str	r3, [r0, #0]
 8008262:	e7b4      	b.n	80081ce <_strtod_l+0x76>
 8008264:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008268:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800826c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008270:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008274:	e7e7      	b.n	8008246 <_strtod_l+0xee>
 8008276:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80083f0 <_strtod_l+0x298>
 800827a:	e7e4      	b.n	8008246 <_strtod_l+0xee>
 800827c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008280:	f04f 38ff 	mov.w	r8, #4294967295
 8008284:	e7df      	b.n	8008246 <_strtod_l+0xee>
 8008286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	9215      	str	r2, [sp, #84]	; 0x54
 800828c:	785b      	ldrb	r3, [r3, #1]
 800828e:	2b30      	cmp	r3, #48	; 0x30
 8008290:	d0f9      	beq.n	8008286 <_strtod_l+0x12e>
 8008292:	2b00      	cmp	r3, #0
 8008294:	d09b      	beq.n	80081ce <_strtod_l+0x76>
 8008296:	2301      	movs	r3, #1
 8008298:	f04f 0a00 	mov.w	sl, #0
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80082a6:	46d3      	mov	fp, sl
 80082a8:	220a      	movs	r2, #10
 80082aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80082ac:	7806      	ldrb	r6, [r0, #0]
 80082ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80082b2:	b2d9      	uxtb	r1, r3
 80082b4:	2909      	cmp	r1, #9
 80082b6:	d926      	bls.n	8008306 <_strtod_l+0x1ae>
 80082b8:	494c      	ldr	r1, [pc, #304]	; (80083ec <_strtod_l+0x294>)
 80082ba:	2201      	movs	r2, #1
 80082bc:	f000 ffe6 	bl	800928c <strncmp>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d030      	beq.n	8008326 <_strtod_l+0x1ce>
 80082c4:	2000      	movs	r0, #0
 80082c6:	4632      	mov	r2, r6
 80082c8:	9005      	str	r0, [sp, #20]
 80082ca:	465e      	mov	r6, fp
 80082cc:	4603      	mov	r3, r0
 80082ce:	2a65      	cmp	r2, #101	; 0x65
 80082d0:	d001      	beq.n	80082d6 <_strtod_l+0x17e>
 80082d2:	2a45      	cmp	r2, #69	; 0x45
 80082d4:	d113      	bne.n	80082fe <_strtod_l+0x1a6>
 80082d6:	b91e      	cbnz	r6, 80082e0 <_strtod_l+0x188>
 80082d8:	9a04      	ldr	r2, [sp, #16]
 80082da:	4302      	orrs	r2, r0
 80082dc:	d094      	beq.n	8008208 <_strtod_l+0xb0>
 80082de:	2600      	movs	r6, #0
 80082e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80082e2:	1c6a      	adds	r2, r5, #1
 80082e4:	9215      	str	r2, [sp, #84]	; 0x54
 80082e6:	786a      	ldrb	r2, [r5, #1]
 80082e8:	2a2b      	cmp	r2, #43	; 0x2b
 80082ea:	d074      	beq.n	80083d6 <_strtod_l+0x27e>
 80082ec:	2a2d      	cmp	r2, #45	; 0x2d
 80082ee:	d078      	beq.n	80083e2 <_strtod_l+0x28a>
 80082f0:	f04f 0c00 	mov.w	ip, #0
 80082f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80082f8:	2909      	cmp	r1, #9
 80082fa:	d97f      	bls.n	80083fc <_strtod_l+0x2a4>
 80082fc:	9515      	str	r5, [sp, #84]	; 0x54
 80082fe:	2700      	movs	r7, #0
 8008300:	e09e      	b.n	8008440 <_strtod_l+0x2e8>
 8008302:	2300      	movs	r3, #0
 8008304:	e7c8      	b.n	8008298 <_strtod_l+0x140>
 8008306:	f1bb 0f08 	cmp.w	fp, #8
 800830a:	bfd8      	it	le
 800830c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800830e:	f100 0001 	add.w	r0, r0, #1
 8008312:	bfda      	itte	le
 8008314:	fb02 3301 	mlale	r3, r2, r1, r3
 8008318:	9309      	strle	r3, [sp, #36]	; 0x24
 800831a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800831e:	f10b 0b01 	add.w	fp, fp, #1
 8008322:	9015      	str	r0, [sp, #84]	; 0x54
 8008324:	e7c1      	b.n	80082aa <_strtod_l+0x152>
 8008326:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	9215      	str	r2, [sp, #84]	; 0x54
 800832c:	785a      	ldrb	r2, [r3, #1]
 800832e:	f1bb 0f00 	cmp.w	fp, #0
 8008332:	d037      	beq.n	80083a4 <_strtod_l+0x24c>
 8008334:	9005      	str	r0, [sp, #20]
 8008336:	465e      	mov	r6, fp
 8008338:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800833c:	2b09      	cmp	r3, #9
 800833e:	d912      	bls.n	8008366 <_strtod_l+0x20e>
 8008340:	2301      	movs	r3, #1
 8008342:	e7c4      	b.n	80082ce <_strtod_l+0x176>
 8008344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	9215      	str	r2, [sp, #84]	; 0x54
 800834a:	785a      	ldrb	r2, [r3, #1]
 800834c:	3001      	adds	r0, #1
 800834e:	2a30      	cmp	r2, #48	; 0x30
 8008350:	d0f8      	beq.n	8008344 <_strtod_l+0x1ec>
 8008352:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008356:	2b08      	cmp	r3, #8
 8008358:	f200 84c1 	bhi.w	8008cde <_strtod_l+0xb86>
 800835c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800835e:	9005      	str	r0, [sp, #20]
 8008360:	2000      	movs	r0, #0
 8008362:	930b      	str	r3, [sp, #44]	; 0x2c
 8008364:	4606      	mov	r6, r0
 8008366:	3a30      	subs	r2, #48	; 0x30
 8008368:	f100 0301 	add.w	r3, r0, #1
 800836c:	d014      	beq.n	8008398 <_strtod_l+0x240>
 800836e:	9905      	ldr	r1, [sp, #20]
 8008370:	4419      	add	r1, r3
 8008372:	9105      	str	r1, [sp, #20]
 8008374:	4633      	mov	r3, r6
 8008376:	eb00 0c06 	add.w	ip, r0, r6
 800837a:	210a      	movs	r1, #10
 800837c:	4563      	cmp	r3, ip
 800837e:	d113      	bne.n	80083a8 <_strtod_l+0x250>
 8008380:	1833      	adds	r3, r6, r0
 8008382:	2b08      	cmp	r3, #8
 8008384:	f106 0601 	add.w	r6, r6, #1
 8008388:	4406      	add	r6, r0
 800838a:	dc1a      	bgt.n	80083c2 <_strtod_l+0x26a>
 800838c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800838e:	230a      	movs	r3, #10
 8008390:	fb03 2301 	mla	r3, r3, r1, r2
 8008394:	9309      	str	r3, [sp, #36]	; 0x24
 8008396:	2300      	movs	r3, #0
 8008398:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800839a:	1c51      	adds	r1, r2, #1
 800839c:	9115      	str	r1, [sp, #84]	; 0x54
 800839e:	7852      	ldrb	r2, [r2, #1]
 80083a0:	4618      	mov	r0, r3
 80083a2:	e7c9      	b.n	8008338 <_strtod_l+0x1e0>
 80083a4:	4658      	mov	r0, fp
 80083a6:	e7d2      	b.n	800834e <_strtod_l+0x1f6>
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	f103 0301 	add.w	r3, r3, #1
 80083ae:	dc03      	bgt.n	80083b8 <_strtod_l+0x260>
 80083b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083b2:	434f      	muls	r7, r1
 80083b4:	9709      	str	r7, [sp, #36]	; 0x24
 80083b6:	e7e1      	b.n	800837c <_strtod_l+0x224>
 80083b8:	2b10      	cmp	r3, #16
 80083ba:	bfd8      	it	le
 80083bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80083c0:	e7dc      	b.n	800837c <_strtod_l+0x224>
 80083c2:	2e10      	cmp	r6, #16
 80083c4:	bfdc      	itt	le
 80083c6:	230a      	movle	r3, #10
 80083c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80083cc:	e7e3      	b.n	8008396 <_strtod_l+0x23e>
 80083ce:	2300      	movs	r3, #0
 80083d0:	9305      	str	r3, [sp, #20]
 80083d2:	2301      	movs	r3, #1
 80083d4:	e780      	b.n	80082d8 <_strtod_l+0x180>
 80083d6:	f04f 0c00 	mov.w	ip, #0
 80083da:	1caa      	adds	r2, r5, #2
 80083dc:	9215      	str	r2, [sp, #84]	; 0x54
 80083de:	78aa      	ldrb	r2, [r5, #2]
 80083e0:	e788      	b.n	80082f4 <_strtod_l+0x19c>
 80083e2:	f04f 0c01 	mov.w	ip, #1
 80083e6:	e7f8      	b.n	80083da <_strtod_l+0x282>
 80083e8:	0800a2b8 	.word	0x0800a2b8
 80083ec:	0800a2b4 	.word	0x0800a2b4
 80083f0:	7ff00000 	.word	0x7ff00000
 80083f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083f6:	1c51      	adds	r1, r2, #1
 80083f8:	9115      	str	r1, [sp, #84]	; 0x54
 80083fa:	7852      	ldrb	r2, [r2, #1]
 80083fc:	2a30      	cmp	r2, #48	; 0x30
 80083fe:	d0f9      	beq.n	80083f4 <_strtod_l+0x29c>
 8008400:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008404:	2908      	cmp	r1, #8
 8008406:	f63f af7a 	bhi.w	80082fe <_strtod_l+0x1a6>
 800840a:	3a30      	subs	r2, #48	; 0x30
 800840c:	9208      	str	r2, [sp, #32]
 800840e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008410:	920c      	str	r2, [sp, #48]	; 0x30
 8008412:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008414:	1c57      	adds	r7, r2, #1
 8008416:	9715      	str	r7, [sp, #84]	; 0x54
 8008418:	7852      	ldrb	r2, [r2, #1]
 800841a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800841e:	f1be 0f09 	cmp.w	lr, #9
 8008422:	d938      	bls.n	8008496 <_strtod_l+0x33e>
 8008424:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008426:	1a7f      	subs	r7, r7, r1
 8008428:	2f08      	cmp	r7, #8
 800842a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800842e:	dc03      	bgt.n	8008438 <_strtod_l+0x2e0>
 8008430:	9908      	ldr	r1, [sp, #32]
 8008432:	428f      	cmp	r7, r1
 8008434:	bfa8      	it	ge
 8008436:	460f      	movge	r7, r1
 8008438:	f1bc 0f00 	cmp.w	ip, #0
 800843c:	d000      	beq.n	8008440 <_strtod_l+0x2e8>
 800843e:	427f      	negs	r7, r7
 8008440:	2e00      	cmp	r6, #0
 8008442:	d14f      	bne.n	80084e4 <_strtod_l+0x38c>
 8008444:	9904      	ldr	r1, [sp, #16]
 8008446:	4301      	orrs	r1, r0
 8008448:	f47f aec1 	bne.w	80081ce <_strtod_l+0x76>
 800844c:	2b00      	cmp	r3, #0
 800844e:	f47f aedb 	bne.w	8008208 <_strtod_l+0xb0>
 8008452:	2a69      	cmp	r2, #105	; 0x69
 8008454:	d029      	beq.n	80084aa <_strtod_l+0x352>
 8008456:	dc26      	bgt.n	80084a6 <_strtod_l+0x34e>
 8008458:	2a49      	cmp	r2, #73	; 0x49
 800845a:	d026      	beq.n	80084aa <_strtod_l+0x352>
 800845c:	2a4e      	cmp	r2, #78	; 0x4e
 800845e:	f47f aed3 	bne.w	8008208 <_strtod_l+0xb0>
 8008462:	499b      	ldr	r1, [pc, #620]	; (80086d0 <_strtod_l+0x578>)
 8008464:	a815      	add	r0, sp, #84	; 0x54
 8008466:	f001 fa27 	bl	80098b8 <__match>
 800846a:	2800      	cmp	r0, #0
 800846c:	f43f aecc 	beq.w	8008208 <_strtod_l+0xb0>
 8008470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b28      	cmp	r3, #40	; 0x28
 8008476:	d12f      	bne.n	80084d8 <_strtod_l+0x380>
 8008478:	4996      	ldr	r1, [pc, #600]	; (80086d4 <_strtod_l+0x57c>)
 800847a:	aa18      	add	r2, sp, #96	; 0x60
 800847c:	a815      	add	r0, sp, #84	; 0x54
 800847e:	f001 fa2f 	bl	80098e0 <__hexnan>
 8008482:	2805      	cmp	r0, #5
 8008484:	d128      	bne.n	80084d8 <_strtod_l+0x380>
 8008486:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008488:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800848c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008490:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008494:	e69b      	b.n	80081ce <_strtod_l+0x76>
 8008496:	9f08      	ldr	r7, [sp, #32]
 8008498:	210a      	movs	r1, #10
 800849a:	fb01 2107 	mla	r1, r1, r7, r2
 800849e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80084a2:	9208      	str	r2, [sp, #32]
 80084a4:	e7b5      	b.n	8008412 <_strtod_l+0x2ba>
 80084a6:	2a6e      	cmp	r2, #110	; 0x6e
 80084a8:	e7d9      	b.n	800845e <_strtod_l+0x306>
 80084aa:	498b      	ldr	r1, [pc, #556]	; (80086d8 <_strtod_l+0x580>)
 80084ac:	a815      	add	r0, sp, #84	; 0x54
 80084ae:	f001 fa03 	bl	80098b8 <__match>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	f43f aea8 	beq.w	8008208 <_strtod_l+0xb0>
 80084b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ba:	4988      	ldr	r1, [pc, #544]	; (80086dc <_strtod_l+0x584>)
 80084bc:	3b01      	subs	r3, #1
 80084be:	a815      	add	r0, sp, #84	; 0x54
 80084c0:	9315      	str	r3, [sp, #84]	; 0x54
 80084c2:	f001 f9f9 	bl	80098b8 <__match>
 80084c6:	b910      	cbnz	r0, 80084ce <_strtod_l+0x376>
 80084c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ca:	3301      	adds	r3, #1
 80084cc:	9315      	str	r3, [sp, #84]	; 0x54
 80084ce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80086ec <_strtod_l+0x594>
 80084d2:	f04f 0800 	mov.w	r8, #0
 80084d6:	e67a      	b.n	80081ce <_strtod_l+0x76>
 80084d8:	4881      	ldr	r0, [pc, #516]	; (80086e0 <_strtod_l+0x588>)
 80084da:	f000 ff09 	bl	80092f0 <nan>
 80084de:	ec59 8b10 	vmov	r8, r9, d0
 80084e2:	e674      	b.n	80081ce <_strtod_l+0x76>
 80084e4:	9b05      	ldr	r3, [sp, #20]
 80084e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084e8:	1afb      	subs	r3, r7, r3
 80084ea:	f1bb 0f00 	cmp.w	fp, #0
 80084ee:	bf08      	it	eq
 80084f0:	46b3      	moveq	fp, r6
 80084f2:	2e10      	cmp	r6, #16
 80084f4:	9308      	str	r3, [sp, #32]
 80084f6:	4635      	mov	r5, r6
 80084f8:	bfa8      	it	ge
 80084fa:	2510      	movge	r5, #16
 80084fc:	f7f8 f802 	bl	8000504 <__aeabi_ui2d>
 8008500:	2e09      	cmp	r6, #9
 8008502:	4680      	mov	r8, r0
 8008504:	4689      	mov	r9, r1
 8008506:	dd13      	ble.n	8008530 <_strtod_l+0x3d8>
 8008508:	4b76      	ldr	r3, [pc, #472]	; (80086e4 <_strtod_l+0x58c>)
 800850a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800850e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008512:	f7f8 f871 	bl	80005f8 <__aeabi_dmul>
 8008516:	4680      	mov	r8, r0
 8008518:	4650      	mov	r0, sl
 800851a:	4689      	mov	r9, r1
 800851c:	f7f7 fff2 	bl	8000504 <__aeabi_ui2d>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4640      	mov	r0, r8
 8008526:	4649      	mov	r1, r9
 8008528:	f7f7 feb0 	bl	800028c <__adddf3>
 800852c:	4680      	mov	r8, r0
 800852e:	4689      	mov	r9, r1
 8008530:	2e0f      	cmp	r6, #15
 8008532:	dc38      	bgt.n	80085a6 <_strtod_l+0x44e>
 8008534:	9b08      	ldr	r3, [sp, #32]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f43f ae49 	beq.w	80081ce <_strtod_l+0x76>
 800853c:	dd24      	ble.n	8008588 <_strtod_l+0x430>
 800853e:	2b16      	cmp	r3, #22
 8008540:	dc0b      	bgt.n	800855a <_strtod_l+0x402>
 8008542:	4968      	ldr	r1, [pc, #416]	; (80086e4 <_strtod_l+0x58c>)
 8008544:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800854c:	4642      	mov	r2, r8
 800854e:	464b      	mov	r3, r9
 8008550:	f7f8 f852 	bl	80005f8 <__aeabi_dmul>
 8008554:	4680      	mov	r8, r0
 8008556:	4689      	mov	r9, r1
 8008558:	e639      	b.n	80081ce <_strtod_l+0x76>
 800855a:	9a08      	ldr	r2, [sp, #32]
 800855c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008560:	4293      	cmp	r3, r2
 8008562:	db20      	blt.n	80085a6 <_strtod_l+0x44e>
 8008564:	4c5f      	ldr	r4, [pc, #380]	; (80086e4 <_strtod_l+0x58c>)
 8008566:	f1c6 060f 	rsb	r6, r6, #15
 800856a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800856e:	4642      	mov	r2, r8
 8008570:	464b      	mov	r3, r9
 8008572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008576:	f7f8 f83f 	bl	80005f8 <__aeabi_dmul>
 800857a:	9b08      	ldr	r3, [sp, #32]
 800857c:	1b9e      	subs	r6, r3, r6
 800857e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008582:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008586:	e7e3      	b.n	8008550 <_strtod_l+0x3f8>
 8008588:	9b08      	ldr	r3, [sp, #32]
 800858a:	3316      	adds	r3, #22
 800858c:	db0b      	blt.n	80085a6 <_strtod_l+0x44e>
 800858e:	9b05      	ldr	r3, [sp, #20]
 8008590:	1bdf      	subs	r7, r3, r7
 8008592:	4b54      	ldr	r3, [pc, #336]	; (80086e4 <_strtod_l+0x58c>)
 8008594:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800859c:	4640      	mov	r0, r8
 800859e:	4649      	mov	r1, r9
 80085a0:	f7f8 f954 	bl	800084c <__aeabi_ddiv>
 80085a4:	e7d6      	b.n	8008554 <_strtod_l+0x3fc>
 80085a6:	9b08      	ldr	r3, [sp, #32]
 80085a8:	1b75      	subs	r5, r6, r5
 80085aa:	441d      	add	r5, r3
 80085ac:	2d00      	cmp	r5, #0
 80085ae:	dd70      	ble.n	8008692 <_strtod_l+0x53a>
 80085b0:	f015 030f 	ands.w	r3, r5, #15
 80085b4:	d00a      	beq.n	80085cc <_strtod_l+0x474>
 80085b6:	494b      	ldr	r1, [pc, #300]	; (80086e4 <_strtod_l+0x58c>)
 80085b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085bc:	4642      	mov	r2, r8
 80085be:	464b      	mov	r3, r9
 80085c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085c4:	f7f8 f818 	bl	80005f8 <__aeabi_dmul>
 80085c8:	4680      	mov	r8, r0
 80085ca:	4689      	mov	r9, r1
 80085cc:	f035 050f 	bics.w	r5, r5, #15
 80085d0:	d04d      	beq.n	800866e <_strtod_l+0x516>
 80085d2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80085d6:	dd22      	ble.n	800861e <_strtod_l+0x4c6>
 80085d8:	2500      	movs	r5, #0
 80085da:	46ab      	mov	fp, r5
 80085dc:	9509      	str	r5, [sp, #36]	; 0x24
 80085de:	9505      	str	r5, [sp, #20]
 80085e0:	2322      	movs	r3, #34	; 0x22
 80085e2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80086ec <_strtod_l+0x594>
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	f04f 0800 	mov.w	r8, #0
 80085ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f43f aded 	beq.w	80081ce <_strtod_l+0x76>
 80085f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085f6:	4620      	mov	r0, r4
 80085f8:	f7ff f924 	bl	8007844 <_Bfree>
 80085fc:	9905      	ldr	r1, [sp, #20]
 80085fe:	4620      	mov	r0, r4
 8008600:	f7ff f920 	bl	8007844 <_Bfree>
 8008604:	4659      	mov	r1, fp
 8008606:	4620      	mov	r0, r4
 8008608:	f7ff f91c 	bl	8007844 <_Bfree>
 800860c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800860e:	4620      	mov	r0, r4
 8008610:	f7ff f918 	bl	8007844 <_Bfree>
 8008614:	4629      	mov	r1, r5
 8008616:	4620      	mov	r0, r4
 8008618:	f7ff f914 	bl	8007844 <_Bfree>
 800861c:	e5d7      	b.n	80081ce <_strtod_l+0x76>
 800861e:	4b32      	ldr	r3, [pc, #200]	; (80086e8 <_strtod_l+0x590>)
 8008620:	9304      	str	r3, [sp, #16]
 8008622:	2300      	movs	r3, #0
 8008624:	112d      	asrs	r5, r5, #4
 8008626:	4640      	mov	r0, r8
 8008628:	4649      	mov	r1, r9
 800862a:	469a      	mov	sl, r3
 800862c:	2d01      	cmp	r5, #1
 800862e:	dc21      	bgt.n	8008674 <_strtod_l+0x51c>
 8008630:	b10b      	cbz	r3, 8008636 <_strtod_l+0x4de>
 8008632:	4680      	mov	r8, r0
 8008634:	4689      	mov	r9, r1
 8008636:	492c      	ldr	r1, [pc, #176]	; (80086e8 <_strtod_l+0x590>)
 8008638:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800863c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008640:	4642      	mov	r2, r8
 8008642:	464b      	mov	r3, r9
 8008644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008648:	f7f7 ffd6 	bl	80005f8 <__aeabi_dmul>
 800864c:	4b27      	ldr	r3, [pc, #156]	; (80086ec <_strtod_l+0x594>)
 800864e:	460a      	mov	r2, r1
 8008650:	400b      	ands	r3, r1
 8008652:	4927      	ldr	r1, [pc, #156]	; (80086f0 <_strtod_l+0x598>)
 8008654:	428b      	cmp	r3, r1
 8008656:	4680      	mov	r8, r0
 8008658:	d8be      	bhi.n	80085d8 <_strtod_l+0x480>
 800865a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800865e:	428b      	cmp	r3, r1
 8008660:	bf86      	itte	hi
 8008662:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80086f4 <_strtod_l+0x59c>
 8008666:	f04f 38ff 	movhi.w	r8, #4294967295
 800866a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800866e:	2300      	movs	r3, #0
 8008670:	9304      	str	r3, [sp, #16]
 8008672:	e07b      	b.n	800876c <_strtod_l+0x614>
 8008674:	07ea      	lsls	r2, r5, #31
 8008676:	d505      	bpl.n	8008684 <_strtod_l+0x52c>
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f7 ffbb 	bl	80005f8 <__aeabi_dmul>
 8008682:	2301      	movs	r3, #1
 8008684:	9a04      	ldr	r2, [sp, #16]
 8008686:	3208      	adds	r2, #8
 8008688:	f10a 0a01 	add.w	sl, sl, #1
 800868c:	106d      	asrs	r5, r5, #1
 800868e:	9204      	str	r2, [sp, #16]
 8008690:	e7cc      	b.n	800862c <_strtod_l+0x4d4>
 8008692:	d0ec      	beq.n	800866e <_strtod_l+0x516>
 8008694:	426d      	negs	r5, r5
 8008696:	f015 020f 	ands.w	r2, r5, #15
 800869a:	d00a      	beq.n	80086b2 <_strtod_l+0x55a>
 800869c:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <_strtod_l+0x58c>)
 800869e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086a2:	4640      	mov	r0, r8
 80086a4:	4649      	mov	r1, r9
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f7f8 f8cf 	bl	800084c <__aeabi_ddiv>
 80086ae:	4680      	mov	r8, r0
 80086b0:	4689      	mov	r9, r1
 80086b2:	112d      	asrs	r5, r5, #4
 80086b4:	d0db      	beq.n	800866e <_strtod_l+0x516>
 80086b6:	2d1f      	cmp	r5, #31
 80086b8:	dd1e      	ble.n	80086f8 <_strtod_l+0x5a0>
 80086ba:	2500      	movs	r5, #0
 80086bc:	46ab      	mov	fp, r5
 80086be:	9509      	str	r5, [sp, #36]	; 0x24
 80086c0:	9505      	str	r5, [sp, #20]
 80086c2:	2322      	movs	r3, #34	; 0x22
 80086c4:	f04f 0800 	mov.w	r8, #0
 80086c8:	f04f 0900 	mov.w	r9, #0
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	e78d      	b.n	80085ec <_strtod_l+0x494>
 80086d0:	0800a0a5 	.word	0x0800a0a5
 80086d4:	0800a2cc 	.word	0x0800a2cc
 80086d8:	0800a09d 	.word	0x0800a09d
 80086dc:	0800a0d4 	.word	0x0800a0d4
 80086e0:	0800a45d 	.word	0x0800a45d
 80086e4:	0800a1e0 	.word	0x0800a1e0
 80086e8:	0800a1b8 	.word	0x0800a1b8
 80086ec:	7ff00000 	.word	0x7ff00000
 80086f0:	7ca00000 	.word	0x7ca00000
 80086f4:	7fefffff 	.word	0x7fefffff
 80086f8:	f015 0310 	ands.w	r3, r5, #16
 80086fc:	bf18      	it	ne
 80086fe:	236a      	movne	r3, #106	; 0x6a
 8008700:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008aa4 <_strtod_l+0x94c>
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	4640      	mov	r0, r8
 8008708:	4649      	mov	r1, r9
 800870a:	2300      	movs	r3, #0
 800870c:	07ea      	lsls	r2, r5, #31
 800870e:	d504      	bpl.n	800871a <_strtod_l+0x5c2>
 8008710:	e9da 2300 	ldrd	r2, r3, [sl]
 8008714:	f7f7 ff70 	bl	80005f8 <__aeabi_dmul>
 8008718:	2301      	movs	r3, #1
 800871a:	106d      	asrs	r5, r5, #1
 800871c:	f10a 0a08 	add.w	sl, sl, #8
 8008720:	d1f4      	bne.n	800870c <_strtod_l+0x5b4>
 8008722:	b10b      	cbz	r3, 8008728 <_strtod_l+0x5d0>
 8008724:	4680      	mov	r8, r0
 8008726:	4689      	mov	r9, r1
 8008728:	9b04      	ldr	r3, [sp, #16]
 800872a:	b1bb      	cbz	r3, 800875c <_strtod_l+0x604>
 800872c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008730:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008734:	2b00      	cmp	r3, #0
 8008736:	4649      	mov	r1, r9
 8008738:	dd10      	ble.n	800875c <_strtod_l+0x604>
 800873a:	2b1f      	cmp	r3, #31
 800873c:	f340 811e 	ble.w	800897c <_strtod_l+0x824>
 8008740:	2b34      	cmp	r3, #52	; 0x34
 8008742:	bfde      	ittt	le
 8008744:	f04f 33ff 	movle.w	r3, #4294967295
 8008748:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800874c:	4093      	lslle	r3, r2
 800874e:	f04f 0800 	mov.w	r8, #0
 8008752:	bfcc      	ite	gt
 8008754:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008758:	ea03 0901 	andle.w	r9, r3, r1
 800875c:	2200      	movs	r2, #0
 800875e:	2300      	movs	r3, #0
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f8 f9b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008768:	2800      	cmp	r0, #0
 800876a:	d1a6      	bne.n	80086ba <_strtod_l+0x562>
 800876c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008772:	4633      	mov	r3, r6
 8008774:	465a      	mov	r2, fp
 8008776:	4620      	mov	r0, r4
 8008778:	f7ff f8cc 	bl	8007914 <__s2b>
 800877c:	9009      	str	r0, [sp, #36]	; 0x24
 800877e:	2800      	cmp	r0, #0
 8008780:	f43f af2a 	beq.w	80085d8 <_strtod_l+0x480>
 8008784:	9a08      	ldr	r2, [sp, #32]
 8008786:	9b05      	ldr	r3, [sp, #20]
 8008788:	2a00      	cmp	r2, #0
 800878a:	eba3 0307 	sub.w	r3, r3, r7
 800878e:	bfa8      	it	ge
 8008790:	2300      	movge	r3, #0
 8008792:	930c      	str	r3, [sp, #48]	; 0x30
 8008794:	2500      	movs	r5, #0
 8008796:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800879a:	9312      	str	r3, [sp, #72]	; 0x48
 800879c:	46ab      	mov	fp, r5
 800879e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a0:	4620      	mov	r0, r4
 80087a2:	6859      	ldr	r1, [r3, #4]
 80087a4:	f7ff f80e 	bl	80077c4 <_Balloc>
 80087a8:	9005      	str	r0, [sp, #20]
 80087aa:	2800      	cmp	r0, #0
 80087ac:	f43f af18 	beq.w	80085e0 <_strtod_l+0x488>
 80087b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b2:	691a      	ldr	r2, [r3, #16]
 80087b4:	3202      	adds	r2, #2
 80087b6:	f103 010c 	add.w	r1, r3, #12
 80087ba:	0092      	lsls	r2, r2, #2
 80087bc:	300c      	adds	r0, #12
 80087be:	f000 fd87 	bl	80092d0 <memcpy>
 80087c2:	ec49 8b10 	vmov	d0, r8, r9
 80087c6:	aa18      	add	r2, sp, #96	; 0x60
 80087c8:	a917      	add	r1, sp, #92	; 0x5c
 80087ca:	4620      	mov	r0, r4
 80087cc:	f7ff fbd6 	bl	8007f7c <__d2b>
 80087d0:	ec49 8b18 	vmov	d8, r8, r9
 80087d4:	9016      	str	r0, [sp, #88]	; 0x58
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f43f af02 	beq.w	80085e0 <_strtod_l+0x488>
 80087dc:	2101      	movs	r1, #1
 80087de:	4620      	mov	r0, r4
 80087e0:	f7ff f930 	bl	8007a44 <__i2b>
 80087e4:	4683      	mov	fp, r0
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f43f aefa 	beq.w	80085e0 <_strtod_l+0x488>
 80087ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80087ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80087f0:	2e00      	cmp	r6, #0
 80087f2:	bfab      	itete	ge
 80087f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80087f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80087f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80087fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80087fe:	bfac      	ite	ge
 8008800:	eb06 0a03 	addge.w	sl, r6, r3
 8008804:	1b9f      	sublt	r7, r3, r6
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	1af6      	subs	r6, r6, r3
 800880a:	4416      	add	r6, r2
 800880c:	4ba0      	ldr	r3, [pc, #640]	; (8008a90 <_strtod_l+0x938>)
 800880e:	3e01      	subs	r6, #1
 8008810:	429e      	cmp	r6, r3
 8008812:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008816:	f280 80c4 	bge.w	80089a2 <_strtod_l+0x84a>
 800881a:	1b9b      	subs	r3, r3, r6
 800881c:	2b1f      	cmp	r3, #31
 800881e:	eba2 0203 	sub.w	r2, r2, r3
 8008822:	f04f 0101 	mov.w	r1, #1
 8008826:	f300 80b0 	bgt.w	800898a <_strtod_l+0x832>
 800882a:	fa01 f303 	lsl.w	r3, r1, r3
 800882e:	930e      	str	r3, [sp, #56]	; 0x38
 8008830:	2300      	movs	r3, #0
 8008832:	930d      	str	r3, [sp, #52]	; 0x34
 8008834:	eb0a 0602 	add.w	r6, sl, r2
 8008838:	9b04      	ldr	r3, [sp, #16]
 800883a:	45b2      	cmp	sl, r6
 800883c:	4417      	add	r7, r2
 800883e:	441f      	add	r7, r3
 8008840:	4653      	mov	r3, sl
 8008842:	bfa8      	it	ge
 8008844:	4633      	movge	r3, r6
 8008846:	42bb      	cmp	r3, r7
 8008848:	bfa8      	it	ge
 800884a:	463b      	movge	r3, r7
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfc2      	ittt	gt
 8008850:	1af6      	subgt	r6, r6, r3
 8008852:	1aff      	subgt	r7, r7, r3
 8008854:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800885a:	2b00      	cmp	r3, #0
 800885c:	dd17      	ble.n	800888e <_strtod_l+0x736>
 800885e:	4659      	mov	r1, fp
 8008860:	461a      	mov	r2, r3
 8008862:	4620      	mov	r0, r4
 8008864:	f7ff f9ae 	bl	8007bc4 <__pow5mult>
 8008868:	4683      	mov	fp, r0
 800886a:	2800      	cmp	r0, #0
 800886c:	f43f aeb8 	beq.w	80085e0 <_strtod_l+0x488>
 8008870:	4601      	mov	r1, r0
 8008872:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008874:	4620      	mov	r0, r4
 8008876:	f7ff f8fb 	bl	8007a70 <__multiply>
 800887a:	900b      	str	r0, [sp, #44]	; 0x2c
 800887c:	2800      	cmp	r0, #0
 800887e:	f43f aeaf 	beq.w	80085e0 <_strtod_l+0x488>
 8008882:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008884:	4620      	mov	r0, r4
 8008886:	f7fe ffdd 	bl	8007844 <_Bfree>
 800888a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800888c:	9316      	str	r3, [sp, #88]	; 0x58
 800888e:	2e00      	cmp	r6, #0
 8008890:	f300 808c 	bgt.w	80089ac <_strtod_l+0x854>
 8008894:	9b08      	ldr	r3, [sp, #32]
 8008896:	2b00      	cmp	r3, #0
 8008898:	dd08      	ble.n	80088ac <_strtod_l+0x754>
 800889a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800889c:	9905      	ldr	r1, [sp, #20]
 800889e:	4620      	mov	r0, r4
 80088a0:	f7ff f990 	bl	8007bc4 <__pow5mult>
 80088a4:	9005      	str	r0, [sp, #20]
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f43f ae9a 	beq.w	80085e0 <_strtod_l+0x488>
 80088ac:	2f00      	cmp	r7, #0
 80088ae:	dd08      	ble.n	80088c2 <_strtod_l+0x76a>
 80088b0:	9905      	ldr	r1, [sp, #20]
 80088b2:	463a      	mov	r2, r7
 80088b4:	4620      	mov	r0, r4
 80088b6:	f7ff f9df 	bl	8007c78 <__lshift>
 80088ba:	9005      	str	r0, [sp, #20]
 80088bc:	2800      	cmp	r0, #0
 80088be:	f43f ae8f 	beq.w	80085e0 <_strtod_l+0x488>
 80088c2:	f1ba 0f00 	cmp.w	sl, #0
 80088c6:	dd08      	ble.n	80088da <_strtod_l+0x782>
 80088c8:	4659      	mov	r1, fp
 80088ca:	4652      	mov	r2, sl
 80088cc:	4620      	mov	r0, r4
 80088ce:	f7ff f9d3 	bl	8007c78 <__lshift>
 80088d2:	4683      	mov	fp, r0
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f43f ae83 	beq.w	80085e0 <_strtod_l+0x488>
 80088da:	9a05      	ldr	r2, [sp, #20]
 80088dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80088de:	4620      	mov	r0, r4
 80088e0:	f7ff fa52 	bl	8007d88 <__mdiff>
 80088e4:	4605      	mov	r5, r0
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f43f ae7a 	beq.w	80085e0 <_strtod_l+0x488>
 80088ec:	68c3      	ldr	r3, [r0, #12]
 80088ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80088f0:	2300      	movs	r3, #0
 80088f2:	60c3      	str	r3, [r0, #12]
 80088f4:	4659      	mov	r1, fp
 80088f6:	f7ff fa2b 	bl	8007d50 <__mcmp>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	da60      	bge.n	80089c0 <_strtod_l+0x868>
 80088fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008900:	ea53 0308 	orrs.w	r3, r3, r8
 8008904:	f040 8084 	bne.w	8008a10 <_strtod_l+0x8b8>
 8008908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800890c:	2b00      	cmp	r3, #0
 800890e:	d17f      	bne.n	8008a10 <_strtod_l+0x8b8>
 8008910:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008914:	0d1b      	lsrs	r3, r3, #20
 8008916:	051b      	lsls	r3, r3, #20
 8008918:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800891c:	d978      	bls.n	8008a10 <_strtod_l+0x8b8>
 800891e:	696b      	ldr	r3, [r5, #20]
 8008920:	b913      	cbnz	r3, 8008928 <_strtod_l+0x7d0>
 8008922:	692b      	ldr	r3, [r5, #16]
 8008924:	2b01      	cmp	r3, #1
 8008926:	dd73      	ble.n	8008a10 <_strtod_l+0x8b8>
 8008928:	4629      	mov	r1, r5
 800892a:	2201      	movs	r2, #1
 800892c:	4620      	mov	r0, r4
 800892e:	f7ff f9a3 	bl	8007c78 <__lshift>
 8008932:	4659      	mov	r1, fp
 8008934:	4605      	mov	r5, r0
 8008936:	f7ff fa0b 	bl	8007d50 <__mcmp>
 800893a:	2800      	cmp	r0, #0
 800893c:	dd68      	ble.n	8008a10 <_strtod_l+0x8b8>
 800893e:	9904      	ldr	r1, [sp, #16]
 8008940:	4a54      	ldr	r2, [pc, #336]	; (8008a94 <_strtod_l+0x93c>)
 8008942:	464b      	mov	r3, r9
 8008944:	2900      	cmp	r1, #0
 8008946:	f000 8084 	beq.w	8008a52 <_strtod_l+0x8fa>
 800894a:	ea02 0109 	and.w	r1, r2, r9
 800894e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008952:	dc7e      	bgt.n	8008a52 <_strtod_l+0x8fa>
 8008954:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008958:	f77f aeb3 	ble.w	80086c2 <_strtod_l+0x56a>
 800895c:	4b4e      	ldr	r3, [pc, #312]	; (8008a98 <_strtod_l+0x940>)
 800895e:	4640      	mov	r0, r8
 8008960:	4649      	mov	r1, r9
 8008962:	2200      	movs	r2, #0
 8008964:	f7f7 fe48 	bl	80005f8 <__aeabi_dmul>
 8008968:	4b4a      	ldr	r3, [pc, #296]	; (8008a94 <_strtod_l+0x93c>)
 800896a:	400b      	ands	r3, r1
 800896c:	4680      	mov	r8, r0
 800896e:	4689      	mov	r9, r1
 8008970:	2b00      	cmp	r3, #0
 8008972:	f47f ae3f 	bne.w	80085f4 <_strtod_l+0x49c>
 8008976:	2322      	movs	r3, #34	; 0x22
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	e63b      	b.n	80085f4 <_strtod_l+0x49c>
 800897c:	f04f 32ff 	mov.w	r2, #4294967295
 8008980:	fa02 f303 	lsl.w	r3, r2, r3
 8008984:	ea03 0808 	and.w	r8, r3, r8
 8008988:	e6e8      	b.n	800875c <_strtod_l+0x604>
 800898a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800898e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008992:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008996:	36e2      	adds	r6, #226	; 0xe2
 8008998:	fa01 f306 	lsl.w	r3, r1, r6
 800899c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80089a0:	e748      	b.n	8008834 <_strtod_l+0x6dc>
 80089a2:	2100      	movs	r1, #0
 80089a4:	2301      	movs	r3, #1
 80089a6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80089aa:	e743      	b.n	8008834 <_strtod_l+0x6dc>
 80089ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089ae:	4632      	mov	r2, r6
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7ff f961 	bl	8007c78 <__lshift>
 80089b6:	9016      	str	r0, [sp, #88]	; 0x58
 80089b8:	2800      	cmp	r0, #0
 80089ba:	f47f af6b 	bne.w	8008894 <_strtod_l+0x73c>
 80089be:	e60f      	b.n	80085e0 <_strtod_l+0x488>
 80089c0:	46ca      	mov	sl, r9
 80089c2:	d171      	bne.n	8008aa8 <_strtod_l+0x950>
 80089c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089ca:	b352      	cbz	r2, 8008a22 <_strtod_l+0x8ca>
 80089cc:	4a33      	ldr	r2, [pc, #204]	; (8008a9c <_strtod_l+0x944>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d12a      	bne.n	8008a28 <_strtod_l+0x8d0>
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	4641      	mov	r1, r8
 80089d6:	b1fb      	cbz	r3, 8008a18 <_strtod_l+0x8c0>
 80089d8:	4b2e      	ldr	r3, [pc, #184]	; (8008a94 <_strtod_l+0x93c>)
 80089da:	ea09 0303 	and.w	r3, r9, r3
 80089de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80089e2:	f04f 32ff 	mov.w	r2, #4294967295
 80089e6:	d81a      	bhi.n	8008a1e <_strtod_l+0x8c6>
 80089e8:	0d1b      	lsrs	r3, r3, #20
 80089ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089ee:	fa02 f303 	lsl.w	r3, r2, r3
 80089f2:	4299      	cmp	r1, r3
 80089f4:	d118      	bne.n	8008a28 <_strtod_l+0x8d0>
 80089f6:	4b2a      	ldr	r3, [pc, #168]	; (8008aa0 <_strtod_l+0x948>)
 80089f8:	459a      	cmp	sl, r3
 80089fa:	d102      	bne.n	8008a02 <_strtod_l+0x8aa>
 80089fc:	3101      	adds	r1, #1
 80089fe:	f43f adef 	beq.w	80085e0 <_strtod_l+0x488>
 8008a02:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <_strtod_l+0x93c>)
 8008a04:	ea0a 0303 	and.w	r3, sl, r3
 8008a08:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008a0c:	f04f 0800 	mov.w	r8, #0
 8008a10:	9b04      	ldr	r3, [sp, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1a2      	bne.n	800895c <_strtod_l+0x804>
 8008a16:	e5ed      	b.n	80085f4 <_strtod_l+0x49c>
 8008a18:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1c:	e7e9      	b.n	80089f2 <_strtod_l+0x89a>
 8008a1e:	4613      	mov	r3, r2
 8008a20:	e7e7      	b.n	80089f2 <_strtod_l+0x89a>
 8008a22:	ea53 0308 	orrs.w	r3, r3, r8
 8008a26:	d08a      	beq.n	800893e <_strtod_l+0x7e6>
 8008a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a2a:	b1e3      	cbz	r3, 8008a66 <_strtod_l+0x90e>
 8008a2c:	ea13 0f0a 	tst.w	r3, sl
 8008a30:	d0ee      	beq.n	8008a10 <_strtod_l+0x8b8>
 8008a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a34:	9a04      	ldr	r2, [sp, #16]
 8008a36:	4640      	mov	r0, r8
 8008a38:	4649      	mov	r1, r9
 8008a3a:	b1c3      	cbz	r3, 8008a6e <_strtod_l+0x916>
 8008a3c:	f7ff fb6f 	bl	800811e <sulp>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	ec51 0b18 	vmov	r0, r1, d8
 8008a48:	f7f7 fc20 	bl	800028c <__adddf3>
 8008a4c:	4680      	mov	r8, r0
 8008a4e:	4689      	mov	r9, r1
 8008a50:	e7de      	b.n	8008a10 <_strtod_l+0x8b8>
 8008a52:	4013      	ands	r3, r2
 8008a54:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a58:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008a5c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008a60:	f04f 38ff 	mov.w	r8, #4294967295
 8008a64:	e7d4      	b.n	8008a10 <_strtod_l+0x8b8>
 8008a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a68:	ea13 0f08 	tst.w	r3, r8
 8008a6c:	e7e0      	b.n	8008a30 <_strtod_l+0x8d8>
 8008a6e:	f7ff fb56 	bl	800811e <sulp>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	ec51 0b18 	vmov	r0, r1, d8
 8008a7a:	f7f7 fc05 	bl	8000288 <__aeabi_dsub>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2300      	movs	r3, #0
 8008a82:	4680      	mov	r8, r0
 8008a84:	4689      	mov	r9, r1
 8008a86:	f7f8 f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d0c0      	beq.n	8008a10 <_strtod_l+0x8b8>
 8008a8e:	e618      	b.n	80086c2 <_strtod_l+0x56a>
 8008a90:	fffffc02 	.word	0xfffffc02
 8008a94:	7ff00000 	.word	0x7ff00000
 8008a98:	39500000 	.word	0x39500000
 8008a9c:	000fffff 	.word	0x000fffff
 8008aa0:	7fefffff 	.word	0x7fefffff
 8008aa4:	0800a2e0 	.word	0x0800a2e0
 8008aa8:	4659      	mov	r1, fp
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f7ff fac0 	bl	8008030 <__ratio>
 8008ab0:	ec57 6b10 	vmov	r6, r7, d0
 8008ab4:	ee10 0a10 	vmov	r0, s0
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008abe:	4639      	mov	r1, r7
 8008ac0:	f7f8 f816 	bl	8000af0 <__aeabi_dcmple>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d071      	beq.n	8008bac <_strtod_l+0xa54>
 8008ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d17c      	bne.n	8008bc8 <_strtod_l+0xa70>
 8008ace:	f1b8 0f00 	cmp.w	r8, #0
 8008ad2:	d15a      	bne.n	8008b8a <_strtod_l+0xa32>
 8008ad4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d15d      	bne.n	8008b98 <_strtod_l+0xa40>
 8008adc:	4b90      	ldr	r3, [pc, #576]	; (8008d20 <_strtod_l+0xbc8>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	f7f7 fffa 	bl	8000adc <__aeabi_dcmplt>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d15c      	bne.n	8008ba6 <_strtod_l+0xa4e>
 8008aec:	4630      	mov	r0, r6
 8008aee:	4639      	mov	r1, r7
 8008af0:	4b8c      	ldr	r3, [pc, #560]	; (8008d24 <_strtod_l+0xbcc>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	f7f7 fd80 	bl	80005f8 <__aeabi_dmul>
 8008af8:	4606      	mov	r6, r0
 8008afa:	460f      	mov	r7, r1
 8008afc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008b00:	9606      	str	r6, [sp, #24]
 8008b02:	9307      	str	r3, [sp, #28]
 8008b04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008b0c:	4b86      	ldr	r3, [pc, #536]	; (8008d28 <_strtod_l+0xbd0>)
 8008b0e:	ea0a 0303 	and.w	r3, sl, r3
 8008b12:	930d      	str	r3, [sp, #52]	; 0x34
 8008b14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b16:	4b85      	ldr	r3, [pc, #532]	; (8008d2c <_strtod_l+0xbd4>)
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	f040 8090 	bne.w	8008c3e <_strtod_l+0xae6>
 8008b1e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008b22:	ec49 8b10 	vmov	d0, r8, r9
 8008b26:	f7ff f9b9 	bl	8007e9c <__ulp>
 8008b2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b2e:	ec51 0b10 	vmov	r0, r1, d0
 8008b32:	f7f7 fd61 	bl	80005f8 <__aeabi_dmul>
 8008b36:	4642      	mov	r2, r8
 8008b38:	464b      	mov	r3, r9
 8008b3a:	f7f7 fba7 	bl	800028c <__adddf3>
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4979      	ldr	r1, [pc, #484]	; (8008d28 <_strtod_l+0xbd0>)
 8008b42:	4a7b      	ldr	r2, [pc, #492]	; (8008d30 <_strtod_l+0xbd8>)
 8008b44:	4019      	ands	r1, r3
 8008b46:	4291      	cmp	r1, r2
 8008b48:	4680      	mov	r8, r0
 8008b4a:	d944      	bls.n	8008bd6 <_strtod_l+0xa7e>
 8008b4c:	ee18 2a90 	vmov	r2, s17
 8008b50:	4b78      	ldr	r3, [pc, #480]	; (8008d34 <_strtod_l+0xbdc>)
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d104      	bne.n	8008b60 <_strtod_l+0xa08>
 8008b56:	ee18 3a10 	vmov	r3, s16
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	f43f ad40 	beq.w	80085e0 <_strtod_l+0x488>
 8008b60:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008d34 <_strtod_l+0xbdc>
 8008b64:	f04f 38ff 	mov.w	r8, #4294967295
 8008b68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7fe fe6a 	bl	8007844 <_Bfree>
 8008b70:	9905      	ldr	r1, [sp, #20]
 8008b72:	4620      	mov	r0, r4
 8008b74:	f7fe fe66 	bl	8007844 <_Bfree>
 8008b78:	4659      	mov	r1, fp
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f7fe fe62 	bl	8007844 <_Bfree>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4620      	mov	r0, r4
 8008b84:	f7fe fe5e 	bl	8007844 <_Bfree>
 8008b88:	e609      	b.n	800879e <_strtod_l+0x646>
 8008b8a:	f1b8 0f01 	cmp.w	r8, #1
 8008b8e:	d103      	bne.n	8008b98 <_strtod_l+0xa40>
 8008b90:	f1b9 0f00 	cmp.w	r9, #0
 8008b94:	f43f ad95 	beq.w	80086c2 <_strtod_l+0x56a>
 8008b98:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008cf0 <_strtod_l+0xb98>
 8008b9c:	4f60      	ldr	r7, [pc, #384]	; (8008d20 <_strtod_l+0xbc8>)
 8008b9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	e7ae      	b.n	8008b04 <_strtod_l+0x9ac>
 8008ba6:	4f5f      	ldr	r7, [pc, #380]	; (8008d24 <_strtod_l+0xbcc>)
 8008ba8:	2600      	movs	r6, #0
 8008baa:	e7a7      	b.n	8008afc <_strtod_l+0x9a4>
 8008bac:	4b5d      	ldr	r3, [pc, #372]	; (8008d24 <_strtod_l+0xbcc>)
 8008bae:	4630      	mov	r0, r6
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f7f7 fd20 	bl	80005f8 <__aeabi_dmul>
 8008bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d09c      	beq.n	8008afc <_strtod_l+0x9a4>
 8008bc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008bc6:	e79d      	b.n	8008b04 <_strtod_l+0x9ac>
 8008bc8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008cf8 <_strtod_l+0xba0>
 8008bcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bd0:	ec57 6b17 	vmov	r6, r7, d7
 8008bd4:	e796      	b.n	8008b04 <_strtod_l+0x9ac>
 8008bd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008bda:	9b04      	ldr	r3, [sp, #16]
 8008bdc:	46ca      	mov	sl, r9
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1c2      	bne.n	8008b68 <_strtod_l+0xa10>
 8008be2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008be6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008be8:	0d1b      	lsrs	r3, r3, #20
 8008bea:	051b      	lsls	r3, r3, #20
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d1bb      	bne.n	8008b68 <_strtod_l+0xa10>
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f8 f860 	bl	8000cb8 <__aeabi_d2lz>
 8008bf8:	f7f7 fcd0 	bl	800059c <__aeabi_l2d>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4630      	mov	r0, r6
 8008c02:	4639      	mov	r1, r7
 8008c04:	f7f7 fb40 	bl	8000288 <__aeabi_dsub>
 8008c08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c0e:	ea43 0308 	orr.w	r3, r3, r8
 8008c12:	4313      	orrs	r3, r2
 8008c14:	4606      	mov	r6, r0
 8008c16:	460f      	mov	r7, r1
 8008c18:	d054      	beq.n	8008cc4 <_strtod_l+0xb6c>
 8008c1a:	a339      	add	r3, pc, #228	; (adr r3, 8008d00 <_strtod_l+0xba8>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	f7f7 ff5c 	bl	8000adc <__aeabi_dcmplt>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f47f ace5 	bne.w	80085f4 <_strtod_l+0x49c>
 8008c2a:	a337      	add	r3, pc, #220	; (adr r3, 8008d08 <_strtod_l+0xbb0>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	f7f7 ff70 	bl	8000b18 <__aeabi_dcmpgt>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d095      	beq.n	8008b68 <_strtod_l+0xa10>
 8008c3c:	e4da      	b.n	80085f4 <_strtod_l+0x49c>
 8008c3e:	9b04      	ldr	r3, [sp, #16]
 8008c40:	b333      	cbz	r3, 8008c90 <_strtod_l+0xb38>
 8008c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c48:	d822      	bhi.n	8008c90 <_strtod_l+0xb38>
 8008c4a:	a331      	add	r3, pc, #196	; (adr r3, 8008d10 <_strtod_l+0xbb8>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	4630      	mov	r0, r6
 8008c52:	4639      	mov	r1, r7
 8008c54:	f7f7 ff4c 	bl	8000af0 <__aeabi_dcmple>
 8008c58:	b1a0      	cbz	r0, 8008c84 <_strtod_l+0xb2c>
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f7f7 ffa3 	bl	8000ba8 <__aeabi_d2uiz>
 8008c62:	2801      	cmp	r0, #1
 8008c64:	bf38      	it	cc
 8008c66:	2001      	movcc	r0, #1
 8008c68:	f7f7 fc4c 	bl	8000504 <__aeabi_ui2d>
 8008c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c6e:	4606      	mov	r6, r0
 8008c70:	460f      	mov	r7, r1
 8008c72:	bb23      	cbnz	r3, 8008cbe <_strtod_l+0xb66>
 8008c74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c78:	9010      	str	r0, [sp, #64]	; 0x40
 8008c7a:	9311      	str	r3, [sp, #68]	; 0x44
 8008c7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008c84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008c94:	eeb0 0a48 	vmov.f32	s0, s16
 8008c98:	eef0 0a68 	vmov.f32	s1, s17
 8008c9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008ca0:	f7ff f8fc 	bl	8007e9c <__ulp>
 8008ca4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ca8:	ec53 2b10 	vmov	r2, r3, d0
 8008cac:	f7f7 fca4 	bl	80005f8 <__aeabi_dmul>
 8008cb0:	ec53 2b18 	vmov	r2, r3, d8
 8008cb4:	f7f7 faea 	bl	800028c <__adddf3>
 8008cb8:	4680      	mov	r8, r0
 8008cba:	4689      	mov	r9, r1
 8008cbc:	e78d      	b.n	8008bda <_strtod_l+0xa82>
 8008cbe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008cc2:	e7db      	b.n	8008c7c <_strtod_l+0xb24>
 8008cc4:	a314      	add	r3, pc, #80	; (adr r3, 8008d18 <_strtod_l+0xbc0>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 ff07 	bl	8000adc <__aeabi_dcmplt>
 8008cce:	e7b3      	b.n	8008c38 <_strtod_l+0xae0>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8008cd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	f7ff ba7c 	b.w	80081d6 <_strtod_l+0x7e>
 8008cde:	2a65      	cmp	r2, #101	; 0x65
 8008ce0:	f43f ab75 	beq.w	80083ce <_strtod_l+0x276>
 8008ce4:	2a45      	cmp	r2, #69	; 0x45
 8008ce6:	f43f ab72 	beq.w	80083ce <_strtod_l+0x276>
 8008cea:	2301      	movs	r3, #1
 8008cec:	f7ff bbaa 	b.w	8008444 <_strtod_l+0x2ec>
 8008cf0:	00000000 	.word	0x00000000
 8008cf4:	bff00000 	.word	0xbff00000
 8008cf8:	00000000 	.word	0x00000000
 8008cfc:	3ff00000 	.word	0x3ff00000
 8008d00:	94a03595 	.word	0x94a03595
 8008d04:	3fdfffff 	.word	0x3fdfffff
 8008d08:	35afe535 	.word	0x35afe535
 8008d0c:	3fe00000 	.word	0x3fe00000
 8008d10:	ffc00000 	.word	0xffc00000
 8008d14:	41dfffff 	.word	0x41dfffff
 8008d18:	94a03595 	.word	0x94a03595
 8008d1c:	3fcfffff 	.word	0x3fcfffff
 8008d20:	3ff00000 	.word	0x3ff00000
 8008d24:	3fe00000 	.word	0x3fe00000
 8008d28:	7ff00000 	.word	0x7ff00000
 8008d2c:	7fe00000 	.word	0x7fe00000
 8008d30:	7c9fffff 	.word	0x7c9fffff
 8008d34:	7fefffff 	.word	0x7fefffff

08008d38 <_strtod_r>:
 8008d38:	4b01      	ldr	r3, [pc, #4]	; (8008d40 <_strtod_r+0x8>)
 8008d3a:	f7ff ba0d 	b.w	8008158 <_strtod_l>
 8008d3e:	bf00      	nop
 8008d40:	20000068 	.word	0x20000068

08008d44 <_strtol_l.constprop.0>:
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4a:	d001      	beq.n	8008d50 <_strtol_l.constprop.0+0xc>
 8008d4c:	2b24      	cmp	r3, #36	; 0x24
 8008d4e:	d906      	bls.n	8008d5e <_strtol_l.constprop.0+0x1a>
 8008d50:	f7fd fd88 	bl	8006864 <__errno>
 8008d54:	2316      	movs	r3, #22
 8008d56:	6003      	str	r3, [r0, #0]
 8008d58:	2000      	movs	r0, #0
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e44 <_strtol_l.constprop.0+0x100>
 8008d62:	460d      	mov	r5, r1
 8008d64:	462e      	mov	r6, r5
 8008d66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008d6e:	f017 0708 	ands.w	r7, r7, #8
 8008d72:	d1f7      	bne.n	8008d64 <_strtol_l.constprop.0+0x20>
 8008d74:	2c2d      	cmp	r4, #45	; 0x2d
 8008d76:	d132      	bne.n	8008dde <_strtol_l.constprop.0+0x9a>
 8008d78:	782c      	ldrb	r4, [r5, #0]
 8008d7a:	2701      	movs	r7, #1
 8008d7c:	1cb5      	adds	r5, r6, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d05b      	beq.n	8008e3a <_strtol_l.constprop.0+0xf6>
 8008d82:	2b10      	cmp	r3, #16
 8008d84:	d109      	bne.n	8008d9a <_strtol_l.constprop.0+0x56>
 8008d86:	2c30      	cmp	r4, #48	; 0x30
 8008d88:	d107      	bne.n	8008d9a <_strtol_l.constprop.0+0x56>
 8008d8a:	782c      	ldrb	r4, [r5, #0]
 8008d8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008d90:	2c58      	cmp	r4, #88	; 0x58
 8008d92:	d14d      	bne.n	8008e30 <_strtol_l.constprop.0+0xec>
 8008d94:	786c      	ldrb	r4, [r5, #1]
 8008d96:	2310      	movs	r3, #16
 8008d98:	3502      	adds	r5, #2
 8008d9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008d9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008da2:	f04f 0e00 	mov.w	lr, #0
 8008da6:	fbb8 f9f3 	udiv	r9, r8, r3
 8008daa:	4676      	mov	r6, lr
 8008dac:	fb03 8a19 	mls	sl, r3, r9, r8
 8008db0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008db4:	f1bc 0f09 	cmp.w	ip, #9
 8008db8:	d816      	bhi.n	8008de8 <_strtol_l.constprop.0+0xa4>
 8008dba:	4664      	mov	r4, ip
 8008dbc:	42a3      	cmp	r3, r4
 8008dbe:	dd24      	ble.n	8008e0a <_strtol_l.constprop.0+0xc6>
 8008dc0:	f1be 3fff 	cmp.w	lr, #4294967295
 8008dc4:	d008      	beq.n	8008dd8 <_strtol_l.constprop.0+0x94>
 8008dc6:	45b1      	cmp	r9, r6
 8008dc8:	d31c      	bcc.n	8008e04 <_strtol_l.constprop.0+0xc0>
 8008dca:	d101      	bne.n	8008dd0 <_strtol_l.constprop.0+0x8c>
 8008dcc:	45a2      	cmp	sl, r4
 8008dce:	db19      	blt.n	8008e04 <_strtol_l.constprop.0+0xc0>
 8008dd0:	fb06 4603 	mla	r6, r6, r3, r4
 8008dd4:	f04f 0e01 	mov.w	lr, #1
 8008dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ddc:	e7e8      	b.n	8008db0 <_strtol_l.constprop.0+0x6c>
 8008dde:	2c2b      	cmp	r4, #43	; 0x2b
 8008de0:	bf04      	itt	eq
 8008de2:	782c      	ldrbeq	r4, [r5, #0]
 8008de4:	1cb5      	addeq	r5, r6, #2
 8008de6:	e7ca      	b.n	8008d7e <_strtol_l.constprop.0+0x3a>
 8008de8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008dec:	f1bc 0f19 	cmp.w	ip, #25
 8008df0:	d801      	bhi.n	8008df6 <_strtol_l.constprop.0+0xb2>
 8008df2:	3c37      	subs	r4, #55	; 0x37
 8008df4:	e7e2      	b.n	8008dbc <_strtol_l.constprop.0+0x78>
 8008df6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008dfa:	f1bc 0f19 	cmp.w	ip, #25
 8008dfe:	d804      	bhi.n	8008e0a <_strtol_l.constprop.0+0xc6>
 8008e00:	3c57      	subs	r4, #87	; 0x57
 8008e02:	e7db      	b.n	8008dbc <_strtol_l.constprop.0+0x78>
 8008e04:	f04f 3eff 	mov.w	lr, #4294967295
 8008e08:	e7e6      	b.n	8008dd8 <_strtol_l.constprop.0+0x94>
 8008e0a:	f1be 3fff 	cmp.w	lr, #4294967295
 8008e0e:	d105      	bne.n	8008e1c <_strtol_l.constprop.0+0xd8>
 8008e10:	2322      	movs	r3, #34	; 0x22
 8008e12:	6003      	str	r3, [r0, #0]
 8008e14:	4646      	mov	r6, r8
 8008e16:	b942      	cbnz	r2, 8008e2a <_strtol_l.constprop.0+0xe6>
 8008e18:	4630      	mov	r0, r6
 8008e1a:	e79e      	b.n	8008d5a <_strtol_l.constprop.0+0x16>
 8008e1c:	b107      	cbz	r7, 8008e20 <_strtol_l.constprop.0+0xdc>
 8008e1e:	4276      	negs	r6, r6
 8008e20:	2a00      	cmp	r2, #0
 8008e22:	d0f9      	beq.n	8008e18 <_strtol_l.constprop.0+0xd4>
 8008e24:	f1be 0f00 	cmp.w	lr, #0
 8008e28:	d000      	beq.n	8008e2c <_strtol_l.constprop.0+0xe8>
 8008e2a:	1e69      	subs	r1, r5, #1
 8008e2c:	6011      	str	r1, [r2, #0]
 8008e2e:	e7f3      	b.n	8008e18 <_strtol_l.constprop.0+0xd4>
 8008e30:	2430      	movs	r4, #48	; 0x30
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1b1      	bne.n	8008d9a <_strtol_l.constprop.0+0x56>
 8008e36:	2308      	movs	r3, #8
 8008e38:	e7af      	b.n	8008d9a <_strtol_l.constprop.0+0x56>
 8008e3a:	2c30      	cmp	r4, #48	; 0x30
 8008e3c:	d0a5      	beq.n	8008d8a <_strtol_l.constprop.0+0x46>
 8008e3e:	230a      	movs	r3, #10
 8008e40:	e7ab      	b.n	8008d9a <_strtol_l.constprop.0+0x56>
 8008e42:	bf00      	nop
 8008e44:	0800a309 	.word	0x0800a309

08008e48 <_strtol_r>:
 8008e48:	f7ff bf7c 	b.w	8008d44 <_strtol_l.constprop.0>

08008e4c <__ssputs_r>:
 8008e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	688e      	ldr	r6, [r1, #8]
 8008e52:	461f      	mov	r7, r3
 8008e54:	42be      	cmp	r6, r7
 8008e56:	680b      	ldr	r3, [r1, #0]
 8008e58:	4682      	mov	sl, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	4690      	mov	r8, r2
 8008e5e:	d82c      	bhi.n	8008eba <__ssputs_r+0x6e>
 8008e60:	898a      	ldrh	r2, [r1, #12]
 8008e62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e66:	d026      	beq.n	8008eb6 <__ssputs_r+0x6a>
 8008e68:	6965      	ldr	r5, [r4, #20]
 8008e6a:	6909      	ldr	r1, [r1, #16]
 8008e6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e70:	eba3 0901 	sub.w	r9, r3, r1
 8008e74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e78:	1c7b      	adds	r3, r7, #1
 8008e7a:	444b      	add	r3, r9
 8008e7c:	106d      	asrs	r5, r5, #1
 8008e7e:	429d      	cmp	r5, r3
 8008e80:	bf38      	it	cc
 8008e82:	461d      	movcc	r5, r3
 8008e84:	0553      	lsls	r3, r2, #21
 8008e86:	d527      	bpl.n	8008ed8 <__ssputs_r+0x8c>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7fe fc0f 	bl	80076ac <_malloc_r>
 8008e8e:	4606      	mov	r6, r0
 8008e90:	b360      	cbz	r0, 8008eec <__ssputs_r+0xa0>
 8008e92:	6921      	ldr	r1, [r4, #16]
 8008e94:	464a      	mov	r2, r9
 8008e96:	f000 fa1b 	bl	80092d0 <memcpy>
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea4:	81a3      	strh	r3, [r4, #12]
 8008ea6:	6126      	str	r6, [r4, #16]
 8008ea8:	6165      	str	r5, [r4, #20]
 8008eaa:	444e      	add	r6, r9
 8008eac:	eba5 0509 	sub.w	r5, r5, r9
 8008eb0:	6026      	str	r6, [r4, #0]
 8008eb2:	60a5      	str	r5, [r4, #8]
 8008eb4:	463e      	mov	r6, r7
 8008eb6:	42be      	cmp	r6, r7
 8008eb8:	d900      	bls.n	8008ebc <__ssputs_r+0x70>
 8008eba:	463e      	mov	r6, r7
 8008ebc:	6820      	ldr	r0, [r4, #0]
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	f000 f9c9 	bl	8009258 <memmove>
 8008ec6:	68a3      	ldr	r3, [r4, #8]
 8008ec8:	1b9b      	subs	r3, r3, r6
 8008eca:	60a3      	str	r3, [r4, #8]
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	4433      	add	r3, r6
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed8:	462a      	mov	r2, r5
 8008eda:	f000 fdae 	bl	8009a3a <_realloc_r>
 8008ede:	4606      	mov	r6, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d1e0      	bne.n	8008ea6 <__ssputs_r+0x5a>
 8008ee4:	6921      	ldr	r1, [r4, #16]
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	f7fe fb6c 	bl	80075c4 <_free_r>
 8008eec:	230c      	movs	r3, #12
 8008eee:	f8ca 3000 	str.w	r3, [sl]
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	f04f 30ff 	mov.w	r0, #4294967295
 8008efe:	e7e9      	b.n	8008ed4 <__ssputs_r+0x88>

08008f00 <_svfiprintf_r>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	4698      	mov	r8, r3
 8008f06:	898b      	ldrh	r3, [r1, #12]
 8008f08:	061b      	lsls	r3, r3, #24
 8008f0a:	b09d      	sub	sp, #116	; 0x74
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	460d      	mov	r5, r1
 8008f10:	4614      	mov	r4, r2
 8008f12:	d50e      	bpl.n	8008f32 <_svfiprintf_r+0x32>
 8008f14:	690b      	ldr	r3, [r1, #16]
 8008f16:	b963      	cbnz	r3, 8008f32 <_svfiprintf_r+0x32>
 8008f18:	2140      	movs	r1, #64	; 0x40
 8008f1a:	f7fe fbc7 	bl	80076ac <_malloc_r>
 8008f1e:	6028      	str	r0, [r5, #0]
 8008f20:	6128      	str	r0, [r5, #16]
 8008f22:	b920      	cbnz	r0, 8008f2e <_svfiprintf_r+0x2e>
 8008f24:	230c      	movs	r3, #12
 8008f26:	603b      	str	r3, [r7, #0]
 8008f28:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2c:	e0d0      	b.n	80090d0 <_svfiprintf_r+0x1d0>
 8008f2e:	2340      	movs	r3, #64	; 0x40
 8008f30:	616b      	str	r3, [r5, #20]
 8008f32:	2300      	movs	r3, #0
 8008f34:	9309      	str	r3, [sp, #36]	; 0x24
 8008f36:	2320      	movs	r3, #32
 8008f38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f40:	2330      	movs	r3, #48	; 0x30
 8008f42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80090e8 <_svfiprintf_r+0x1e8>
 8008f46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f4a:	f04f 0901 	mov.w	r9, #1
 8008f4e:	4623      	mov	r3, r4
 8008f50:	469a      	mov	sl, r3
 8008f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f56:	b10a      	cbz	r2, 8008f5c <_svfiprintf_r+0x5c>
 8008f58:	2a25      	cmp	r2, #37	; 0x25
 8008f5a:	d1f9      	bne.n	8008f50 <_svfiprintf_r+0x50>
 8008f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f60:	d00b      	beq.n	8008f7a <_svfiprintf_r+0x7a>
 8008f62:	465b      	mov	r3, fp
 8008f64:	4622      	mov	r2, r4
 8008f66:	4629      	mov	r1, r5
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f7ff ff6f 	bl	8008e4c <__ssputs_r>
 8008f6e:	3001      	adds	r0, #1
 8008f70:	f000 80a9 	beq.w	80090c6 <_svfiprintf_r+0x1c6>
 8008f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f76:	445a      	add	r2, fp
 8008f78:	9209      	str	r2, [sp, #36]	; 0x24
 8008f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 80a1 	beq.w	80090c6 <_svfiprintf_r+0x1c6>
 8008f84:	2300      	movs	r3, #0
 8008f86:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f8e:	f10a 0a01 	add.w	sl, sl, #1
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	9307      	str	r3, [sp, #28]
 8008f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f9c:	4654      	mov	r4, sl
 8008f9e:	2205      	movs	r2, #5
 8008fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa4:	4850      	ldr	r0, [pc, #320]	; (80090e8 <_svfiprintf_r+0x1e8>)
 8008fa6:	f7f7 f913 	bl	80001d0 <memchr>
 8008faa:	9a04      	ldr	r2, [sp, #16]
 8008fac:	b9d8      	cbnz	r0, 8008fe6 <_svfiprintf_r+0xe6>
 8008fae:	06d0      	lsls	r0, r2, #27
 8008fb0:	bf44      	itt	mi
 8008fb2:	2320      	movmi	r3, #32
 8008fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb8:	0711      	lsls	r1, r2, #28
 8008fba:	bf44      	itt	mi
 8008fbc:	232b      	movmi	r3, #43	; 0x2b
 8008fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc8:	d015      	beq.n	8008ff6 <_svfiprintf_r+0xf6>
 8008fca:	9a07      	ldr	r2, [sp, #28]
 8008fcc:	4654      	mov	r4, sl
 8008fce:	2000      	movs	r0, #0
 8008fd0:	f04f 0c0a 	mov.w	ip, #10
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fda:	3b30      	subs	r3, #48	; 0x30
 8008fdc:	2b09      	cmp	r3, #9
 8008fde:	d94d      	bls.n	800907c <_svfiprintf_r+0x17c>
 8008fe0:	b1b0      	cbz	r0, 8009010 <_svfiprintf_r+0x110>
 8008fe2:	9207      	str	r2, [sp, #28]
 8008fe4:	e014      	b.n	8009010 <_svfiprintf_r+0x110>
 8008fe6:	eba0 0308 	sub.w	r3, r0, r8
 8008fea:	fa09 f303 	lsl.w	r3, r9, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	46a2      	mov	sl, r4
 8008ff4:	e7d2      	b.n	8008f9c <_svfiprintf_r+0x9c>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	1d19      	adds	r1, r3, #4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	9103      	str	r1, [sp, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfbb      	ittet	lt
 8009002:	425b      	neglt	r3, r3
 8009004:	f042 0202 	orrlt.w	r2, r2, #2
 8009008:	9307      	strge	r3, [sp, #28]
 800900a:	9307      	strlt	r3, [sp, #28]
 800900c:	bfb8      	it	lt
 800900e:	9204      	strlt	r2, [sp, #16]
 8009010:	7823      	ldrb	r3, [r4, #0]
 8009012:	2b2e      	cmp	r3, #46	; 0x2e
 8009014:	d10c      	bne.n	8009030 <_svfiprintf_r+0x130>
 8009016:	7863      	ldrb	r3, [r4, #1]
 8009018:	2b2a      	cmp	r3, #42	; 0x2a
 800901a:	d134      	bne.n	8009086 <_svfiprintf_r+0x186>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	1d1a      	adds	r2, r3, #4
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	9203      	str	r2, [sp, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	bfb8      	it	lt
 8009028:	f04f 33ff 	movlt.w	r3, #4294967295
 800902c:	3402      	adds	r4, #2
 800902e:	9305      	str	r3, [sp, #20]
 8009030:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80090f8 <_svfiprintf_r+0x1f8>
 8009034:	7821      	ldrb	r1, [r4, #0]
 8009036:	2203      	movs	r2, #3
 8009038:	4650      	mov	r0, sl
 800903a:	f7f7 f8c9 	bl	80001d0 <memchr>
 800903e:	b138      	cbz	r0, 8009050 <_svfiprintf_r+0x150>
 8009040:	9b04      	ldr	r3, [sp, #16]
 8009042:	eba0 000a 	sub.w	r0, r0, sl
 8009046:	2240      	movs	r2, #64	; 0x40
 8009048:	4082      	lsls	r2, r0
 800904a:	4313      	orrs	r3, r2
 800904c:	3401      	adds	r4, #1
 800904e:	9304      	str	r3, [sp, #16]
 8009050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009054:	4825      	ldr	r0, [pc, #148]	; (80090ec <_svfiprintf_r+0x1ec>)
 8009056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800905a:	2206      	movs	r2, #6
 800905c:	f7f7 f8b8 	bl	80001d0 <memchr>
 8009060:	2800      	cmp	r0, #0
 8009062:	d038      	beq.n	80090d6 <_svfiprintf_r+0x1d6>
 8009064:	4b22      	ldr	r3, [pc, #136]	; (80090f0 <_svfiprintf_r+0x1f0>)
 8009066:	bb1b      	cbnz	r3, 80090b0 <_svfiprintf_r+0x1b0>
 8009068:	9b03      	ldr	r3, [sp, #12]
 800906a:	3307      	adds	r3, #7
 800906c:	f023 0307 	bic.w	r3, r3, #7
 8009070:	3308      	adds	r3, #8
 8009072:	9303      	str	r3, [sp, #12]
 8009074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009076:	4433      	add	r3, r6
 8009078:	9309      	str	r3, [sp, #36]	; 0x24
 800907a:	e768      	b.n	8008f4e <_svfiprintf_r+0x4e>
 800907c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009080:	460c      	mov	r4, r1
 8009082:	2001      	movs	r0, #1
 8009084:	e7a6      	b.n	8008fd4 <_svfiprintf_r+0xd4>
 8009086:	2300      	movs	r3, #0
 8009088:	3401      	adds	r4, #1
 800908a:	9305      	str	r3, [sp, #20]
 800908c:	4619      	mov	r1, r3
 800908e:	f04f 0c0a 	mov.w	ip, #10
 8009092:	4620      	mov	r0, r4
 8009094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009098:	3a30      	subs	r2, #48	; 0x30
 800909a:	2a09      	cmp	r2, #9
 800909c:	d903      	bls.n	80090a6 <_svfiprintf_r+0x1a6>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d0c6      	beq.n	8009030 <_svfiprintf_r+0x130>
 80090a2:	9105      	str	r1, [sp, #20]
 80090a4:	e7c4      	b.n	8009030 <_svfiprintf_r+0x130>
 80090a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80090aa:	4604      	mov	r4, r0
 80090ac:	2301      	movs	r3, #1
 80090ae:	e7f0      	b.n	8009092 <_svfiprintf_r+0x192>
 80090b0:	ab03      	add	r3, sp, #12
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	462a      	mov	r2, r5
 80090b6:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <_svfiprintf_r+0x1f4>)
 80090b8:	a904      	add	r1, sp, #16
 80090ba:	4638      	mov	r0, r7
 80090bc:	f7fc fc84 	bl	80059c8 <_printf_float>
 80090c0:	1c42      	adds	r2, r0, #1
 80090c2:	4606      	mov	r6, r0
 80090c4:	d1d6      	bne.n	8009074 <_svfiprintf_r+0x174>
 80090c6:	89ab      	ldrh	r3, [r5, #12]
 80090c8:	065b      	lsls	r3, r3, #25
 80090ca:	f53f af2d 	bmi.w	8008f28 <_svfiprintf_r+0x28>
 80090ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d0:	b01d      	add	sp, #116	; 0x74
 80090d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d6:	ab03      	add	r3, sp, #12
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	462a      	mov	r2, r5
 80090dc:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <_svfiprintf_r+0x1f4>)
 80090de:	a904      	add	r1, sp, #16
 80090e0:	4638      	mov	r0, r7
 80090e2:	f7fc ff15 	bl	8005f10 <_printf_i>
 80090e6:	e7eb      	b.n	80090c0 <_svfiprintf_r+0x1c0>
 80090e8:	0800a409 	.word	0x0800a409
 80090ec:	0800a413 	.word	0x0800a413
 80090f0:	080059c9 	.word	0x080059c9
 80090f4:	08008e4d 	.word	0x08008e4d
 80090f8:	0800a40f 	.word	0x0800a40f

080090fc <__sflush_r>:
 80090fc:	898a      	ldrh	r2, [r1, #12]
 80090fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009102:	4605      	mov	r5, r0
 8009104:	0710      	lsls	r0, r2, #28
 8009106:	460c      	mov	r4, r1
 8009108:	d458      	bmi.n	80091bc <__sflush_r+0xc0>
 800910a:	684b      	ldr	r3, [r1, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	dc05      	bgt.n	800911c <__sflush_r+0x20>
 8009110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	dc02      	bgt.n	800911c <__sflush_r+0x20>
 8009116:	2000      	movs	r0, #0
 8009118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800911c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800911e:	2e00      	cmp	r6, #0
 8009120:	d0f9      	beq.n	8009116 <__sflush_r+0x1a>
 8009122:	2300      	movs	r3, #0
 8009124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009128:	682f      	ldr	r7, [r5, #0]
 800912a:	6a21      	ldr	r1, [r4, #32]
 800912c:	602b      	str	r3, [r5, #0]
 800912e:	d032      	beq.n	8009196 <__sflush_r+0x9a>
 8009130:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	075a      	lsls	r2, r3, #29
 8009136:	d505      	bpl.n	8009144 <__sflush_r+0x48>
 8009138:	6863      	ldr	r3, [r4, #4]
 800913a:	1ac0      	subs	r0, r0, r3
 800913c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800913e:	b10b      	cbz	r3, 8009144 <__sflush_r+0x48>
 8009140:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009142:	1ac0      	subs	r0, r0, r3
 8009144:	2300      	movs	r3, #0
 8009146:	4602      	mov	r2, r0
 8009148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800914a:	6a21      	ldr	r1, [r4, #32]
 800914c:	4628      	mov	r0, r5
 800914e:	47b0      	blx	r6
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	d106      	bne.n	8009164 <__sflush_r+0x68>
 8009156:	6829      	ldr	r1, [r5, #0]
 8009158:	291d      	cmp	r1, #29
 800915a:	d82b      	bhi.n	80091b4 <__sflush_r+0xb8>
 800915c:	4a29      	ldr	r2, [pc, #164]	; (8009204 <__sflush_r+0x108>)
 800915e:	410a      	asrs	r2, r1
 8009160:	07d6      	lsls	r6, r2, #31
 8009162:	d427      	bmi.n	80091b4 <__sflush_r+0xb8>
 8009164:	2200      	movs	r2, #0
 8009166:	6062      	str	r2, [r4, #4]
 8009168:	04d9      	lsls	r1, r3, #19
 800916a:	6922      	ldr	r2, [r4, #16]
 800916c:	6022      	str	r2, [r4, #0]
 800916e:	d504      	bpl.n	800917a <__sflush_r+0x7e>
 8009170:	1c42      	adds	r2, r0, #1
 8009172:	d101      	bne.n	8009178 <__sflush_r+0x7c>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	b903      	cbnz	r3, 800917a <__sflush_r+0x7e>
 8009178:	6560      	str	r0, [r4, #84]	; 0x54
 800917a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800917c:	602f      	str	r7, [r5, #0]
 800917e:	2900      	cmp	r1, #0
 8009180:	d0c9      	beq.n	8009116 <__sflush_r+0x1a>
 8009182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009186:	4299      	cmp	r1, r3
 8009188:	d002      	beq.n	8009190 <__sflush_r+0x94>
 800918a:	4628      	mov	r0, r5
 800918c:	f7fe fa1a 	bl	80075c4 <_free_r>
 8009190:	2000      	movs	r0, #0
 8009192:	6360      	str	r0, [r4, #52]	; 0x34
 8009194:	e7c0      	b.n	8009118 <__sflush_r+0x1c>
 8009196:	2301      	movs	r3, #1
 8009198:	4628      	mov	r0, r5
 800919a:	47b0      	blx	r6
 800919c:	1c41      	adds	r1, r0, #1
 800919e:	d1c8      	bne.n	8009132 <__sflush_r+0x36>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0c5      	beq.n	8009132 <__sflush_r+0x36>
 80091a6:	2b1d      	cmp	r3, #29
 80091a8:	d001      	beq.n	80091ae <__sflush_r+0xb2>
 80091aa:	2b16      	cmp	r3, #22
 80091ac:	d101      	bne.n	80091b2 <__sflush_r+0xb6>
 80091ae:	602f      	str	r7, [r5, #0]
 80091b0:	e7b1      	b.n	8009116 <__sflush_r+0x1a>
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b8:	81a3      	strh	r3, [r4, #12]
 80091ba:	e7ad      	b.n	8009118 <__sflush_r+0x1c>
 80091bc:	690f      	ldr	r7, [r1, #16]
 80091be:	2f00      	cmp	r7, #0
 80091c0:	d0a9      	beq.n	8009116 <__sflush_r+0x1a>
 80091c2:	0793      	lsls	r3, r2, #30
 80091c4:	680e      	ldr	r6, [r1, #0]
 80091c6:	bf08      	it	eq
 80091c8:	694b      	ldreq	r3, [r1, #20]
 80091ca:	600f      	str	r7, [r1, #0]
 80091cc:	bf18      	it	ne
 80091ce:	2300      	movne	r3, #0
 80091d0:	eba6 0807 	sub.w	r8, r6, r7
 80091d4:	608b      	str	r3, [r1, #8]
 80091d6:	f1b8 0f00 	cmp.w	r8, #0
 80091da:	dd9c      	ble.n	8009116 <__sflush_r+0x1a>
 80091dc:	6a21      	ldr	r1, [r4, #32]
 80091de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091e0:	4643      	mov	r3, r8
 80091e2:	463a      	mov	r2, r7
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b0      	blx	r6
 80091e8:	2800      	cmp	r0, #0
 80091ea:	dc06      	bgt.n	80091fa <__sflush_r+0xfe>
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	e78e      	b.n	8009118 <__sflush_r+0x1c>
 80091fa:	4407      	add	r7, r0
 80091fc:	eba8 0800 	sub.w	r8, r8, r0
 8009200:	e7e9      	b.n	80091d6 <__sflush_r+0xda>
 8009202:	bf00      	nop
 8009204:	dfbffffe 	.word	0xdfbffffe

08009208 <_fflush_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	690b      	ldr	r3, [r1, #16]
 800920c:	4605      	mov	r5, r0
 800920e:	460c      	mov	r4, r1
 8009210:	b913      	cbnz	r3, 8009218 <_fflush_r+0x10>
 8009212:	2500      	movs	r5, #0
 8009214:	4628      	mov	r0, r5
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	b118      	cbz	r0, 8009222 <_fflush_r+0x1a>
 800921a:	6a03      	ldr	r3, [r0, #32]
 800921c:	b90b      	cbnz	r3, 8009222 <_fflush_r+0x1a>
 800921e:	f7fd fa35 	bl	800668c <__sinit>
 8009222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0f3      	beq.n	8009212 <_fflush_r+0xa>
 800922a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800922c:	07d0      	lsls	r0, r2, #31
 800922e:	d404      	bmi.n	800923a <_fflush_r+0x32>
 8009230:	0599      	lsls	r1, r3, #22
 8009232:	d402      	bmi.n	800923a <_fflush_r+0x32>
 8009234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009236:	f7fd fb40 	bl	80068ba <__retarget_lock_acquire_recursive>
 800923a:	4628      	mov	r0, r5
 800923c:	4621      	mov	r1, r4
 800923e:	f7ff ff5d 	bl	80090fc <__sflush_r>
 8009242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009244:	07da      	lsls	r2, r3, #31
 8009246:	4605      	mov	r5, r0
 8009248:	d4e4      	bmi.n	8009214 <_fflush_r+0xc>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	059b      	lsls	r3, r3, #22
 800924e:	d4e1      	bmi.n	8009214 <_fflush_r+0xc>
 8009250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009252:	f7fd fb33 	bl	80068bc <__retarget_lock_release_recursive>
 8009256:	e7dd      	b.n	8009214 <_fflush_r+0xc>

08009258 <memmove>:
 8009258:	4288      	cmp	r0, r1
 800925a:	b510      	push	{r4, lr}
 800925c:	eb01 0402 	add.w	r4, r1, r2
 8009260:	d902      	bls.n	8009268 <memmove+0x10>
 8009262:	4284      	cmp	r4, r0
 8009264:	4623      	mov	r3, r4
 8009266:	d807      	bhi.n	8009278 <memmove+0x20>
 8009268:	1e43      	subs	r3, r0, #1
 800926a:	42a1      	cmp	r1, r4
 800926c:	d008      	beq.n	8009280 <memmove+0x28>
 800926e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009276:	e7f8      	b.n	800926a <memmove+0x12>
 8009278:	4402      	add	r2, r0
 800927a:	4601      	mov	r1, r0
 800927c:	428a      	cmp	r2, r1
 800927e:	d100      	bne.n	8009282 <memmove+0x2a>
 8009280:	bd10      	pop	{r4, pc}
 8009282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800928a:	e7f7      	b.n	800927c <memmove+0x24>

0800928c <strncmp>:
 800928c:	b510      	push	{r4, lr}
 800928e:	b16a      	cbz	r2, 80092ac <strncmp+0x20>
 8009290:	3901      	subs	r1, #1
 8009292:	1884      	adds	r4, r0, r2
 8009294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009298:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800929c:	429a      	cmp	r2, r3
 800929e:	d103      	bne.n	80092a8 <strncmp+0x1c>
 80092a0:	42a0      	cmp	r0, r4
 80092a2:	d001      	beq.n	80092a8 <strncmp+0x1c>
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	d1f5      	bne.n	8009294 <strncmp+0x8>
 80092a8:	1ad0      	subs	r0, r2, r3
 80092aa:	bd10      	pop	{r4, pc}
 80092ac:	4610      	mov	r0, r2
 80092ae:	e7fc      	b.n	80092aa <strncmp+0x1e>

080092b0 <_sbrk_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d06      	ldr	r5, [pc, #24]	; (80092cc <_sbrk_r+0x1c>)
 80092b4:	2300      	movs	r3, #0
 80092b6:	4604      	mov	r4, r0
 80092b8:	4608      	mov	r0, r1
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	f7f8 fb0c 	bl	80018d8 <_sbrk>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_sbrk_r+0x1a>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_sbrk_r+0x1a>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	200004e0 	.word	0x200004e0

080092d0 <memcpy>:
 80092d0:	440a      	add	r2, r1
 80092d2:	4291      	cmp	r1, r2
 80092d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092d8:	d100      	bne.n	80092dc <memcpy+0xc>
 80092da:	4770      	bx	lr
 80092dc:	b510      	push	{r4, lr}
 80092de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092e6:	4291      	cmp	r1, r2
 80092e8:	d1f9      	bne.n	80092de <memcpy+0xe>
 80092ea:	bd10      	pop	{r4, pc}
 80092ec:	0000      	movs	r0, r0
	...

080092f0 <nan>:
 80092f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80092f8 <nan+0x8>
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	00000000 	.word	0x00000000
 80092fc:	7ff80000 	.word	0x7ff80000

08009300 <__assert_func>:
 8009300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009302:	4614      	mov	r4, r2
 8009304:	461a      	mov	r2, r3
 8009306:	4b09      	ldr	r3, [pc, #36]	; (800932c <__assert_func+0x2c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4605      	mov	r5, r0
 800930c:	68d8      	ldr	r0, [r3, #12]
 800930e:	b14c      	cbz	r4, 8009324 <__assert_func+0x24>
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <__assert_func+0x30>)
 8009312:	9100      	str	r1, [sp, #0]
 8009314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009318:	4906      	ldr	r1, [pc, #24]	; (8009334 <__assert_func+0x34>)
 800931a:	462b      	mov	r3, r5
 800931c:	f000 fbca 	bl	8009ab4 <fiprintf>
 8009320:	f000 fbda 	bl	8009ad8 <abort>
 8009324:	4b04      	ldr	r3, [pc, #16]	; (8009338 <__assert_func+0x38>)
 8009326:	461c      	mov	r4, r3
 8009328:	e7f3      	b.n	8009312 <__assert_func+0x12>
 800932a:	bf00      	nop
 800932c:	20000064 	.word	0x20000064
 8009330:	0800a422 	.word	0x0800a422
 8009334:	0800a42f 	.word	0x0800a42f
 8009338:	0800a45d 	.word	0x0800a45d

0800933c <_calloc_r>:
 800933c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800933e:	fba1 2402 	umull	r2, r4, r1, r2
 8009342:	b94c      	cbnz	r4, 8009358 <_calloc_r+0x1c>
 8009344:	4611      	mov	r1, r2
 8009346:	9201      	str	r2, [sp, #4]
 8009348:	f7fe f9b0 	bl	80076ac <_malloc_r>
 800934c:	9a01      	ldr	r2, [sp, #4]
 800934e:	4605      	mov	r5, r0
 8009350:	b930      	cbnz	r0, 8009360 <_calloc_r+0x24>
 8009352:	4628      	mov	r0, r5
 8009354:	b003      	add	sp, #12
 8009356:	bd30      	pop	{r4, r5, pc}
 8009358:	220c      	movs	r2, #12
 800935a:	6002      	str	r2, [r0, #0]
 800935c:	2500      	movs	r5, #0
 800935e:	e7f8      	b.n	8009352 <_calloc_r+0x16>
 8009360:	4621      	mov	r1, r4
 8009362:	f7fd fa2c 	bl	80067be <memset>
 8009366:	e7f4      	b.n	8009352 <_calloc_r+0x16>

08009368 <rshift>:
 8009368:	6903      	ldr	r3, [r0, #16]
 800936a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800936e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009372:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009376:	f100 0414 	add.w	r4, r0, #20
 800937a:	dd45      	ble.n	8009408 <rshift+0xa0>
 800937c:	f011 011f 	ands.w	r1, r1, #31
 8009380:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009384:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009388:	d10c      	bne.n	80093a4 <rshift+0x3c>
 800938a:	f100 0710 	add.w	r7, r0, #16
 800938e:	4629      	mov	r1, r5
 8009390:	42b1      	cmp	r1, r6
 8009392:	d334      	bcc.n	80093fe <rshift+0x96>
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	1eea      	subs	r2, r5, #3
 800939a:	4296      	cmp	r6, r2
 800939c:	bf38      	it	cc
 800939e:	2300      	movcc	r3, #0
 80093a0:	4423      	add	r3, r4
 80093a2:	e015      	b.n	80093d0 <rshift+0x68>
 80093a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093a8:	f1c1 0820 	rsb	r8, r1, #32
 80093ac:	40cf      	lsrs	r7, r1
 80093ae:	f105 0e04 	add.w	lr, r5, #4
 80093b2:	46a1      	mov	r9, r4
 80093b4:	4576      	cmp	r6, lr
 80093b6:	46f4      	mov	ip, lr
 80093b8:	d815      	bhi.n	80093e6 <rshift+0x7e>
 80093ba:	1a9a      	subs	r2, r3, r2
 80093bc:	0092      	lsls	r2, r2, #2
 80093be:	3a04      	subs	r2, #4
 80093c0:	3501      	adds	r5, #1
 80093c2:	42ae      	cmp	r6, r5
 80093c4:	bf38      	it	cc
 80093c6:	2200      	movcc	r2, #0
 80093c8:	18a3      	adds	r3, r4, r2
 80093ca:	50a7      	str	r7, [r4, r2]
 80093cc:	b107      	cbz	r7, 80093d0 <rshift+0x68>
 80093ce:	3304      	adds	r3, #4
 80093d0:	1b1a      	subs	r2, r3, r4
 80093d2:	42a3      	cmp	r3, r4
 80093d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093d8:	bf08      	it	eq
 80093da:	2300      	moveq	r3, #0
 80093dc:	6102      	str	r2, [r0, #16]
 80093de:	bf08      	it	eq
 80093e0:	6143      	streq	r3, [r0, #20]
 80093e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093e6:	f8dc c000 	ldr.w	ip, [ip]
 80093ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80093ee:	ea4c 0707 	orr.w	r7, ip, r7
 80093f2:	f849 7b04 	str.w	r7, [r9], #4
 80093f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093fa:	40cf      	lsrs	r7, r1
 80093fc:	e7da      	b.n	80093b4 <rshift+0x4c>
 80093fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8009402:	f847 cf04 	str.w	ip, [r7, #4]!
 8009406:	e7c3      	b.n	8009390 <rshift+0x28>
 8009408:	4623      	mov	r3, r4
 800940a:	e7e1      	b.n	80093d0 <rshift+0x68>

0800940c <__hexdig_fun>:
 800940c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009410:	2b09      	cmp	r3, #9
 8009412:	d802      	bhi.n	800941a <__hexdig_fun+0xe>
 8009414:	3820      	subs	r0, #32
 8009416:	b2c0      	uxtb	r0, r0
 8009418:	4770      	bx	lr
 800941a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800941e:	2b05      	cmp	r3, #5
 8009420:	d801      	bhi.n	8009426 <__hexdig_fun+0x1a>
 8009422:	3847      	subs	r0, #71	; 0x47
 8009424:	e7f7      	b.n	8009416 <__hexdig_fun+0xa>
 8009426:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800942a:	2b05      	cmp	r3, #5
 800942c:	d801      	bhi.n	8009432 <__hexdig_fun+0x26>
 800942e:	3827      	subs	r0, #39	; 0x27
 8009430:	e7f1      	b.n	8009416 <__hexdig_fun+0xa>
 8009432:	2000      	movs	r0, #0
 8009434:	4770      	bx	lr
	...

08009438 <__gethex>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	4617      	mov	r7, r2
 800943e:	680a      	ldr	r2, [r1, #0]
 8009440:	b085      	sub	sp, #20
 8009442:	f102 0b02 	add.w	fp, r2, #2
 8009446:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800944a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800944e:	4681      	mov	r9, r0
 8009450:	468a      	mov	sl, r1
 8009452:	9302      	str	r3, [sp, #8]
 8009454:	32fe      	adds	r2, #254	; 0xfe
 8009456:	eb02 030b 	add.w	r3, r2, fp
 800945a:	46d8      	mov	r8, fp
 800945c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	2830      	cmp	r0, #48	; 0x30
 8009464:	d0f7      	beq.n	8009456 <__gethex+0x1e>
 8009466:	f7ff ffd1 	bl	800940c <__hexdig_fun>
 800946a:	4604      	mov	r4, r0
 800946c:	2800      	cmp	r0, #0
 800946e:	d138      	bne.n	80094e2 <__gethex+0xaa>
 8009470:	49a7      	ldr	r1, [pc, #668]	; (8009710 <__gethex+0x2d8>)
 8009472:	2201      	movs	r2, #1
 8009474:	4640      	mov	r0, r8
 8009476:	f7ff ff09 	bl	800928c <strncmp>
 800947a:	4606      	mov	r6, r0
 800947c:	2800      	cmp	r0, #0
 800947e:	d169      	bne.n	8009554 <__gethex+0x11c>
 8009480:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009484:	465d      	mov	r5, fp
 8009486:	f7ff ffc1 	bl	800940c <__hexdig_fun>
 800948a:	2800      	cmp	r0, #0
 800948c:	d064      	beq.n	8009558 <__gethex+0x120>
 800948e:	465a      	mov	r2, fp
 8009490:	7810      	ldrb	r0, [r2, #0]
 8009492:	2830      	cmp	r0, #48	; 0x30
 8009494:	4690      	mov	r8, r2
 8009496:	f102 0201 	add.w	r2, r2, #1
 800949a:	d0f9      	beq.n	8009490 <__gethex+0x58>
 800949c:	f7ff ffb6 	bl	800940c <__hexdig_fun>
 80094a0:	2301      	movs	r3, #1
 80094a2:	fab0 f480 	clz	r4, r0
 80094a6:	0964      	lsrs	r4, r4, #5
 80094a8:	465e      	mov	r6, fp
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	4642      	mov	r2, r8
 80094ae:	4615      	mov	r5, r2
 80094b0:	3201      	adds	r2, #1
 80094b2:	7828      	ldrb	r0, [r5, #0]
 80094b4:	f7ff ffaa 	bl	800940c <__hexdig_fun>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d1f8      	bne.n	80094ae <__gethex+0x76>
 80094bc:	4994      	ldr	r1, [pc, #592]	; (8009710 <__gethex+0x2d8>)
 80094be:	2201      	movs	r2, #1
 80094c0:	4628      	mov	r0, r5
 80094c2:	f7ff fee3 	bl	800928c <strncmp>
 80094c6:	b978      	cbnz	r0, 80094e8 <__gethex+0xb0>
 80094c8:	b946      	cbnz	r6, 80094dc <__gethex+0xa4>
 80094ca:	1c6e      	adds	r6, r5, #1
 80094cc:	4632      	mov	r2, r6
 80094ce:	4615      	mov	r5, r2
 80094d0:	3201      	adds	r2, #1
 80094d2:	7828      	ldrb	r0, [r5, #0]
 80094d4:	f7ff ff9a 	bl	800940c <__hexdig_fun>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d1f8      	bne.n	80094ce <__gethex+0x96>
 80094dc:	1b73      	subs	r3, r6, r5
 80094de:	009e      	lsls	r6, r3, #2
 80094e0:	e004      	b.n	80094ec <__gethex+0xb4>
 80094e2:	2400      	movs	r4, #0
 80094e4:	4626      	mov	r6, r4
 80094e6:	e7e1      	b.n	80094ac <__gethex+0x74>
 80094e8:	2e00      	cmp	r6, #0
 80094ea:	d1f7      	bne.n	80094dc <__gethex+0xa4>
 80094ec:	782b      	ldrb	r3, [r5, #0]
 80094ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094f2:	2b50      	cmp	r3, #80	; 0x50
 80094f4:	d13d      	bne.n	8009572 <__gethex+0x13a>
 80094f6:	786b      	ldrb	r3, [r5, #1]
 80094f8:	2b2b      	cmp	r3, #43	; 0x2b
 80094fa:	d02f      	beq.n	800955c <__gethex+0x124>
 80094fc:	2b2d      	cmp	r3, #45	; 0x2d
 80094fe:	d031      	beq.n	8009564 <__gethex+0x12c>
 8009500:	1c69      	adds	r1, r5, #1
 8009502:	f04f 0b00 	mov.w	fp, #0
 8009506:	7808      	ldrb	r0, [r1, #0]
 8009508:	f7ff ff80 	bl	800940c <__hexdig_fun>
 800950c:	1e42      	subs	r2, r0, #1
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	2a18      	cmp	r2, #24
 8009512:	d82e      	bhi.n	8009572 <__gethex+0x13a>
 8009514:	f1a0 0210 	sub.w	r2, r0, #16
 8009518:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800951c:	f7ff ff76 	bl	800940c <__hexdig_fun>
 8009520:	f100 3cff 	add.w	ip, r0, #4294967295
 8009524:	fa5f fc8c 	uxtb.w	ip, ip
 8009528:	f1bc 0f18 	cmp.w	ip, #24
 800952c:	d91d      	bls.n	800956a <__gethex+0x132>
 800952e:	f1bb 0f00 	cmp.w	fp, #0
 8009532:	d000      	beq.n	8009536 <__gethex+0xfe>
 8009534:	4252      	negs	r2, r2
 8009536:	4416      	add	r6, r2
 8009538:	f8ca 1000 	str.w	r1, [sl]
 800953c:	b1dc      	cbz	r4, 8009576 <__gethex+0x13e>
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	bf14      	ite	ne
 8009544:	f04f 0800 	movne.w	r8, #0
 8009548:	f04f 0806 	moveq.w	r8, #6
 800954c:	4640      	mov	r0, r8
 800954e:	b005      	add	sp, #20
 8009550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009554:	4645      	mov	r5, r8
 8009556:	4626      	mov	r6, r4
 8009558:	2401      	movs	r4, #1
 800955a:	e7c7      	b.n	80094ec <__gethex+0xb4>
 800955c:	f04f 0b00 	mov.w	fp, #0
 8009560:	1ca9      	adds	r1, r5, #2
 8009562:	e7d0      	b.n	8009506 <__gethex+0xce>
 8009564:	f04f 0b01 	mov.w	fp, #1
 8009568:	e7fa      	b.n	8009560 <__gethex+0x128>
 800956a:	230a      	movs	r3, #10
 800956c:	fb03 0002 	mla	r0, r3, r2, r0
 8009570:	e7d0      	b.n	8009514 <__gethex+0xdc>
 8009572:	4629      	mov	r1, r5
 8009574:	e7e0      	b.n	8009538 <__gethex+0x100>
 8009576:	eba5 0308 	sub.w	r3, r5, r8
 800957a:	3b01      	subs	r3, #1
 800957c:	4621      	mov	r1, r4
 800957e:	2b07      	cmp	r3, #7
 8009580:	dc0a      	bgt.n	8009598 <__gethex+0x160>
 8009582:	4648      	mov	r0, r9
 8009584:	f7fe f91e 	bl	80077c4 <_Balloc>
 8009588:	4604      	mov	r4, r0
 800958a:	b940      	cbnz	r0, 800959e <__gethex+0x166>
 800958c:	4b61      	ldr	r3, [pc, #388]	; (8009714 <__gethex+0x2dc>)
 800958e:	4602      	mov	r2, r0
 8009590:	21e4      	movs	r1, #228	; 0xe4
 8009592:	4861      	ldr	r0, [pc, #388]	; (8009718 <__gethex+0x2e0>)
 8009594:	f7ff feb4 	bl	8009300 <__assert_func>
 8009598:	3101      	adds	r1, #1
 800959a:	105b      	asrs	r3, r3, #1
 800959c:	e7ef      	b.n	800957e <__gethex+0x146>
 800959e:	f100 0a14 	add.w	sl, r0, #20
 80095a2:	2300      	movs	r3, #0
 80095a4:	495a      	ldr	r1, [pc, #360]	; (8009710 <__gethex+0x2d8>)
 80095a6:	f8cd a004 	str.w	sl, [sp, #4]
 80095aa:	469b      	mov	fp, r3
 80095ac:	45a8      	cmp	r8, r5
 80095ae:	d342      	bcc.n	8009636 <__gethex+0x1fe>
 80095b0:	9801      	ldr	r0, [sp, #4]
 80095b2:	f840 bb04 	str.w	fp, [r0], #4
 80095b6:	eba0 000a 	sub.w	r0, r0, sl
 80095ba:	1080      	asrs	r0, r0, #2
 80095bc:	6120      	str	r0, [r4, #16]
 80095be:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80095c2:	4658      	mov	r0, fp
 80095c4:	f7fe f9f0 	bl	80079a8 <__hi0bits>
 80095c8:	683d      	ldr	r5, [r7, #0]
 80095ca:	eba8 0000 	sub.w	r0, r8, r0
 80095ce:	42a8      	cmp	r0, r5
 80095d0:	dd59      	ble.n	8009686 <__gethex+0x24e>
 80095d2:	eba0 0805 	sub.w	r8, r0, r5
 80095d6:	4641      	mov	r1, r8
 80095d8:	4620      	mov	r0, r4
 80095da:	f7fe fd7f 	bl	80080dc <__any_on>
 80095de:	4683      	mov	fp, r0
 80095e0:	b1b8      	cbz	r0, 8009612 <__gethex+0x1da>
 80095e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80095e6:	1159      	asrs	r1, r3, #5
 80095e8:	f003 021f 	and.w	r2, r3, #31
 80095ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80095f0:	f04f 0b01 	mov.w	fp, #1
 80095f4:	fa0b f202 	lsl.w	r2, fp, r2
 80095f8:	420a      	tst	r2, r1
 80095fa:	d00a      	beq.n	8009612 <__gethex+0x1da>
 80095fc:	455b      	cmp	r3, fp
 80095fe:	dd06      	ble.n	800960e <__gethex+0x1d6>
 8009600:	f1a8 0102 	sub.w	r1, r8, #2
 8009604:	4620      	mov	r0, r4
 8009606:	f7fe fd69 	bl	80080dc <__any_on>
 800960a:	2800      	cmp	r0, #0
 800960c:	d138      	bne.n	8009680 <__gethex+0x248>
 800960e:	f04f 0b02 	mov.w	fp, #2
 8009612:	4641      	mov	r1, r8
 8009614:	4620      	mov	r0, r4
 8009616:	f7ff fea7 	bl	8009368 <rshift>
 800961a:	4446      	add	r6, r8
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	42b3      	cmp	r3, r6
 8009620:	da41      	bge.n	80096a6 <__gethex+0x26e>
 8009622:	4621      	mov	r1, r4
 8009624:	4648      	mov	r0, r9
 8009626:	f7fe f90d 	bl	8007844 <_Bfree>
 800962a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800962c:	2300      	movs	r3, #0
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009634:	e78a      	b.n	800954c <__gethex+0x114>
 8009636:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800963a:	2a2e      	cmp	r2, #46	; 0x2e
 800963c:	d014      	beq.n	8009668 <__gethex+0x230>
 800963e:	2b20      	cmp	r3, #32
 8009640:	d106      	bne.n	8009650 <__gethex+0x218>
 8009642:	9b01      	ldr	r3, [sp, #4]
 8009644:	f843 bb04 	str.w	fp, [r3], #4
 8009648:	f04f 0b00 	mov.w	fp, #0
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	465b      	mov	r3, fp
 8009650:	7828      	ldrb	r0, [r5, #0]
 8009652:	9303      	str	r3, [sp, #12]
 8009654:	f7ff feda 	bl	800940c <__hexdig_fun>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	f000 000f 	and.w	r0, r0, #15
 800965e:	4098      	lsls	r0, r3
 8009660:	ea4b 0b00 	orr.w	fp, fp, r0
 8009664:	3304      	adds	r3, #4
 8009666:	e7a1      	b.n	80095ac <__gethex+0x174>
 8009668:	45a8      	cmp	r8, r5
 800966a:	d8e8      	bhi.n	800963e <__gethex+0x206>
 800966c:	2201      	movs	r2, #1
 800966e:	4628      	mov	r0, r5
 8009670:	9303      	str	r3, [sp, #12]
 8009672:	f7ff fe0b 	bl	800928c <strncmp>
 8009676:	4926      	ldr	r1, [pc, #152]	; (8009710 <__gethex+0x2d8>)
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	2800      	cmp	r0, #0
 800967c:	d1df      	bne.n	800963e <__gethex+0x206>
 800967e:	e795      	b.n	80095ac <__gethex+0x174>
 8009680:	f04f 0b03 	mov.w	fp, #3
 8009684:	e7c5      	b.n	8009612 <__gethex+0x1da>
 8009686:	da0b      	bge.n	80096a0 <__gethex+0x268>
 8009688:	eba5 0800 	sub.w	r8, r5, r0
 800968c:	4621      	mov	r1, r4
 800968e:	4642      	mov	r2, r8
 8009690:	4648      	mov	r0, r9
 8009692:	f7fe faf1 	bl	8007c78 <__lshift>
 8009696:	eba6 0608 	sub.w	r6, r6, r8
 800969a:	4604      	mov	r4, r0
 800969c:	f100 0a14 	add.w	sl, r0, #20
 80096a0:	f04f 0b00 	mov.w	fp, #0
 80096a4:	e7ba      	b.n	800961c <__gethex+0x1e4>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	42b3      	cmp	r3, r6
 80096aa:	dd73      	ble.n	8009794 <__gethex+0x35c>
 80096ac:	1b9e      	subs	r6, r3, r6
 80096ae:	42b5      	cmp	r5, r6
 80096b0:	dc34      	bgt.n	800971c <__gethex+0x2e4>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d023      	beq.n	8009700 <__gethex+0x2c8>
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d025      	beq.n	8009708 <__gethex+0x2d0>
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d115      	bne.n	80096ec <__gethex+0x2b4>
 80096c0:	42b5      	cmp	r5, r6
 80096c2:	d113      	bne.n	80096ec <__gethex+0x2b4>
 80096c4:	2d01      	cmp	r5, #1
 80096c6:	d10b      	bne.n	80096e0 <__gethex+0x2a8>
 80096c8:	9a02      	ldr	r2, [sp, #8]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	2301      	movs	r3, #1
 80096d0:	6123      	str	r3, [r4, #16]
 80096d2:	f8ca 3000 	str.w	r3, [sl]
 80096d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096d8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80096dc:	601c      	str	r4, [r3, #0]
 80096de:	e735      	b.n	800954c <__gethex+0x114>
 80096e0:	1e69      	subs	r1, r5, #1
 80096e2:	4620      	mov	r0, r4
 80096e4:	f7fe fcfa 	bl	80080dc <__any_on>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d1ed      	bne.n	80096c8 <__gethex+0x290>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4648      	mov	r0, r9
 80096f0:	f7fe f8a8 	bl	8007844 <_Bfree>
 80096f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096f6:	2300      	movs	r3, #0
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 80096fe:	e725      	b.n	800954c <__gethex+0x114>
 8009700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1f2      	bne.n	80096ec <__gethex+0x2b4>
 8009706:	e7df      	b.n	80096c8 <__gethex+0x290>
 8009708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1dc      	bne.n	80096c8 <__gethex+0x290>
 800970e:	e7ed      	b.n	80096ec <__gethex+0x2b4>
 8009710:	0800a2b4 	.word	0x0800a2b4
 8009714:	0800a14d 	.word	0x0800a14d
 8009718:	0800a45e 	.word	0x0800a45e
 800971c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009720:	f1bb 0f00 	cmp.w	fp, #0
 8009724:	d133      	bne.n	800978e <__gethex+0x356>
 8009726:	f1b8 0f00 	cmp.w	r8, #0
 800972a:	d004      	beq.n	8009736 <__gethex+0x2fe>
 800972c:	4641      	mov	r1, r8
 800972e:	4620      	mov	r0, r4
 8009730:	f7fe fcd4 	bl	80080dc <__any_on>
 8009734:	4683      	mov	fp, r0
 8009736:	ea4f 1268 	mov.w	r2, r8, asr #5
 800973a:	2301      	movs	r3, #1
 800973c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009740:	f008 081f 	and.w	r8, r8, #31
 8009744:	fa03 f308 	lsl.w	r3, r3, r8
 8009748:	4213      	tst	r3, r2
 800974a:	4631      	mov	r1, r6
 800974c:	4620      	mov	r0, r4
 800974e:	bf18      	it	ne
 8009750:	f04b 0b02 	orrne.w	fp, fp, #2
 8009754:	1bad      	subs	r5, r5, r6
 8009756:	f7ff fe07 	bl	8009368 <rshift>
 800975a:	687e      	ldr	r6, [r7, #4]
 800975c:	f04f 0802 	mov.w	r8, #2
 8009760:	f1bb 0f00 	cmp.w	fp, #0
 8009764:	d04a      	beq.n	80097fc <__gethex+0x3c4>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d016      	beq.n	800979a <__gethex+0x362>
 800976c:	2b03      	cmp	r3, #3
 800976e:	d018      	beq.n	80097a2 <__gethex+0x36a>
 8009770:	2b01      	cmp	r3, #1
 8009772:	d109      	bne.n	8009788 <__gethex+0x350>
 8009774:	f01b 0f02 	tst.w	fp, #2
 8009778:	d006      	beq.n	8009788 <__gethex+0x350>
 800977a:	f8da 3000 	ldr.w	r3, [sl]
 800977e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009782:	f01b 0f01 	tst.w	fp, #1
 8009786:	d10f      	bne.n	80097a8 <__gethex+0x370>
 8009788:	f048 0810 	orr.w	r8, r8, #16
 800978c:	e036      	b.n	80097fc <__gethex+0x3c4>
 800978e:	f04f 0b01 	mov.w	fp, #1
 8009792:	e7d0      	b.n	8009736 <__gethex+0x2fe>
 8009794:	f04f 0801 	mov.w	r8, #1
 8009798:	e7e2      	b.n	8009760 <__gethex+0x328>
 800979a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800979c:	f1c3 0301 	rsb	r3, r3, #1
 80097a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80097a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0ef      	beq.n	8009788 <__gethex+0x350>
 80097a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097ac:	f104 0214 	add.w	r2, r4, #20
 80097b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80097ba:	2300      	movs	r3, #0
 80097bc:	4694      	mov	ip, r2
 80097be:	f852 1b04 	ldr.w	r1, [r2], #4
 80097c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80097c6:	d01e      	beq.n	8009806 <__gethex+0x3ce>
 80097c8:	3101      	adds	r1, #1
 80097ca:	f8cc 1000 	str.w	r1, [ip]
 80097ce:	f1b8 0f02 	cmp.w	r8, #2
 80097d2:	f104 0214 	add.w	r2, r4, #20
 80097d6:	d13d      	bne.n	8009854 <__gethex+0x41c>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	3b01      	subs	r3, #1
 80097dc:	42ab      	cmp	r3, r5
 80097de:	d10b      	bne.n	80097f8 <__gethex+0x3c0>
 80097e0:	1169      	asrs	r1, r5, #5
 80097e2:	2301      	movs	r3, #1
 80097e4:	f005 051f 	and.w	r5, r5, #31
 80097e8:	fa03 f505 	lsl.w	r5, r3, r5
 80097ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097f0:	421d      	tst	r5, r3
 80097f2:	bf18      	it	ne
 80097f4:	f04f 0801 	movne.w	r8, #1
 80097f8:	f048 0820 	orr.w	r8, r8, #32
 80097fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097fe:	601c      	str	r4, [r3, #0]
 8009800:	9b02      	ldr	r3, [sp, #8]
 8009802:	601e      	str	r6, [r3, #0]
 8009804:	e6a2      	b.n	800954c <__gethex+0x114>
 8009806:	4290      	cmp	r0, r2
 8009808:	f842 3c04 	str.w	r3, [r2, #-4]
 800980c:	d8d6      	bhi.n	80097bc <__gethex+0x384>
 800980e:	68a2      	ldr	r2, [r4, #8]
 8009810:	4593      	cmp	fp, r2
 8009812:	db17      	blt.n	8009844 <__gethex+0x40c>
 8009814:	6861      	ldr	r1, [r4, #4]
 8009816:	4648      	mov	r0, r9
 8009818:	3101      	adds	r1, #1
 800981a:	f7fd ffd3 	bl	80077c4 <_Balloc>
 800981e:	4682      	mov	sl, r0
 8009820:	b918      	cbnz	r0, 800982a <__gethex+0x3f2>
 8009822:	4b1b      	ldr	r3, [pc, #108]	; (8009890 <__gethex+0x458>)
 8009824:	4602      	mov	r2, r0
 8009826:	2184      	movs	r1, #132	; 0x84
 8009828:	e6b3      	b.n	8009592 <__gethex+0x15a>
 800982a:	6922      	ldr	r2, [r4, #16]
 800982c:	3202      	adds	r2, #2
 800982e:	f104 010c 	add.w	r1, r4, #12
 8009832:	0092      	lsls	r2, r2, #2
 8009834:	300c      	adds	r0, #12
 8009836:	f7ff fd4b 	bl	80092d0 <memcpy>
 800983a:	4621      	mov	r1, r4
 800983c:	4648      	mov	r0, r9
 800983e:	f7fe f801 	bl	8007844 <_Bfree>
 8009842:	4654      	mov	r4, sl
 8009844:	6922      	ldr	r2, [r4, #16]
 8009846:	1c51      	adds	r1, r2, #1
 8009848:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800984c:	6121      	str	r1, [r4, #16]
 800984e:	2101      	movs	r1, #1
 8009850:	6151      	str	r1, [r2, #20]
 8009852:	e7bc      	b.n	80097ce <__gethex+0x396>
 8009854:	6921      	ldr	r1, [r4, #16]
 8009856:	4559      	cmp	r1, fp
 8009858:	dd0b      	ble.n	8009872 <__gethex+0x43a>
 800985a:	2101      	movs	r1, #1
 800985c:	4620      	mov	r0, r4
 800985e:	f7ff fd83 	bl	8009368 <rshift>
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	3601      	adds	r6, #1
 8009866:	42b3      	cmp	r3, r6
 8009868:	f6ff aedb 	blt.w	8009622 <__gethex+0x1ea>
 800986c:	f04f 0801 	mov.w	r8, #1
 8009870:	e7c2      	b.n	80097f8 <__gethex+0x3c0>
 8009872:	f015 051f 	ands.w	r5, r5, #31
 8009876:	d0f9      	beq.n	800986c <__gethex+0x434>
 8009878:	9b01      	ldr	r3, [sp, #4]
 800987a:	441a      	add	r2, r3
 800987c:	f1c5 0520 	rsb	r5, r5, #32
 8009880:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009884:	f7fe f890 	bl	80079a8 <__hi0bits>
 8009888:	42a8      	cmp	r0, r5
 800988a:	dbe6      	blt.n	800985a <__gethex+0x422>
 800988c:	e7ee      	b.n	800986c <__gethex+0x434>
 800988e:	bf00      	nop
 8009890:	0800a14d 	.word	0x0800a14d

08009894 <L_shift>:
 8009894:	f1c2 0208 	rsb	r2, r2, #8
 8009898:	0092      	lsls	r2, r2, #2
 800989a:	b570      	push	{r4, r5, r6, lr}
 800989c:	f1c2 0620 	rsb	r6, r2, #32
 80098a0:	6843      	ldr	r3, [r0, #4]
 80098a2:	6804      	ldr	r4, [r0, #0]
 80098a4:	fa03 f506 	lsl.w	r5, r3, r6
 80098a8:	432c      	orrs	r4, r5
 80098aa:	40d3      	lsrs	r3, r2
 80098ac:	6004      	str	r4, [r0, #0]
 80098ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80098b2:	4288      	cmp	r0, r1
 80098b4:	d3f4      	bcc.n	80098a0 <L_shift+0xc>
 80098b6:	bd70      	pop	{r4, r5, r6, pc}

080098b8 <__match>:
 80098b8:	b530      	push	{r4, r5, lr}
 80098ba:	6803      	ldr	r3, [r0, #0]
 80098bc:	3301      	adds	r3, #1
 80098be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098c2:	b914      	cbnz	r4, 80098ca <__match+0x12>
 80098c4:	6003      	str	r3, [r0, #0]
 80098c6:	2001      	movs	r0, #1
 80098c8:	bd30      	pop	{r4, r5, pc}
 80098ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098d2:	2d19      	cmp	r5, #25
 80098d4:	bf98      	it	ls
 80098d6:	3220      	addls	r2, #32
 80098d8:	42a2      	cmp	r2, r4
 80098da:	d0f0      	beq.n	80098be <__match+0x6>
 80098dc:	2000      	movs	r0, #0
 80098de:	e7f3      	b.n	80098c8 <__match+0x10>

080098e0 <__hexnan>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	680b      	ldr	r3, [r1, #0]
 80098e6:	6801      	ldr	r1, [r0, #0]
 80098e8:	115e      	asrs	r6, r3, #5
 80098ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098ee:	f013 031f 	ands.w	r3, r3, #31
 80098f2:	b087      	sub	sp, #28
 80098f4:	bf18      	it	ne
 80098f6:	3604      	addne	r6, #4
 80098f8:	2500      	movs	r5, #0
 80098fa:	1f37      	subs	r7, r6, #4
 80098fc:	4682      	mov	sl, r0
 80098fe:	4690      	mov	r8, r2
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	f846 5c04 	str.w	r5, [r6, #-4]
 8009906:	46b9      	mov	r9, r7
 8009908:	463c      	mov	r4, r7
 800990a:	9502      	str	r5, [sp, #8]
 800990c:	46ab      	mov	fp, r5
 800990e:	784a      	ldrb	r2, [r1, #1]
 8009910:	1c4b      	adds	r3, r1, #1
 8009912:	9303      	str	r3, [sp, #12]
 8009914:	b342      	cbz	r2, 8009968 <__hexnan+0x88>
 8009916:	4610      	mov	r0, r2
 8009918:	9105      	str	r1, [sp, #20]
 800991a:	9204      	str	r2, [sp, #16]
 800991c:	f7ff fd76 	bl	800940c <__hexdig_fun>
 8009920:	2800      	cmp	r0, #0
 8009922:	d14f      	bne.n	80099c4 <__hexnan+0xe4>
 8009924:	9a04      	ldr	r2, [sp, #16]
 8009926:	9905      	ldr	r1, [sp, #20]
 8009928:	2a20      	cmp	r2, #32
 800992a:	d818      	bhi.n	800995e <__hexnan+0x7e>
 800992c:	9b02      	ldr	r3, [sp, #8]
 800992e:	459b      	cmp	fp, r3
 8009930:	dd13      	ble.n	800995a <__hexnan+0x7a>
 8009932:	454c      	cmp	r4, r9
 8009934:	d206      	bcs.n	8009944 <__hexnan+0x64>
 8009936:	2d07      	cmp	r5, #7
 8009938:	dc04      	bgt.n	8009944 <__hexnan+0x64>
 800993a:	462a      	mov	r2, r5
 800993c:	4649      	mov	r1, r9
 800993e:	4620      	mov	r0, r4
 8009940:	f7ff ffa8 	bl	8009894 <L_shift>
 8009944:	4544      	cmp	r4, r8
 8009946:	d950      	bls.n	80099ea <__hexnan+0x10a>
 8009948:	2300      	movs	r3, #0
 800994a:	f1a4 0904 	sub.w	r9, r4, #4
 800994e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009952:	f8cd b008 	str.w	fp, [sp, #8]
 8009956:	464c      	mov	r4, r9
 8009958:	461d      	mov	r5, r3
 800995a:	9903      	ldr	r1, [sp, #12]
 800995c:	e7d7      	b.n	800990e <__hexnan+0x2e>
 800995e:	2a29      	cmp	r2, #41	; 0x29
 8009960:	d155      	bne.n	8009a0e <__hexnan+0x12e>
 8009962:	3102      	adds	r1, #2
 8009964:	f8ca 1000 	str.w	r1, [sl]
 8009968:	f1bb 0f00 	cmp.w	fp, #0
 800996c:	d04f      	beq.n	8009a0e <__hexnan+0x12e>
 800996e:	454c      	cmp	r4, r9
 8009970:	d206      	bcs.n	8009980 <__hexnan+0xa0>
 8009972:	2d07      	cmp	r5, #7
 8009974:	dc04      	bgt.n	8009980 <__hexnan+0xa0>
 8009976:	462a      	mov	r2, r5
 8009978:	4649      	mov	r1, r9
 800997a:	4620      	mov	r0, r4
 800997c:	f7ff ff8a 	bl	8009894 <L_shift>
 8009980:	4544      	cmp	r4, r8
 8009982:	d934      	bls.n	80099ee <__hexnan+0x10e>
 8009984:	f1a8 0204 	sub.w	r2, r8, #4
 8009988:	4623      	mov	r3, r4
 800998a:	f853 1b04 	ldr.w	r1, [r3], #4
 800998e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009992:	429f      	cmp	r7, r3
 8009994:	d2f9      	bcs.n	800998a <__hexnan+0xaa>
 8009996:	1b3b      	subs	r3, r7, r4
 8009998:	f023 0303 	bic.w	r3, r3, #3
 800999c:	3304      	adds	r3, #4
 800999e:	3e03      	subs	r6, #3
 80099a0:	3401      	adds	r4, #1
 80099a2:	42a6      	cmp	r6, r4
 80099a4:	bf38      	it	cc
 80099a6:	2304      	movcc	r3, #4
 80099a8:	4443      	add	r3, r8
 80099aa:	2200      	movs	r2, #0
 80099ac:	f843 2b04 	str.w	r2, [r3], #4
 80099b0:	429f      	cmp	r7, r3
 80099b2:	d2fb      	bcs.n	80099ac <__hexnan+0xcc>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	b91b      	cbnz	r3, 80099c0 <__hexnan+0xe0>
 80099b8:	4547      	cmp	r7, r8
 80099ba:	d126      	bne.n	8009a0a <__hexnan+0x12a>
 80099bc:	2301      	movs	r3, #1
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	2005      	movs	r0, #5
 80099c2:	e025      	b.n	8009a10 <__hexnan+0x130>
 80099c4:	3501      	adds	r5, #1
 80099c6:	2d08      	cmp	r5, #8
 80099c8:	f10b 0b01 	add.w	fp, fp, #1
 80099cc:	dd06      	ble.n	80099dc <__hexnan+0xfc>
 80099ce:	4544      	cmp	r4, r8
 80099d0:	d9c3      	bls.n	800995a <__hexnan+0x7a>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80099d8:	2501      	movs	r5, #1
 80099da:	3c04      	subs	r4, #4
 80099dc:	6822      	ldr	r2, [r4, #0]
 80099de:	f000 000f 	and.w	r0, r0, #15
 80099e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80099e6:	6020      	str	r0, [r4, #0]
 80099e8:	e7b7      	b.n	800995a <__hexnan+0x7a>
 80099ea:	2508      	movs	r5, #8
 80099ec:	e7b5      	b.n	800995a <__hexnan+0x7a>
 80099ee:	9b01      	ldr	r3, [sp, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0df      	beq.n	80099b4 <__hexnan+0xd4>
 80099f4:	f1c3 0320 	rsb	r3, r3, #32
 80099f8:	f04f 32ff 	mov.w	r2, #4294967295
 80099fc:	40da      	lsrs	r2, r3
 80099fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a02:	4013      	ands	r3, r2
 8009a04:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a08:	e7d4      	b.n	80099b4 <__hexnan+0xd4>
 8009a0a:	3f04      	subs	r7, #4
 8009a0c:	e7d2      	b.n	80099b4 <__hexnan+0xd4>
 8009a0e:	2004      	movs	r0, #4
 8009a10:	b007      	add	sp, #28
 8009a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a16 <__ascii_mbtowc>:
 8009a16:	b082      	sub	sp, #8
 8009a18:	b901      	cbnz	r1, 8009a1c <__ascii_mbtowc+0x6>
 8009a1a:	a901      	add	r1, sp, #4
 8009a1c:	b142      	cbz	r2, 8009a30 <__ascii_mbtowc+0x1a>
 8009a1e:	b14b      	cbz	r3, 8009a34 <__ascii_mbtowc+0x1e>
 8009a20:	7813      	ldrb	r3, [r2, #0]
 8009a22:	600b      	str	r3, [r1, #0]
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	1e10      	subs	r0, r2, #0
 8009a28:	bf18      	it	ne
 8009a2a:	2001      	movne	r0, #1
 8009a2c:	b002      	add	sp, #8
 8009a2e:	4770      	bx	lr
 8009a30:	4610      	mov	r0, r2
 8009a32:	e7fb      	b.n	8009a2c <__ascii_mbtowc+0x16>
 8009a34:	f06f 0001 	mvn.w	r0, #1
 8009a38:	e7f8      	b.n	8009a2c <__ascii_mbtowc+0x16>

08009a3a <_realloc_r>:
 8009a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3e:	4680      	mov	r8, r0
 8009a40:	4614      	mov	r4, r2
 8009a42:	460e      	mov	r6, r1
 8009a44:	b921      	cbnz	r1, 8009a50 <_realloc_r+0x16>
 8009a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	f7fd be2e 	b.w	80076ac <_malloc_r>
 8009a50:	b92a      	cbnz	r2, 8009a5e <_realloc_r+0x24>
 8009a52:	f7fd fdb7 	bl	80075c4 <_free_r>
 8009a56:	4625      	mov	r5, r4
 8009a58:	4628      	mov	r0, r5
 8009a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a5e:	f000 f842 	bl	8009ae6 <_malloc_usable_size_r>
 8009a62:	4284      	cmp	r4, r0
 8009a64:	4607      	mov	r7, r0
 8009a66:	d802      	bhi.n	8009a6e <_realloc_r+0x34>
 8009a68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a6c:	d812      	bhi.n	8009a94 <_realloc_r+0x5a>
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4640      	mov	r0, r8
 8009a72:	f7fd fe1b 	bl	80076ac <_malloc_r>
 8009a76:	4605      	mov	r5, r0
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d0ed      	beq.n	8009a58 <_realloc_r+0x1e>
 8009a7c:	42bc      	cmp	r4, r7
 8009a7e:	4622      	mov	r2, r4
 8009a80:	4631      	mov	r1, r6
 8009a82:	bf28      	it	cs
 8009a84:	463a      	movcs	r2, r7
 8009a86:	f7ff fc23 	bl	80092d0 <memcpy>
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	f7fd fd99 	bl	80075c4 <_free_r>
 8009a92:	e7e1      	b.n	8009a58 <_realloc_r+0x1e>
 8009a94:	4635      	mov	r5, r6
 8009a96:	e7df      	b.n	8009a58 <_realloc_r+0x1e>

08009a98 <__ascii_wctomb>:
 8009a98:	b149      	cbz	r1, 8009aae <__ascii_wctomb+0x16>
 8009a9a:	2aff      	cmp	r2, #255	; 0xff
 8009a9c:	bf85      	ittet	hi
 8009a9e:	238a      	movhi	r3, #138	; 0x8a
 8009aa0:	6003      	strhi	r3, [r0, #0]
 8009aa2:	700a      	strbls	r2, [r1, #0]
 8009aa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009aa8:	bf98      	it	ls
 8009aaa:	2001      	movls	r0, #1
 8009aac:	4770      	bx	lr
 8009aae:	4608      	mov	r0, r1
 8009ab0:	4770      	bx	lr
	...

08009ab4 <fiprintf>:
 8009ab4:	b40e      	push	{r1, r2, r3}
 8009ab6:	b503      	push	{r0, r1, lr}
 8009ab8:	4601      	mov	r1, r0
 8009aba:	ab03      	add	r3, sp, #12
 8009abc:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <fiprintf+0x20>)
 8009abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac2:	6800      	ldr	r0, [r0, #0]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	f000 f83f 	bl	8009b48 <_vfiprintf_r>
 8009aca:	b002      	add	sp, #8
 8009acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad0:	b003      	add	sp, #12
 8009ad2:	4770      	bx	lr
 8009ad4:	20000064 	.word	0x20000064

08009ad8 <abort>:
 8009ad8:	b508      	push	{r3, lr}
 8009ada:	2006      	movs	r0, #6
 8009adc:	f000 fa0c 	bl	8009ef8 <raise>
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	f7f7 fe81 	bl	80017e8 <_exit>

08009ae6 <_malloc_usable_size_r>:
 8009ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aea:	1f18      	subs	r0, r3, #4
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	bfbc      	itt	lt
 8009af0:	580b      	ldrlt	r3, [r1, r0]
 8009af2:	18c0      	addlt	r0, r0, r3
 8009af4:	4770      	bx	lr

08009af6 <__sfputc_r>:
 8009af6:	6893      	ldr	r3, [r2, #8]
 8009af8:	3b01      	subs	r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	b410      	push	{r4}
 8009afe:	6093      	str	r3, [r2, #8]
 8009b00:	da08      	bge.n	8009b14 <__sfputc_r+0x1e>
 8009b02:	6994      	ldr	r4, [r2, #24]
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	db01      	blt.n	8009b0c <__sfputc_r+0x16>
 8009b08:	290a      	cmp	r1, #10
 8009b0a:	d103      	bne.n	8009b14 <__sfputc_r+0x1e>
 8009b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b10:	f000 b934 	b.w	8009d7c <__swbuf_r>
 8009b14:	6813      	ldr	r3, [r2, #0]
 8009b16:	1c58      	adds	r0, r3, #1
 8009b18:	6010      	str	r0, [r2, #0]
 8009b1a:	7019      	strb	r1, [r3, #0]
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <__sfputs_r>:
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	4606      	mov	r6, r0
 8009b28:	460f      	mov	r7, r1
 8009b2a:	4614      	mov	r4, r2
 8009b2c:	18d5      	adds	r5, r2, r3
 8009b2e:	42ac      	cmp	r4, r5
 8009b30:	d101      	bne.n	8009b36 <__sfputs_r+0x12>
 8009b32:	2000      	movs	r0, #0
 8009b34:	e007      	b.n	8009b46 <__sfputs_r+0x22>
 8009b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b3a:	463a      	mov	r2, r7
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f7ff ffda 	bl	8009af6 <__sfputc_r>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	d1f3      	bne.n	8009b2e <__sfputs_r+0xa>
 8009b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b48 <_vfiprintf_r>:
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	b09d      	sub	sp, #116	; 0x74
 8009b50:	4614      	mov	r4, r2
 8009b52:	4698      	mov	r8, r3
 8009b54:	4606      	mov	r6, r0
 8009b56:	b118      	cbz	r0, 8009b60 <_vfiprintf_r+0x18>
 8009b58:	6a03      	ldr	r3, [r0, #32]
 8009b5a:	b90b      	cbnz	r3, 8009b60 <_vfiprintf_r+0x18>
 8009b5c:	f7fc fd96 	bl	800668c <__sinit>
 8009b60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b62:	07d9      	lsls	r1, r3, #31
 8009b64:	d405      	bmi.n	8009b72 <_vfiprintf_r+0x2a>
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	059a      	lsls	r2, r3, #22
 8009b6a:	d402      	bmi.n	8009b72 <_vfiprintf_r+0x2a>
 8009b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b6e:	f7fc fea4 	bl	80068ba <__retarget_lock_acquire_recursive>
 8009b72:	89ab      	ldrh	r3, [r5, #12]
 8009b74:	071b      	lsls	r3, r3, #28
 8009b76:	d501      	bpl.n	8009b7c <_vfiprintf_r+0x34>
 8009b78:	692b      	ldr	r3, [r5, #16]
 8009b7a:	b99b      	cbnz	r3, 8009ba4 <_vfiprintf_r+0x5c>
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f000 f93a 	bl	8009df8 <__swsetup_r>
 8009b84:	b170      	cbz	r0, 8009ba4 <_vfiprintf_r+0x5c>
 8009b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b88:	07dc      	lsls	r4, r3, #31
 8009b8a:	d504      	bpl.n	8009b96 <_vfiprintf_r+0x4e>
 8009b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b90:	b01d      	add	sp, #116	; 0x74
 8009b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b96:	89ab      	ldrh	r3, [r5, #12]
 8009b98:	0598      	lsls	r0, r3, #22
 8009b9a:	d4f7      	bmi.n	8009b8c <_vfiprintf_r+0x44>
 8009b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b9e:	f7fc fe8d 	bl	80068bc <__retarget_lock_release_recursive>
 8009ba2:	e7f3      	b.n	8009b8c <_vfiprintf_r+0x44>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba8:	2320      	movs	r3, #32
 8009baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bb2:	2330      	movs	r3, #48	; 0x30
 8009bb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d68 <_vfiprintf_r+0x220>
 8009bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bbc:	f04f 0901 	mov.w	r9, #1
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	469a      	mov	sl, r3
 8009bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bc8:	b10a      	cbz	r2, 8009bce <_vfiprintf_r+0x86>
 8009bca:	2a25      	cmp	r2, #37	; 0x25
 8009bcc:	d1f9      	bne.n	8009bc2 <_vfiprintf_r+0x7a>
 8009bce:	ebba 0b04 	subs.w	fp, sl, r4
 8009bd2:	d00b      	beq.n	8009bec <_vfiprintf_r+0xa4>
 8009bd4:	465b      	mov	r3, fp
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f7ff ffa2 	bl	8009b24 <__sfputs_r>
 8009be0:	3001      	adds	r0, #1
 8009be2:	f000 80a9 	beq.w	8009d38 <_vfiprintf_r+0x1f0>
 8009be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009be8:	445a      	add	r2, fp
 8009bea:	9209      	str	r2, [sp, #36]	; 0x24
 8009bec:	f89a 3000 	ldrb.w	r3, [sl]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 80a1 	beq.w	8009d38 <_vfiprintf_r+0x1f0>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c00:	f10a 0a01 	add.w	sl, sl, #1
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	9307      	str	r3, [sp, #28]
 8009c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c0e:	4654      	mov	r4, sl
 8009c10:	2205      	movs	r2, #5
 8009c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c16:	4854      	ldr	r0, [pc, #336]	; (8009d68 <_vfiprintf_r+0x220>)
 8009c18:	f7f6 fada 	bl	80001d0 <memchr>
 8009c1c:	9a04      	ldr	r2, [sp, #16]
 8009c1e:	b9d8      	cbnz	r0, 8009c58 <_vfiprintf_r+0x110>
 8009c20:	06d1      	lsls	r1, r2, #27
 8009c22:	bf44      	itt	mi
 8009c24:	2320      	movmi	r3, #32
 8009c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c2a:	0713      	lsls	r3, r2, #28
 8009c2c:	bf44      	itt	mi
 8009c2e:	232b      	movmi	r3, #43	; 0x2b
 8009c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c34:	f89a 3000 	ldrb.w	r3, [sl]
 8009c38:	2b2a      	cmp	r3, #42	; 0x2a
 8009c3a:	d015      	beq.n	8009c68 <_vfiprintf_r+0x120>
 8009c3c:	9a07      	ldr	r2, [sp, #28]
 8009c3e:	4654      	mov	r4, sl
 8009c40:	2000      	movs	r0, #0
 8009c42:	f04f 0c0a 	mov.w	ip, #10
 8009c46:	4621      	mov	r1, r4
 8009c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c4c:	3b30      	subs	r3, #48	; 0x30
 8009c4e:	2b09      	cmp	r3, #9
 8009c50:	d94d      	bls.n	8009cee <_vfiprintf_r+0x1a6>
 8009c52:	b1b0      	cbz	r0, 8009c82 <_vfiprintf_r+0x13a>
 8009c54:	9207      	str	r2, [sp, #28]
 8009c56:	e014      	b.n	8009c82 <_vfiprintf_r+0x13a>
 8009c58:	eba0 0308 	sub.w	r3, r0, r8
 8009c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c60:	4313      	orrs	r3, r2
 8009c62:	9304      	str	r3, [sp, #16]
 8009c64:	46a2      	mov	sl, r4
 8009c66:	e7d2      	b.n	8009c0e <_vfiprintf_r+0xc6>
 8009c68:	9b03      	ldr	r3, [sp, #12]
 8009c6a:	1d19      	adds	r1, r3, #4
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	9103      	str	r1, [sp, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	bfbb      	ittet	lt
 8009c74:	425b      	neglt	r3, r3
 8009c76:	f042 0202 	orrlt.w	r2, r2, #2
 8009c7a:	9307      	strge	r3, [sp, #28]
 8009c7c:	9307      	strlt	r3, [sp, #28]
 8009c7e:	bfb8      	it	lt
 8009c80:	9204      	strlt	r2, [sp, #16]
 8009c82:	7823      	ldrb	r3, [r4, #0]
 8009c84:	2b2e      	cmp	r3, #46	; 0x2e
 8009c86:	d10c      	bne.n	8009ca2 <_vfiprintf_r+0x15a>
 8009c88:	7863      	ldrb	r3, [r4, #1]
 8009c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c8c:	d134      	bne.n	8009cf8 <_vfiprintf_r+0x1b0>
 8009c8e:	9b03      	ldr	r3, [sp, #12]
 8009c90:	1d1a      	adds	r2, r3, #4
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	9203      	str	r2, [sp, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	bfb8      	it	lt
 8009c9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c9e:	3402      	adds	r4, #2
 8009ca0:	9305      	str	r3, [sp, #20]
 8009ca2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d78 <_vfiprintf_r+0x230>
 8009ca6:	7821      	ldrb	r1, [r4, #0]
 8009ca8:	2203      	movs	r2, #3
 8009caa:	4650      	mov	r0, sl
 8009cac:	f7f6 fa90 	bl	80001d0 <memchr>
 8009cb0:	b138      	cbz	r0, 8009cc2 <_vfiprintf_r+0x17a>
 8009cb2:	9b04      	ldr	r3, [sp, #16]
 8009cb4:	eba0 000a 	sub.w	r0, r0, sl
 8009cb8:	2240      	movs	r2, #64	; 0x40
 8009cba:	4082      	lsls	r2, r0
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	3401      	adds	r4, #1
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc6:	4829      	ldr	r0, [pc, #164]	; (8009d6c <_vfiprintf_r+0x224>)
 8009cc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ccc:	2206      	movs	r2, #6
 8009cce:	f7f6 fa7f 	bl	80001d0 <memchr>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d03f      	beq.n	8009d56 <_vfiprintf_r+0x20e>
 8009cd6:	4b26      	ldr	r3, [pc, #152]	; (8009d70 <_vfiprintf_r+0x228>)
 8009cd8:	bb1b      	cbnz	r3, 8009d22 <_vfiprintf_r+0x1da>
 8009cda:	9b03      	ldr	r3, [sp, #12]
 8009cdc:	3307      	adds	r3, #7
 8009cde:	f023 0307 	bic.w	r3, r3, #7
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	9303      	str	r3, [sp, #12]
 8009ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce8:	443b      	add	r3, r7
 8009cea:	9309      	str	r3, [sp, #36]	; 0x24
 8009cec:	e768      	b.n	8009bc0 <_vfiprintf_r+0x78>
 8009cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	e7a6      	b.n	8009c46 <_vfiprintf_r+0xfe>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	3401      	adds	r4, #1
 8009cfc:	9305      	str	r3, [sp, #20]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	f04f 0c0a 	mov.w	ip, #10
 8009d04:	4620      	mov	r0, r4
 8009d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d0a:	3a30      	subs	r2, #48	; 0x30
 8009d0c:	2a09      	cmp	r2, #9
 8009d0e:	d903      	bls.n	8009d18 <_vfiprintf_r+0x1d0>
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0c6      	beq.n	8009ca2 <_vfiprintf_r+0x15a>
 8009d14:	9105      	str	r1, [sp, #20]
 8009d16:	e7c4      	b.n	8009ca2 <_vfiprintf_r+0x15a>
 8009d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e7f0      	b.n	8009d04 <_vfiprintf_r+0x1bc>
 8009d22:	ab03      	add	r3, sp, #12
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	462a      	mov	r2, r5
 8009d28:	4b12      	ldr	r3, [pc, #72]	; (8009d74 <_vfiprintf_r+0x22c>)
 8009d2a:	a904      	add	r1, sp, #16
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7fb fe4b 	bl	80059c8 <_printf_float>
 8009d32:	4607      	mov	r7, r0
 8009d34:	1c78      	adds	r0, r7, #1
 8009d36:	d1d6      	bne.n	8009ce6 <_vfiprintf_r+0x19e>
 8009d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d3a:	07d9      	lsls	r1, r3, #31
 8009d3c:	d405      	bmi.n	8009d4a <_vfiprintf_r+0x202>
 8009d3e:	89ab      	ldrh	r3, [r5, #12]
 8009d40:	059a      	lsls	r2, r3, #22
 8009d42:	d402      	bmi.n	8009d4a <_vfiprintf_r+0x202>
 8009d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d46:	f7fc fdb9 	bl	80068bc <__retarget_lock_release_recursive>
 8009d4a:	89ab      	ldrh	r3, [r5, #12]
 8009d4c:	065b      	lsls	r3, r3, #25
 8009d4e:	f53f af1d 	bmi.w	8009b8c <_vfiprintf_r+0x44>
 8009d52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d54:	e71c      	b.n	8009b90 <_vfiprintf_r+0x48>
 8009d56:	ab03      	add	r3, sp, #12
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <_vfiprintf_r+0x22c>)
 8009d5e:	a904      	add	r1, sp, #16
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7fc f8d5 	bl	8005f10 <_printf_i>
 8009d66:	e7e4      	b.n	8009d32 <_vfiprintf_r+0x1ea>
 8009d68:	0800a409 	.word	0x0800a409
 8009d6c:	0800a413 	.word	0x0800a413
 8009d70:	080059c9 	.word	0x080059c9
 8009d74:	08009b25 	.word	0x08009b25
 8009d78:	0800a40f 	.word	0x0800a40f

08009d7c <__swbuf_r>:
 8009d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7e:	460e      	mov	r6, r1
 8009d80:	4614      	mov	r4, r2
 8009d82:	4605      	mov	r5, r0
 8009d84:	b118      	cbz	r0, 8009d8e <__swbuf_r+0x12>
 8009d86:	6a03      	ldr	r3, [r0, #32]
 8009d88:	b90b      	cbnz	r3, 8009d8e <__swbuf_r+0x12>
 8009d8a:	f7fc fc7f 	bl	800668c <__sinit>
 8009d8e:	69a3      	ldr	r3, [r4, #24]
 8009d90:	60a3      	str	r3, [r4, #8]
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	071a      	lsls	r2, r3, #28
 8009d96:	d525      	bpl.n	8009de4 <__swbuf_r+0x68>
 8009d98:	6923      	ldr	r3, [r4, #16]
 8009d9a:	b31b      	cbz	r3, 8009de4 <__swbuf_r+0x68>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	6922      	ldr	r2, [r4, #16]
 8009da0:	1a98      	subs	r0, r3, r2
 8009da2:	6963      	ldr	r3, [r4, #20]
 8009da4:	b2f6      	uxtb	r6, r6
 8009da6:	4283      	cmp	r3, r0
 8009da8:	4637      	mov	r7, r6
 8009daa:	dc04      	bgt.n	8009db6 <__swbuf_r+0x3a>
 8009dac:	4621      	mov	r1, r4
 8009dae:	4628      	mov	r0, r5
 8009db0:	f7ff fa2a 	bl	8009208 <_fflush_r>
 8009db4:	b9e0      	cbnz	r0, 8009df0 <__swbuf_r+0x74>
 8009db6:	68a3      	ldr	r3, [r4, #8]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	60a3      	str	r3, [r4, #8]
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	6022      	str	r2, [r4, #0]
 8009dc2:	701e      	strb	r6, [r3, #0]
 8009dc4:	6962      	ldr	r2, [r4, #20]
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d004      	beq.n	8009dd6 <__swbuf_r+0x5a>
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	07db      	lsls	r3, r3, #31
 8009dd0:	d506      	bpl.n	8009de0 <__swbuf_r+0x64>
 8009dd2:	2e0a      	cmp	r6, #10
 8009dd4:	d104      	bne.n	8009de0 <__swbuf_r+0x64>
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f7ff fa15 	bl	8009208 <_fflush_r>
 8009dde:	b938      	cbnz	r0, 8009df0 <__swbuf_r+0x74>
 8009de0:	4638      	mov	r0, r7
 8009de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009de4:	4621      	mov	r1, r4
 8009de6:	4628      	mov	r0, r5
 8009de8:	f000 f806 	bl	8009df8 <__swsetup_r>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d0d5      	beq.n	8009d9c <__swbuf_r+0x20>
 8009df0:	f04f 37ff 	mov.w	r7, #4294967295
 8009df4:	e7f4      	b.n	8009de0 <__swbuf_r+0x64>
	...

08009df8 <__swsetup_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4b2a      	ldr	r3, [pc, #168]	; (8009ea4 <__swsetup_r+0xac>)
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	6818      	ldr	r0, [r3, #0]
 8009e00:	460c      	mov	r4, r1
 8009e02:	b118      	cbz	r0, 8009e0c <__swsetup_r+0x14>
 8009e04:	6a03      	ldr	r3, [r0, #32]
 8009e06:	b90b      	cbnz	r3, 8009e0c <__swsetup_r+0x14>
 8009e08:	f7fc fc40 	bl	800668c <__sinit>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e12:	0718      	lsls	r0, r3, #28
 8009e14:	d422      	bmi.n	8009e5c <__swsetup_r+0x64>
 8009e16:	06d9      	lsls	r1, r3, #27
 8009e18:	d407      	bmi.n	8009e2a <__swsetup_r+0x32>
 8009e1a:	2309      	movs	r3, #9
 8009e1c:	602b      	str	r3, [r5, #0]
 8009e1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295
 8009e28:	e034      	b.n	8009e94 <__swsetup_r+0x9c>
 8009e2a:	0758      	lsls	r0, r3, #29
 8009e2c:	d512      	bpl.n	8009e54 <__swsetup_r+0x5c>
 8009e2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e30:	b141      	cbz	r1, 8009e44 <__swsetup_r+0x4c>
 8009e32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e36:	4299      	cmp	r1, r3
 8009e38:	d002      	beq.n	8009e40 <__swsetup_r+0x48>
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	f7fd fbc2 	bl	80075c4 <_free_r>
 8009e40:	2300      	movs	r3, #0
 8009e42:	6363      	str	r3, [r4, #52]	; 0x34
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e4a:	81a3      	strh	r3, [r4, #12]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	6063      	str	r3, [r4, #4]
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	6023      	str	r3, [r4, #0]
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	f043 0308 	orr.w	r3, r3, #8
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	b94b      	cbnz	r3, 8009e74 <__swsetup_r+0x7c>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e6a:	d003      	beq.n	8009e74 <__swsetup_r+0x7c>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f000 f884 	bl	8009f7c <__smakebuf_r>
 8009e74:	89a0      	ldrh	r0, [r4, #12]
 8009e76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e7a:	f010 0301 	ands.w	r3, r0, #1
 8009e7e:	d00a      	beq.n	8009e96 <__swsetup_r+0x9e>
 8009e80:	2300      	movs	r3, #0
 8009e82:	60a3      	str	r3, [r4, #8]
 8009e84:	6963      	ldr	r3, [r4, #20]
 8009e86:	425b      	negs	r3, r3
 8009e88:	61a3      	str	r3, [r4, #24]
 8009e8a:	6923      	ldr	r3, [r4, #16]
 8009e8c:	b943      	cbnz	r3, 8009ea0 <__swsetup_r+0xa8>
 8009e8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e92:	d1c4      	bne.n	8009e1e <__swsetup_r+0x26>
 8009e94:	bd38      	pop	{r3, r4, r5, pc}
 8009e96:	0781      	lsls	r1, r0, #30
 8009e98:	bf58      	it	pl
 8009e9a:	6963      	ldrpl	r3, [r4, #20]
 8009e9c:	60a3      	str	r3, [r4, #8]
 8009e9e:	e7f4      	b.n	8009e8a <__swsetup_r+0x92>
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	e7f7      	b.n	8009e94 <__swsetup_r+0x9c>
 8009ea4:	20000064 	.word	0x20000064

08009ea8 <_raise_r>:
 8009ea8:	291f      	cmp	r1, #31
 8009eaa:	b538      	push	{r3, r4, r5, lr}
 8009eac:	4604      	mov	r4, r0
 8009eae:	460d      	mov	r5, r1
 8009eb0:	d904      	bls.n	8009ebc <_raise_r+0x14>
 8009eb2:	2316      	movs	r3, #22
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ebe:	b112      	cbz	r2, 8009ec6 <_raise_r+0x1e>
 8009ec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ec4:	b94b      	cbnz	r3, 8009eda <_raise_r+0x32>
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f000 f830 	bl	8009f2c <_getpid_r>
 8009ecc:	462a      	mov	r2, r5
 8009ece:	4601      	mov	r1, r0
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ed6:	f000 b817 	b.w	8009f08 <_kill_r>
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d00a      	beq.n	8009ef4 <_raise_r+0x4c>
 8009ede:	1c59      	adds	r1, r3, #1
 8009ee0:	d103      	bne.n	8009eea <_raise_r+0x42>
 8009ee2:	2316      	movs	r3, #22
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	e7e7      	b.n	8009eba <_raise_r+0x12>
 8009eea:	2400      	movs	r4, #0
 8009eec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	4798      	blx	r3
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	e7e0      	b.n	8009eba <_raise_r+0x12>

08009ef8 <raise>:
 8009ef8:	4b02      	ldr	r3, [pc, #8]	; (8009f04 <raise+0xc>)
 8009efa:	4601      	mov	r1, r0
 8009efc:	6818      	ldr	r0, [r3, #0]
 8009efe:	f7ff bfd3 	b.w	8009ea8 <_raise_r>
 8009f02:	bf00      	nop
 8009f04:	20000064 	.word	0x20000064

08009f08 <_kill_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d07      	ldr	r5, [pc, #28]	; (8009f28 <_kill_r+0x20>)
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	4611      	mov	r1, r2
 8009f14:	602b      	str	r3, [r5, #0]
 8009f16:	f7f7 fc57 	bl	80017c8 <_kill>
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	d102      	bne.n	8009f24 <_kill_r+0x1c>
 8009f1e:	682b      	ldr	r3, [r5, #0]
 8009f20:	b103      	cbz	r3, 8009f24 <_kill_r+0x1c>
 8009f22:	6023      	str	r3, [r4, #0]
 8009f24:	bd38      	pop	{r3, r4, r5, pc}
 8009f26:	bf00      	nop
 8009f28:	200004e0 	.word	0x200004e0

08009f2c <_getpid_r>:
 8009f2c:	f7f7 bc44 	b.w	80017b8 <_getpid>

08009f30 <__swhatbuf_r>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	460c      	mov	r4, r1
 8009f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f38:	2900      	cmp	r1, #0
 8009f3a:	b096      	sub	sp, #88	; 0x58
 8009f3c:	4615      	mov	r5, r2
 8009f3e:	461e      	mov	r6, r3
 8009f40:	da0d      	bge.n	8009f5e <__swhatbuf_r+0x2e>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f48:	f04f 0100 	mov.w	r1, #0
 8009f4c:	bf0c      	ite	eq
 8009f4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f52:	2340      	movne	r3, #64	; 0x40
 8009f54:	2000      	movs	r0, #0
 8009f56:	6031      	str	r1, [r6, #0]
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	b016      	add	sp, #88	; 0x58
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
 8009f5e:	466a      	mov	r2, sp
 8009f60:	f000 f848 	bl	8009ff4 <_fstat_r>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	dbec      	blt.n	8009f42 <__swhatbuf_r+0x12>
 8009f68:	9901      	ldr	r1, [sp, #4]
 8009f6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f72:	4259      	negs	r1, r3
 8009f74:	4159      	adcs	r1, r3
 8009f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f7a:	e7eb      	b.n	8009f54 <__swhatbuf_r+0x24>

08009f7c <__smakebuf_r>:
 8009f7c:	898b      	ldrh	r3, [r1, #12]
 8009f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f80:	079d      	lsls	r5, r3, #30
 8009f82:	4606      	mov	r6, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	d507      	bpl.n	8009f98 <__smakebuf_r+0x1c>
 8009f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	6123      	str	r3, [r4, #16]
 8009f90:	2301      	movs	r3, #1
 8009f92:	6163      	str	r3, [r4, #20]
 8009f94:	b002      	add	sp, #8
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
 8009f98:	ab01      	add	r3, sp, #4
 8009f9a:	466a      	mov	r2, sp
 8009f9c:	f7ff ffc8 	bl	8009f30 <__swhatbuf_r>
 8009fa0:	9900      	ldr	r1, [sp, #0]
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7fd fb81 	bl	80076ac <_malloc_r>
 8009faa:	b948      	cbnz	r0, 8009fc0 <__smakebuf_r+0x44>
 8009fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb0:	059a      	lsls	r2, r3, #22
 8009fb2:	d4ef      	bmi.n	8009f94 <__smakebuf_r+0x18>
 8009fb4:	f023 0303 	bic.w	r3, r3, #3
 8009fb8:	f043 0302 	orr.w	r3, r3, #2
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	e7e3      	b.n	8009f88 <__smakebuf_r+0xc>
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	6020      	str	r0, [r4, #0]
 8009fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc8:	81a3      	strh	r3, [r4, #12]
 8009fca:	9b00      	ldr	r3, [sp, #0]
 8009fcc:	6163      	str	r3, [r4, #20]
 8009fce:	9b01      	ldr	r3, [sp, #4]
 8009fd0:	6120      	str	r0, [r4, #16]
 8009fd2:	b15b      	cbz	r3, 8009fec <__smakebuf_r+0x70>
 8009fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f000 f81d 	bl	800a018 <_isatty_r>
 8009fde:	b128      	cbz	r0, 8009fec <__smakebuf_r+0x70>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	f023 0303 	bic.w	r3, r3, #3
 8009fe6:	f043 0301 	orr.w	r3, r3, #1
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	431d      	orrs	r5, r3
 8009ff0:	81a5      	strh	r5, [r4, #12]
 8009ff2:	e7cf      	b.n	8009f94 <__smakebuf_r+0x18>

08009ff4 <_fstat_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4d07      	ldr	r5, [pc, #28]	; (800a014 <_fstat_r+0x20>)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	602b      	str	r3, [r5, #0]
 800a002:	f7f7 fc40 	bl	8001886 <_fstat>
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d102      	bne.n	800a010 <_fstat_r+0x1c>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	b103      	cbz	r3, 800a010 <_fstat_r+0x1c>
 800a00e:	6023      	str	r3, [r4, #0]
 800a010:	bd38      	pop	{r3, r4, r5, pc}
 800a012:	bf00      	nop
 800a014:	200004e0 	.word	0x200004e0

0800a018 <_isatty_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4d06      	ldr	r5, [pc, #24]	; (800a034 <_isatty_r+0x1c>)
 800a01c:	2300      	movs	r3, #0
 800a01e:	4604      	mov	r4, r0
 800a020:	4608      	mov	r0, r1
 800a022:	602b      	str	r3, [r5, #0]
 800a024:	f7f7 fc3f 	bl	80018a6 <_isatty>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_isatty_r+0x1a>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_isatty_r+0x1a>
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	200004e0 	.word	0x200004e0

0800a038 <_init>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	bf00      	nop
 800a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03e:	bc08      	pop	{r3}
 800a040:	469e      	mov	lr, r3
 800a042:	4770      	bx	lr

0800a044 <_fini>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr
